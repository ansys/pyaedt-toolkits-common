[
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.image_path",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.image_path.html#image_path",
        "title": "image_path",
        "section": "image_path",
        "text": "Get the full path for the specified image file.\nThe name of the image file.\nThe full path to the specified image file.\nimage_path\npython:str\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.image_path",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.image_path.html#ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.image_path",
        "title": "image_path > image_path > image_path",
        "section": "image_path > image_path",
        "text": "LoadImages.image_path(file_name)\n\nGet the full path for the specified image file.\n\nParameters\n\nfile_name\n\npython:str\n\nThe name of the image file.\n\nReturns\n\npython:str\n\nThe full path to the specified image file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#edb-simple-example",
        "title": "EDB simple example",
        "section": "EDB simple example",
        "text": "This example shows how to use the EDBCommon class to open an existing EDB project.\nEDB simple example\nEDBCommon"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#perform-required-imports",
        "title": "EDB simple example > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#initialize-temporary-folder-and-project-settings",
        "title": "EDB simple example > Initialize temporary folder and project settings",
        "section": "Initialize temporary folder and project settings",
        "text": "Initialize a temporary folder to copy the input file into and specify project settings.\nInitialize temporary folder and project settings"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#initialize-toolkit",
        "title": "EDB simple example > Initialize toolkit",
        "section": "Initialize toolkit",
        "text": "Initialize the toolkit.\nInitialize toolkit"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#initialize-edb-project",
        "title": "EDB simple example > Initialize EDB project",
        "section": "Initialize EDB project",
        "text": "Open the EDB project.\nInitialize EDB project"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#get-toolkit-properties",
        "title": "EDB simple example > Get toolkit properties",
        "section": "Get toolkit properties",
        "text": "Get toolkit properties, which contain the project information.\nGet toolkit properties"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#save-project",
        "title": "EDB simple example > Save project",
        "section": "Save project",
        "text": "Copy the current project in a new file.\nSave project"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#get-cell-names",
        "title": "EDB simple example > Get cell names",
        "section": "Get cell names",
        "text": "Get cell names using PyEDB.\nGet cell names"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#save-and-release-edb",
        "title": "EDB simple example > Save and release EDB",
        "section": "Save and release EDB",
        "text": "Save and release EDB.\nSave and release EDB"
    },
    {
        "objectID": "examples/edb_common/api_edb",
        "href": "examples/edb_common/api_edb.html#remove-temporary-folder",
        "title": "EDB simple example > Remove temporary folder",
        "section": "Remove temporary folder",
        "text": "Remove the temporary folder.\nRemove temporary folder"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#architecture",
        "title": "Architecture",
        "section": "Architecture",
        "text": "The AEDT Common Toolkit provides a common API for creating new AEDT toolkits.\nThereby standardizing their implementations.\nThe API provides methods for connecting to an existing AEDT session, opening an existing\nAEDT project, and initializing a new AEDT session, which are basic capabilities required\nby any toolkit.\nThe architecture is divided in two main parts:\nBackend: Consists of the API and REST API. The API is built on PyAEDT. The REST API uses\nFlask to facilitate the creation of a REST\nAPI that enables interactions between different services through HTTP requests. By leveraging\nFlask, the toolkit becomes interface-agnostic, allowing flexibility in choosing different user\ninterfaces such as a Web UI.\nUser Interface: Provides UI creation capability using\nPyside6. Pyside6 includes a designer tool\nfor creating UIs translated directly to Python.\nArchitecture"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#toolkit-architecture-diagram",
        "title": "Architecture > Toolkit architecture diagram",
        "section": "Toolkit architecture diagram",
        "text": "Toolkit architecture diagram"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#toolkit-backend-and-ui",
        "title": "Architecture > Toolkit backend and UI",
        "section": "Toolkit backend and UI",
        "text": "The repository for the PyAEDT Common Toolkit is structured as follows:\n.github: GitHub Action configuration.\ndoc: Documentation structure.\ncommon:\nToolkit code, split into backend and UI.\nNon-user-facing part of the toolkit for handling requests and preparing data for the UI. Key files include:\nrest_api.py: Defines Flask entrypoints.\napi.py: Defines the toolkit API.\ncommon_properties.toml: Defines common backend properties.\nmodels.py: Defines the class for storing backend properties.\nui: UI part of\nthe toolkit. Key files include:\ncommon_properties.toml: Defines common UI properties.\nmodels.py: Defines the class for storing UI properties.\ntests: Folder containing the backend\nunit tests.\nToolkit backend and UI\nrest_api.py\napi.py\ncommon_properties.toml\nmodels.py\ncommon_properties.toml\nmodels.py"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#models-and-properties",
        "title": "Architecture > Models and properties",
        "section": "Models and properties",
        "text": "The models.py\nfile stores the backend properties that are shared between the backend and UI.\nProperties are loaded by loading the content of the properties in the class properties.\nTo understand how the backend and UI interact, see the actions_generic.py\nfile in the repository. For example, when an event is triggered by the frontend, the\nget_properties()\nmethod builds the GET HTTP request to send to the backend to retrieve properties from the backend.\nThe event of setting up a property calls the set_properties()\nmethod, which builds the PUT HTTP request that is sent to the backend.\nModels and properties"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#api",
        "title": "Architecture > API",
        "section": "API",
        "text": "The ../toolkit/api contains three classes, Common, AEDTCommon, and EDBCommon, which provide methods for\ncontrolling the toolkit workflow.\nAPI\nCommon\nAEDTCommon\nEDBCommon"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#rest-api",
        "title": "Architecture > REST API",
        "section": "REST API",
        "text": "REST APIs are standard web interfaces allowing clients to communicate with services via HTTP requests.\nJSON is the standard for transferring data. In fact, REST APIs accept JSON for request payload and also\nsend responses to JSON.\nIn the client-server architecture model, the client sends the request to the server to fetch some information.\nServer-side technologies decode JSON information and transmit back the response to the client. This interaction\nis handled by the HTTP protocol.\nREST API"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#ui-and-backend-interaction",
        "title": "Architecture > UI and backend interaction",
        "section": "UI and backend interaction",
        "text": "The UI sends HTTP requests to retrieve data, while the backend returns appropriate results.\nThe toolkit uses CRUD (Create, Read, Update & Delete) operations that are simply HTTP request methods\nthat specify the action to perform through the request.\nUI and backend interaction"
    },
    {
        "objectID": "getting_started/architecture",
        "href": "getting_started/architecture.html#ui",
        "title": "Architecture > UI",
        "section": "UI",
        "text": "For more information on the UI, see ../toolkit/ui.\nUI"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_progress",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_progress.html#update_progress",
        "title": "update_progress",
        "section": "update_progress",
        "text": "Clear all layout.\nupdate_progress"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_progress",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_progress.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_progress",
        "title": "update_progress > update_progress > update_progress",
        "section": "update_progress > update_progress",
        "text": "CommonWindowUtils.update_progress(progress_value)\n\nClear all layout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.load_edb",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.load_edb.html#load_edb",
        "title": "load_edb",
        "section": "load_edb",
        "text": "Load the EDB project.\nFull path to the aedb folder.\nTrue when successful, False when failed.\nload_edb\npython:str\noptional\naedb\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.load_edb",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.load_edb.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.load_edb",
        "title": "load_edb > load_edb > load_edb",
        "section": "load_edb > load_edb",
        "text": "EDBCommon.load_edb(edb_path=None)\n\nLoad the EDB project.\n\nParameters\n\nedb_path\n\npython:str, optional\n\nFull path to the aedb folder.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n>>> toolkit_api.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#pyiconbutton",
        "title": "PyIconButton",
        "section": "PyIconButton",
        "text": "Icon button widget that can be used as a colored icon.\nThe icon and color can be customized during initialization.\nPath to the icon image file.\nText for tooltip.\nIdentifier for the button.\nWidth of the button.\nHeight of the button.\nRadius for rounded corners.\nBackground color in hex color code.\nBackground color when hovered in hex color code.\nBackground color when being pressed in hex color code.\nIcon color in hex color code.\nIcon color when hovered in hex color code.\nIcon color when being pressed in hex color code.\nActive icon color in hex color code.\nColor for dark theme in hex color code.\nText color in hex color code.\nContext color in hex color code.\nTop margin for tooltip.\nWhether the button is currently active.\nChange the style of the button based on the given event.\nEvent triggering the style change.\nHandle the enter event.\nEnter event.\nPaint the icon on the button.\nQPainter object.\nPath to the icon image file.\nRectangle for the icon placement.\nCheck if the button is in an active state.\nTrue if the button is active, False otherwise.\nHandle the leave event.\nLeave event.\nHandle the mouse press event.\nMouse press event.\nHandle the mouse release event.\nMouse release event.\nPaint the button.\nPaint event.\nSet the active state of the button.\nWhether the button is active or not.\nSet the icon for the button.\nPath to the icon image file.\nPyIconButton\npython:str\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\noptional\nQEvent\nQEvent\nQPainter\npython:str\nQRect\nQEvent\nQEvent\nQEvent\nQEvent\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton",
        "title": "PyIconButton > PyIconButton > PyIconButton",
        "section": "PyIconButton > PyIconButton",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton(icon_path=None, tooltip_text='', btn_id=None, width=30, height=30, radius=8, bg_color='#343b48', bg_color_hover='#3c4454', bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', dark_one='#1b1e23', text_foreground='#8a95aa', context_color='#568af2', top_margin=40, is_active=False)\n\nIcon button widget that can be used as a colored icon.\n\nThe icon and color can be customized during initialization.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\ntooltip_text\n\npython:str, optional\n\nText for tooltip.\n\nbtn_id\n\npython:str, optional\n\nIdentifier for the button.\n\nwidth\n\npython:int, optional\n\nWidth of the button.\n\nheight\n\npython:int, optional\n\nHeight of the button.\n\nradius\n\npython:int, optional\n\nRadius for rounded corners.\n\nbg_color\n\npython:str, optional\n\nBackground color in hex color code.\n\nbg_color_hover\n\npython:str, optional\n\nBackground color when hovered in hex color code.\n\nbg_color_pressed\n\npython:str, optional\n\nBackground color when being pressed in hex color code.\n\nicon_color\n\npython:str, optional\n\nIcon color in hex color code.\n\nicon_color_hover\n\npython:str, optional\n\nIcon color when hovered in hex color code.\n\nicon_color_pressed\n\npython:str, optional\n\nIcon color when being pressed in hex color code.\n\nicon_color_active\n\npython:str, optional\n\nActive icon color in hex color code.\n\ndark_one\n\npython:str, optional\n\nColor for dark theme in hex color code.\n\ntext_foreground\n\npython:str, optional\n\nText color in hex color code.\n\ncontext_color\n\npython:str, optional\n\nContext color in hex color code.\n\ntop_margin\n\npython:int, optional\n\nTop margin for tooltip.\n\nis_active\n\nbool, optional\n\nWhether the button is currently active.\n\nThe rest of the parameters customize the look and emit signals for\n\n\n\ndifferent user interactions.\n\n\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QVBoxLayout, QPushButton\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class Example(QWidget):\n>>>     def __init__(self):\n>>>         super().__init__()\n>>>         layout = QVBoxLayout(self)\n>>>         layout.addWidget(QPushButton(\"Button 1\"))\n>>>         layout.addWidget(PyIconButton('icon_signal.svg', \"#FF0000\", tooltip_text=\"Example\")\n>>>         )\n>>>         layout.addWidget(QPushButton(\"Button 2\"))\n\n>>> if __name__ == \"__main__\":\n>>>     app = QApplication([])\n>>>     window = Example()\n>>>     window.show()\n>>>     app.exec()\n\n!! processed by numpydoc !!\n\n\n\nchange_style(event)\n\nChange the style of the button based on the given event.\n\nParameters\n\nevent\n\nQEvent\n\nEvent triggering the style change.\n\n!! processed by numpydoc !!\n\n\n\nenterEvent(event)\n\nHandle the enter event.\n\nParameters\n\nevent\n\nQEvent\n\nEnter event.\n\n!! processed by numpydoc !!\n\n\n\nicon_paint(qp, image, rect)\n\nPaint the icon on the button.\n\nParameters\n\nqp\n\nQPainter\n\nQPainter object.\n\nimage\n\npython:str\n\nPath to the icon image file.\n\nrect\n\nQRect\n\nRectangle for the icon placement.\n\n!! processed by numpydoc !!\n\n\n\nis_active()\n\nCheck if the button is in an active state.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\nleaveEvent(event)\n\nHandle the leave event.\n\nParameters\n\nevent\n\nQEvent\n\nLeave event.\n\n!! processed by numpydoc !!\n\n\n\nmousePressEvent(event)\n\nHandle the mouse press event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n!! processed by numpydoc !!\n\n\n\nmouseReleaseEvent(event)\n\nHandle the mouse release event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n!! processed by numpydoc !!\n\n\n\npaintEvent(event)\n\nPaint the button.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n!! processed by numpydoc !!\n\n\n\nset_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nWhether the button is active or not.\n\n!! processed by numpydoc !!\n\n\n\nset_icon(icon_path)\n\nSet the icon for the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.change_style",
        "title": "PyIconButton > PyIconButton > change_style",
        "section": "PyIconButton > change_style",
        "text": "change_style(event)\n\nChange the style of the button based on the given event.\n\nParameters\n\nevent\n\nQEvent\n\nEvent triggering the style change.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.enterEvent",
        "title": "PyIconButton > PyIconButton > enterEvent",
        "section": "PyIconButton > enterEvent",
        "text": "enterEvent(event)\n\nHandle the enter event.\n\nParameters\n\nevent\n\nQEvent\n\nEnter event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.icon_paint",
        "title": "PyIconButton > PyIconButton > icon_paint",
        "section": "PyIconButton > icon_paint",
        "text": "icon_paint(qp, image, rect)\n\nPaint the icon on the button.\n\nParameters\n\nqp\n\nQPainter\n\nQPainter object.\n\nimage\n\npython:str\n\nPath to the icon image file.\n\nrect\n\nQRect\n\nRectangle for the icon placement.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.is_active",
        "title": "PyIconButton > PyIconButton > is_active",
        "section": "PyIconButton > is_active",
        "text": "is_active()\n\nCheck if the button is in an active state.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.leaveEvent",
        "title": "PyIconButton > PyIconButton > leaveEvent",
        "section": "PyIconButton > leaveEvent",
        "text": "leaveEvent(event)\n\nHandle the leave event.\n\nParameters\n\nevent\n\nQEvent\n\nLeave event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.mousePressEvent",
        "title": "PyIconButton > PyIconButton > mousePressEvent",
        "section": "PyIconButton > mousePressEvent",
        "text": "mousePressEvent(event)\n\nHandle the mouse press event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.mouseReleaseEvent",
        "title": "PyIconButton > PyIconButton > mouseReleaseEvent",
        "section": "PyIconButton > mouseReleaseEvent",
        "text": "mouseReleaseEvent(event)\n\nHandle the mouse release event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.paintEvent",
        "title": "PyIconButton > PyIconButton > paintEvent",
        "section": "PyIconButton > paintEvent",
        "text": "paintEvent(event)\n\nPaint the button.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.set_active",
        "title": "PyIconButton > PyIconButton > set_active",
        "section": "PyIconButton > set_active",
        "text": "set_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nWhether the button is active or not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon_button",
        "href": "toolkit/ui_reference/widgets/icon_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton.set_icon",
        "title": "PyIconButton > PyIconButton > set_icon",
        "section": "PyIconButton > set_icon",
        "text": "set_icon(icon_path)\n\nSet the icon for the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/index",
        "href": "toolkit/ui_reference/widgets/index.html#widgets",
        "title": "Widgets",
        "section": "Widgets",
        "text": "Widgets"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_page",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_page.html#set_page",
        "title": "set_page",
        "section": "set_page",
        "text": "Set the current page in the load_pages widget.\nThe page widget to be displayed as the current page.\nset_page\nQWidget"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_page",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_page.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_page",
        "title": "set_page > set_page > set_page",
        "section": "set_page > set_page",
        "text": "CommonWindowUtils.set_page(page)\n\nSet the current page in the load_pages widget.\n\nParameters\n\npage\n\nQWidget\n\nThe page widget to be displayed as the current page.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#installation",
        "title": "Installation",
        "section": "Installation",
        "text": "The PyAEDT Common Toolkit can be installed like any other open source package\nand then added as a dependency to a new toolkit project.\nFrom PyPI, you can either install both the backend and user interface (UI)\nmethods or install only the backend methods.\nTo install both the backend and UI methods, run this command:\nIf you only need the common API, install only the backend methods with this\ncommand:\nInstallation"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_properties.html#get_properties",
        "title": "get_properties",
        "section": "get_properties",
        "text": "Get the toolkit properties.\nDictionary containing the toolkit properties.\nget_properties\npython:dict"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_properties.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_properties",
        "title": "get_properties > get_properties > get_properties",
        "section": "get_properties > get_properties",
        "text": "AEDTCommon.get_properties() -> Dict[str, str]\n\nGet the toolkit properties.\n\nReturns\n\npython:dict\n\nDictionary containing the toolkit properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_properties()\n{\"property1\": value1, \"property2\": value2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys repository appears in\nContributing\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyAEDT or its toolkits.\nThe following contribution information is specific to this library.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest version of the PyAEDT Common Toolkit in\ndevelopment mode, run these commands:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyAEDT Common Toolkit Issues page\nto create issues to report bugs and request new features.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-documentation",
        "title": "Contribute > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release is hosted at PyAEDT Common Toolkit documentation.\nIn the upper right corner of the documentation’s title bar, there is an option for switching from viewing\nthe documentation for the latest stable release to viewing the documentation for the development version\nor previously released versions.\nView documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "The Common Toolkit is compliant with PyAnsys code style. It uses the tool\npre-commit to select the code style.\nYou can install and activate this tool with these commands:\nYou can also install this as a pre-commit hook with this command:\nThis way, it’s not possible for you to push code that fails the style checks:\nAdhere to code style"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#maximum-line-length",
        "title": "Contribute > Maximum line length",
        "section": "Maximum line length",
        "text": "Best practice is to keep the line length at or below 120 characters for code\nand comments. Lines longer than this might not display properly on some terminals\nand tools or might be difficult to follow.\nMaximum line length"
    },
    {
        "objectID": "index",
        "href": "index.html#pyaedt-common-toolkit-documentation-073",
        "title": "PyAEDT Common Toolkit documentation 0.7.3",
        "section": "PyAEDT Common Toolkit documentation 0.7.3",
        "text": "Useful links:\nInstallation |\nSource repository |\nIssues\nThe PyADT Common Toolkit provides common methods and best practices for creating an Ansys Electronics Desktop (AEDT) toolkit.\nLearn how to install the PyADT Common Toolkit, understand its architecture\nand use this toolkit’s common method to developer an example AEDT toolkit.\nUnderstand how to use the backend API.\nUnderstand how to use the UI API.\nExplore examples that show how to use the Common AEDT API.\nLearn how to contribute to the PyAEDT Common Toolkit codebase or documentation.\nPyAEDT Common Toolkit documentation 0.7.3"
    },
    {
        "objectID": "index",
        "href": "index.html#what-is-this-library",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > What is this library?",
        "section": "What is this library?",
        "text": "This library is a common library for AEDT toolkits. It brings numerous advantages like enhancing efficiency,\nconsistency, and collaboration in the creation and development of AEDT toolkits.\nThis library provides methods and best practices to develop AEDT toolkits. These are the main advantages of using\nthis library:\nWhat is this library?"
    },
    {
        "objectID": "index",
        "href": "index.html#standardization",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Standardization",
        "section": "Standardization",
        "text": "A common toolkit framework establishes standardized guidelines, conventions, and practices\nfor toolkit development. This ensures that all developers follow a consistent structure, making it easier for them to\nunderstand and contribute to different toolkits.\nStandardization"
    },
    {
        "objectID": "index",
        "href": "index.html#interoperability",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Interoperability",
        "section": "Interoperability",
        "text": "With a common framework, different AEDT toolkits become more interoperable.\nDevelopers can create tools that seamlessly integrate with existing toolkits, promoting a modular\nand extensible ecosystem.\nThis interoperability is crucial for users who may need functionalities from multiple toolkits in their workflows.\nInteroperability"
    },
    {
        "objectID": "index",
        "href": "index.html#reuse-code",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Reuse code",
        "section": "Reuse code",
        "text": "A common toolkit framework encourages the reuse of code components across different toolkits.\nDevelopers can leverage existing modules, functions, and libraries, saving time and effort in creating similar\nfunctionalities from scratch. This promotes a more efficient development process and reduces redundancy.\nReuse code"
    },
    {
        "objectID": "index",
        "href": "index.html#maintain",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Maintain",
        "section": "Maintain",
        "text": "Standardized frameworks make it easier to maintain and update AEDT toolkits.\nWhen changes or improvements are required, developers can follow a unified set of procedures, ensuring that updates are\napplied consistently across all toolkits.\nThis helps in avoiding compatibility issues and streamlining the maintenance process.\nMaintain"
    },
    {
        "objectID": "index",
        "href": "index.html#collaboration",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Collaboration",
        "section": "Collaboration",
        "text": "A common toolkit framework fosters collaboration among developers by providing a shared set of tools and practices.\nIt becomes easier for multiple developers to work on different aspects of the toolkit simultaneously,\nas they all adhere to the same framework.\nThis collaborative environment can lead to faster development cycles and a more robust set of tools.\nCollaboration"
    },
    {
        "objectID": "index",
        "href": "index.html#documentation-and-training",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Documentation and training",
        "section": "Documentation and training",
        "text": "A standardized framework comes with consistent documentation and training resources.\nThis makes it easier for developers to understand the structure of the toolkit, its functionalities, and best practices.\nDocumentation and training"
    },
    {
        "objectID": "index",
        "href": "index.html#quality-assurance",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Quality assurance",
        "section": "Quality assurance",
        "text": "A common toolkit framework enables better quality assurance processes.\nStandardized testing methodologies and practices can be implemented,\nensuring that each toolkit adheres to the same quality standards.\nThis results in more reliable and stable toolkits for end-users.\nQuality assurance"
    },
    {
        "objectID": "index",
        "href": "index.html#indices-and-tables",
        "title": "PyAEDT Common Toolkit documentation 0.7.3 > Indices and tables",
        "section": "Indices and tables",
        "text": "genindex\nmodindex\nsearch\nIndices and tables"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_design",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_design.html#connect_design",
        "title": "connect_design",
        "section": "connect_design",
        "text": "Connect to an application design.\nIf a design exists, this method uses the active project and design. If a design does not exist,\nthis method creates a design of the specified type. If no application is specified, the default is \"HFSS\".\nAEDT application name. Options are:\n\"Circuit\"\n\"EMIT\"\n\"HFSS\"\n\"HFSS3DLayout\"\n\"Icepak\"\n\"Maxwell2D\"\n\"Maxwell3D\"\n\"Q2D\"\n\"Q3D\"\n\"Rmxprt\"\n\"TwinBuilder\"\n\"Mechanical\"\nReturns True if the connection to a design is successful, False otherwise.\nconnect_design\n\"HFSS\"\npython:str\n\"Circuit\"\n\"EMIT\"\n\"HFSS\"\n\"HFSS3DLayout\"\n\"Icepak\"\n\"Maxwell2D\"\n\"Maxwell3D\"\n\"Q2D\"\n\"Q3D\"\n\"Rmxprt\"\n\"TwinBuilder\"\n\"Mechanical\"\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_design",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_design.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_design",
        "title": "connect_design > connect_design > connect_design",
        "section": "connect_design > connect_design",
        "text": "AEDTCommon.connect_design(app_name: str | None = None)\n\nConnect to an application design.\n\nIf a design exists, this method uses the active project and design. If a design does not exist,\nthis method creates a design of the specified type. If no application is specified, the default is \"HFSS\".\n\nParameters\n\napp_name\n\npython:str\n\nAEDT application name. Options are:\n\n\"Circuit\"\n\n\"EMIT\"\n\n\"HFSS\"\n\n\"HFSS3DLayout\"\n\n\"Icepak\"\n\n\"Maxwell2D\"\n\n\"Maxwell3D\"\n\n\"Q2D\"\n\n\"Q3D\"\n\n\"Rmxprt\"\n\n\"TwinBuilder\"\n\n\"Mechanical\"\n\nReturns\n\nbool\n\nReturns True if the connection to a design is successful, False otherwise.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_design()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_design_names",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_design_names.html#get_design_names",
        "title": "get_design_names",
        "section": "get_design_names",
        "text": "Get the design names for a specific project.\nThe first design name returned is the active design.\nList of design names.\nget_design_names\npython:list"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_design_names",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_design_names.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_design_names",
        "title": "get_design_names > get_design_names > get_design_names",
        "section": "get_design_names > get_design_names",
        "text": "AEDTCommon.get_design_names() -> List[str]\n\nGet the design names for a specific project.\n\nThe first design name returned is the active design.\n\nReturns\n\npython:list\n\nList of design names.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.save_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.save_project.html#save_project",
        "title": "save_project",
        "section": "save_project",
        "text": "Save the project.\nThis method uses the properties to get the project path. This method is launched in a thread.\nPath of the AEDT project. The default value is None, in which\ncase the current file is overwritten.\nRelease PyAEDT object. The default value is True.\nReturns True if the connection is successful, False otherwise.\nsave_project\npython:str\noptional\nNone\noptional\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.save_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.save_project.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.save_project",
        "title": "save_project > save_project > save_project",
        "section": "save_project > save_project",
        "text": "AEDTCommon.save_project(project_path=None, release_aedt=True)\n\nSave the project.\n\nThis method uses the properties to get the project path. This method is launched in a thread.\n\nParameters\n\nproject_path\n\npython:str, optional\n\nPath of the AEDT project. The default value is None, in which\ncase the current file is overwritten.\n\nrelease_aedt\n\nbool, optional\n\nRelease PyAEDT object. The default value is True.\n\nReturns\n\nbool\n\nReturns True if the connection is successful, False otherwise.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.save_project()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.launch_thread.html#launch_thread",
        "title": "launch_thread",
        "section": "launch_thread",
        "text": "Launch the thread.\nlaunch_thread"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.launch_thread.html#ansys.aedt.toolkits.common.backend.api.Common.launch_thread",
        "title": "launch_thread > launch_thread > launch_thread",
        "section": "launch_thread > launch_thread",
        "text": "Common.launch_thread(process) -> ThreadManager\n\nLaunch the thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/progress",
        "href": "toolkit/ui_reference/widgets/progress.html#pyprogress",
        "title": "PyProgress",
        "section": "PyProgress",
        "text": "A progress bar widget.\nInherits QWidget and includes customizable elements including\nprogress, background color, progress color, and width.\nCurrent progress value. The default is 0.\nColor of progress bar. The default is \"#ff79c6\".\nColor of background. The default is \"#151617\".\nWidth of the progress bar. The default is 10.\nPaint the progress bar.\nPaint event.\nGet the current progress value.\nThe current progress value.\nPyProgress\npython:float\npython:int\noptional\n0\n\"#ff79c6\"\n\"#151617\"\n10\nQPaintEvent\npython:float\npython:int"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/progress",
        "href": "toolkit/ui_reference/widgets/progress.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_progress.py_progress.PyProgress",
        "title": "PyProgress > PyProgress > PyProgress",
        "section": "PyProgress > PyProgress",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_progress.py_progress.PyProgress(progress=0, progress_color='#ff79c6', background_color='#151617', text_color='#FFFFFF', font_size=10, font_family='Segoe UI', width=10)\n\nA progress bar widget.\n\nInherits QWidget and includes customizable elements including\nprogress, background color, progress color, and width.\n\nParameters\n\nprogress\n\npython:float or python:int, optional\n\nCurrent progress value. The default is 0.\n\nprogress_color: str, optional\n\nColor of progress bar. The default is \"#ff79c6\".\n\nbackground_color: str, optional\n\nColor of background. The default is \"#151617\".\n\nwidth: float or int\n\nWidth of the progress bar. The default is 10.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import *\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets.py_progress.py_progress import PyProgress\n>>> from random import randint\n>>> from PySide6.QtCore import QTimer\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.progress_bar = PyProgress(progress=0,\n...                                        progress_color=\"#21252d\",\n...                                        background_color=\"#313131\",\n...                                        width=10)\n...         timer = QTimer()\n...         timer.timeout.connect(lambda: self.progress_bar.__setattr__(\"progress\", randint(0, 100)))\n...         timer.start(1000)\n...         self.progress_bar.show()\n...         sys.exit(app.exec())\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n!! processed by numpydoc !!\n\n\n\npaintEvent(e)\n\nPaint the progress bar.\n\nParameters\n\ne\n\nQPaintEvent\n\nPaint event.\n\n!! processed by numpydoc !!\n\n\n\nproperty progress\n\nGet the current progress value.\n\nReturns\n\npython:float or python:int\n\nThe current progress value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/progress",
        "href": "toolkit/ui_reference/widgets/progress.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_progress.py_progress.PyProgress.paintEvent",
        "title": "PyProgress > PyProgress > paintEvent",
        "section": "PyProgress > paintEvent",
        "text": "paintEvent(e)\n\nPaint the progress bar.\n\nParameters\n\ne\n\nQPaintEvent\n\nPaint event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/progress",
        "href": "toolkit/ui_reference/widgets/progress.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_progress.py_progress.PyProgress.progress",
        "title": "PyProgress > PyProgress > progress",
        "section": "PyProgress > progress",
        "text": "property progress\n\nGet the current progress value.\n\nReturns\n\npython:float or python:int\n\nThe current progress value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#actions",
        "title": "Actions",
        "section": "Actions",
        "text": "The FrontendGeneric class provides a generic UI for controlling the toolkit. A backend must be running previously.\nThis class provides a generic frontend for controlling the toolkit.\nCheck if the backend is currently busy.\nTrue if the backend is busy, False otherwise.\nCheck the backend connection.\nTrue when successful, False when failed.\nHandle the close event of the application window.\nFind AEDT sessions based on the selected version and graphical mode.\nAEDT version.\nFlag indicating graphical or non-graphical mode.\nA list of found AEDT sessions if successful, False otherwise.\nGet a list of AEDT projects.\nA list of AEDT project names. Returns [“No Project”] if no projects are available.\nGet AEDT model.\nProject name.\nDesign name.\nDefine if air and vacuum objects will be exported.\nWhether to encode the file. The default is True.\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\nTrue when successful, False when failed.\nGet project name from project path.\nProject name\nGet properties from the backend.\nA dictionary of properties if successful, False otherwise.\nGet the installed versions of AEDT.\nA list of installed AEDT versions if successful, False otherwise.\nLaunch AEDT.\nThe selected AEDT version.\nThe selected AEDT process.\nFlag indicating whether to run AEDT in non-graphical mode. The default is False.\nLog a message and update the progress bar.\nThis method logs the given message at the specified log level, and updates the progress\nbar to the given progress percentage if provided.\nThe log message.\nThe log level (debug, info, warning, error, critical). The default is “debug”.\nThe progress percentage. If provided, it updates the progress bar.\nHandle cancel button click.\nOpen an AEDT project.\nThe path to the selected AEDT project.\nPerform GET requests on URL.\nContinuously perform GET requests to the specified URL until a valid response is received.\nURL to poll.\nTime out in seconds. The default is 10 seconds.\nA 2-tuple containing a string and a boolean.\nThe boolean states if the GET requests succeeded.\nThe string represents the response or exception content.\nRelease and close the AEDT desktop.\nRelease the AEDT desktop without closing projects.\nSave the current AEDT project.\nOpens a file dialog to select a location to save the AEDT project. The project is saved\nwith a ‘.aedt’ extension.\nThis method relies on backend communication to save the project.\nSet properties in the backend.\nDictionary of properties to set.\nUpdate design names based on the active project.\nThe active AEDT project. If not provided, the current active project will be used.\nA list of design names.\nWait thread until backend is idle.\nTime out in seconds. The default is 10 seconds.\nTrue when the backend is idle, False otherwise.\nYou can modify the default properties with the following script:\nActions\nFrontendGeneric\nTrue\nFalse\nTrue\nFalse\npython:str\npython:list\npython:False\nFalse\npython:list\npython:str\npython:str\noptional\noptional\nTrue\npython:list\noptional\nNone\npython:str\noptional\nNone\noptional\nTrue\nFalse\nTrue\nFalse\npython:str\npython:dict\npython:False\nFalse\npython:list\npython:False\nFalse\npython:str\npython:str\noptional\npython:str\npython:str\noptional\npython:int\noptional\npython:str\npython:str\npython:int\noptional\npython:tuple\npython:None\npython:dict\npython:str\noptional\npython:list\npython:int\noptional\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric",
        "title": "Actions > Actions > FrontendGeneric",
        "section": "Actions > FrontendGeneric",
        "text": "class ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric\n\nThis class provides a generic frontend for controlling the toolkit.\n\n!! processed by numpydoc !!\n\n\n\nbackend_busy()\n\nCheck if the backend is currently busy.\n\nReturns\n\nbool\n\nTrue if the backend is busy, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\ncheck_connection()\n\nCheck the backend connection.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncloseEvent(event)\n\nHandle the close event of the application window.\n\n!! processed by numpydoc !!\n\n\n\nfind_process_ids(version, non_graphical)\n\nFind AEDT sessions based on the selected version and graphical mode.\n\nParameters\n\nversion\n\npython:str\n\nAEDT version.\n\nnon_graphical\n\nbool\n\nFlag indicating graphical or non-graphical mode.\n\nReturns\n\npython:list or python:False\n\nA list of found AEDT sessions if successful, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\nget_aedt_data()\n\nGet a list of AEDT projects.\n\nReturns\n\npython:list\n\nA list of AEDT project names. Returns [“No Project”] if no projects are available.\n\n!! processed by numpydoc !!\n\n\n\nget_aedt_model(project_selected, design_selected, air_objects=True, encode=True, obj_list=None, export_path=None, export_as_single_objects=True)\n\nGet AEDT model.\n\nParameters\n\nproject_selected\n\npython:str\n\nProject name.\n\ndesign_selected\n\npython:str\n\nDesign name.\n\nair_objects\n\nbool, optional\n\nDefine if air and vacuum objects will be exported.\n\nencode\n\nbool, optional\n\nWhether to encode the file. The default is True.\n\nobj_list\n\npython:list, optional\n\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\n\nexport_path\n\npython:str, optional\n\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\n\nexport_as_single_objects\n\nbool, optional\n\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nstatic get_project_name(project_path)\n\nGet project name from project path.\n\nReturns\n\npython:str\n\nProject name\n\n!! processed by numpydoc !!\n\n\n\nget_properties()\n\nGet properties from the backend.\n\nReturns\n\npython:dict or python:False\n\nA dictionary of properties if successful, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\ninstalled_versions()\n\nGet the installed versions of AEDT.\n\nReturns\n\npython:list or python:False\n\nA list of installed AEDT versions if successful, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\nlaunch_aedt(selected_version, selected_process, non_graphical=False)\n\nLaunch AEDT.\n\nParameters\n\nselected_version\n\npython:str\n\nThe selected AEDT version.\n\nselected_process\n\npython:str\n\nThe selected AEDT process.\n\nnon_graphical\n\nbool, optional\n\nFlag indicating whether to run AEDT in non-graphical mode. The default is False.\n\n!! processed by numpydoc !!\n\n\n\nlog_and_update_progress(msg, log_level: str = 'debug', progress: int | None = None)\n\nLog a message and update the progress bar.\n\nThis method logs the given message at the specified log level, and updates the progress\nbar to the given progress percentage if provided.\n\nParameters\n\nmsg\n\npython:str\n\nThe log message.\n\nlog_level\n\npython:str, optional\n\nThe log level (debug, info, warning, error, critical). The default is “debug”.\n\nprogress\n\npython:int, optional\n\nThe progress percentage. If provided, it updates the progress bar.\n\n!! processed by numpydoc !!\n\n\n\non_cancel_clicked()\n\nHandle cancel button click.\n\n!! processed by numpydoc !!\n\n\n\nopen_project(selected_project)\n\nOpen an AEDT project.\n\nParameters\n\nselected_project\n\npython:str\n\nThe path to the selected AEDT project.\n\n!! processed by numpydoc !!\n\n\n\nstatic poll_url(url: str, timeout: int = 10)\n\nPerform GET requests on URL.\n\nContinuously perform GET requests to the specified URL until a valid response is received.\n\nParameters\n\nurl\n\npython:str\n\nURL to poll.\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 10 seconds.\n\nReturns\n\npython:tuple\n\nA 2-tuple containing a string and a boolean.\nThe boolean states if the GET requests succeeded.\nThe string represents the response or exception content.\n\n!! processed by numpydoc !!\n\n\n\nrelease_and_close()\n\nRelease and close the AEDT desktop.\n\n!! processed by numpydoc !!\n\n\n\nrelease_only()\n\nRelease the AEDT desktop without closing projects.\n\n!! processed by numpydoc !!\n\n\n\nsave_project()\n\nSave the current AEDT project.\n\nOpens a file dialog to select a location to save the AEDT project. The project is saved\nwith a ‘.aedt’ extension.\n\nNote:\n\nThis method relies on backend communication to save the project.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_properties(data)\n\nSet properties in the backend.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary of properties to set.\n\n!! processed by numpydoc !!\n\n\n\nupdate_design_names(active_project=None)\n\nUpdate design names based on the active project.\n\nParameters\n\nactive_project\n\npython:str, optional\n\nThe active AEDT project. If not provided, the current active project will be used.\n\nReturns\n\npython:list\n\nA list of design names.\n\n!! processed by numpydoc !!\n\n\n\nwait_thread(timeout: int = 10)\n\nWait thread until backend is idle.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 10 seconds.\n\nReturns\n\nbool\n\nTrue when the backend is idle, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.backend_busy",
        "title": "Actions > Actions > backend_busy",
        "section": "Actions > backend_busy",
        "text": "backend_busy()\n\nCheck if the backend is currently busy.\n\nReturns\n\nbool\n\nTrue if the backend is busy, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.check_connection",
        "title": "Actions > Actions > check_connection",
        "section": "Actions > check_connection",
        "text": "check_connection()\n\nCheck the backend connection.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.closeEvent",
        "title": "Actions > Actions > closeEvent",
        "section": "Actions > closeEvent",
        "text": "closeEvent(event)\n\nHandle the close event of the application window.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.find_process_ids",
        "title": "Actions > Actions > find_process_ids",
        "section": "Actions > find_process_ids",
        "text": "find_process_ids(version, non_graphical)\n\nFind AEDT sessions based on the selected version and graphical mode.\n\nParameters\n\nversion\n\npython:str\n\nAEDT version.\n\nnon_graphical\n\nbool\n\nFlag indicating graphical or non-graphical mode.\n\nReturns\n\npython:list or python:False\n\nA list of found AEDT sessions if successful, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.get_aedt_data",
        "title": "Actions > Actions > get_aedt_data",
        "section": "Actions > get_aedt_data",
        "text": "get_aedt_data()\n\nGet a list of AEDT projects.\n\nReturns\n\npython:list\n\nA list of AEDT project names. Returns [“No Project”] if no projects are available.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.get_aedt_model",
        "title": "Actions > Actions > get_aedt_model",
        "section": "Actions > get_aedt_model",
        "text": "get_aedt_model(project_selected, design_selected, air_objects=True, encode=True, obj_list=None, export_path=None, export_as_single_objects=True)\n\nGet AEDT model.\n\nParameters\n\nproject_selected\n\npython:str\n\nProject name.\n\ndesign_selected\n\npython:str\n\nDesign name.\n\nair_objects\n\nbool, optional\n\nDefine if air and vacuum objects will be exported.\n\nencode\n\nbool, optional\n\nWhether to encode the file. The default is True.\n\nobj_list\n\npython:list, optional\n\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\n\nexport_path\n\npython:str, optional\n\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\n\nexport_as_single_objects\n\nbool, optional\n\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.get_project_name",
        "title": "Actions > Actions > get_project_name",
        "section": "Actions > get_project_name",
        "text": "static get_project_name(project_path)\n\nGet project name from project path.\n\nReturns\n\npython:str\n\nProject name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.get_properties",
        "title": "Actions > Actions > get_properties",
        "section": "Actions > get_properties",
        "text": "get_properties()\n\nGet properties from the backend.\n\nReturns\n\npython:dict or python:False\n\nA dictionary of properties if successful, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.installed_versions",
        "title": "Actions > Actions > installed_versions",
        "section": "Actions > installed_versions",
        "text": "installed_versions()\n\nGet the installed versions of AEDT.\n\nReturns\n\npython:list or python:False\n\nA list of installed AEDT versions if successful, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.launch_aedt",
        "title": "Actions > Actions > launch_aedt",
        "section": "Actions > launch_aedt",
        "text": "launch_aedt(selected_version, selected_process, non_graphical=False)\n\nLaunch AEDT.\n\nParameters\n\nselected_version\n\npython:str\n\nThe selected AEDT version.\n\nselected_process\n\npython:str\n\nThe selected AEDT process.\n\nnon_graphical\n\nbool, optional\n\nFlag indicating whether to run AEDT in non-graphical mode. The default is False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.log_and_update_progress",
        "title": "Actions > Actions > log_and_update_progress",
        "section": "Actions > log_and_update_progress",
        "text": "log_and_update_progress(msg, log_level: str = 'debug', progress: int | None = None)\n\nLog a message and update the progress bar.\n\nThis method logs the given message at the specified log level, and updates the progress\nbar to the given progress percentage if provided.\n\nParameters\n\nmsg\n\npython:str\n\nThe log message.\n\nlog_level\n\npython:str, optional\n\nThe log level (debug, info, warning, error, critical). The default is “debug”.\n\nprogress\n\npython:int, optional\n\nThe progress percentage. If provided, it updates the progress bar.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.on_cancel_clicked",
        "title": "Actions > Actions > on_cancel_clicked",
        "section": "Actions > on_cancel_clicked",
        "text": "on_cancel_clicked()\n\nHandle cancel button click.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.open_project",
        "title": "Actions > Actions > open_project",
        "section": "Actions > open_project",
        "text": "open_project(selected_project)\n\nOpen an AEDT project.\n\nParameters\n\nselected_project\n\npython:str\n\nThe path to the selected AEDT project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.poll_url",
        "title": "Actions > Actions > poll_url",
        "section": "Actions > poll_url",
        "text": "static poll_url(url: str, timeout: int = 10)\n\nPerform GET requests on URL.\n\nContinuously perform GET requests to the specified URL until a valid response is received.\n\nParameters\n\nurl\n\npython:str\n\nURL to poll.\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 10 seconds.\n\nReturns\n\npython:tuple\n\nA 2-tuple containing a string and a boolean.\nThe boolean states if the GET requests succeeded.\nThe string represents the response or exception content.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.release_and_close",
        "title": "Actions > Actions > release_and_close",
        "section": "Actions > release_and_close",
        "text": "release_and_close()\n\nRelease and close the AEDT desktop.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.release_only",
        "title": "Actions > Actions > release_only",
        "section": "Actions > release_only",
        "text": "release_only()\n\nRelease the AEDT desktop without closing projects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.save_project",
        "title": "Actions > Actions > save_project",
        "section": "Actions > save_project",
        "text": "save_project()\n\nSave the current AEDT project.\n\nOpens a file dialog to select a location to save the AEDT project. The project is saved\nwith a ‘.aedt’ extension.\n\nNote:\n\nThis method relies on backend communication to save the project.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.set_properties",
        "title": "Actions > Actions > set_properties",
        "section": "Actions > set_properties",
        "text": "set_properties(data)\n\nSet properties in the backend.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary of properties to set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.update_design_names",
        "title": "Actions > Actions > update_design_names",
        "section": "Actions > update_design_names",
        "text": "update_design_names(active_project=None)\n\nUpdate design names based on the active project.\n\nParameters\n\nactive_project\n\npython:str, optional\n\nThe active AEDT project. If not provided, the current active project will be used.\n\nReturns\n\npython:list\n\nA list of design names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/actions",
        "href": "toolkit/ui_reference/actions.html#ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric.wait_thread",
        "title": "Actions > Actions > wait_thread",
        "section": "Actions > wait_thread",
        "text": "wait_thread(timeout: int = 10)\n\nWait thread until backend is idle.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 10 seconds.\n\nReturns\n\nbool\n\nTrue when the backend is idle, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_icon_button",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_icon_button.html#add_icon_button",
        "title": "add_icon_button",
        "section": "add_icon_button",
        "text": "Add icon button.\nThe layout to which the icon button and line edit will be added.\nThe path to the icon that will be displayed on the button.\nThe height of the icon button and line edit. Default is 40.\nThe width of the icon button. If not provided, it will be set to a default value.\nThe placeholder text for the line edit. Default is ‘lineedit’.\nA list containing the layout row object, the button object, and the line edit object.\nadd_icon_button\npython:list"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_icon_button",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_icon_button.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_icon_button",
        "title": "add_icon_button > add_icon_button > add_icon_button",
        "section": "add_icon_button > add_icon_button",
        "text": "CommonWindowUtils.add_icon_button(layout, icon, height=40, width=None, text='lineedit')\n\nAdd icon button.\n\nParameters\n\nlayout: QLayout\n\nThe layout to which the icon button and line edit will be added.\n\nicon: QIcon\n\nThe path to the icon that will be displayed on the button.\n\nheight: int, optional\n\nThe height of the icon button and line edit. Default is 40.\n\nwidth: list, optional\n\nThe width of the icon button. If not provided, it will be set to a default value.\n\ntext: str, optional\n\nThe placeholder text for the line edit. Default is ‘lineedit’.\n\nReturns\n\npython:list\n\nA list containing the layout row object, the button object, and the line edit object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#aedt-simple-example",
        "title": "AEDT simple example",
        "section": "AEDT simple example",
        "text": "This example shows how to use the AEDTCommon class to launch a new AEDT session in a thread, create an HFSS design, and create a coaxial.\nAEDT simple example\nAEDTCommon"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#perform-required-imports",
        "title": "AEDT simple example > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#initialize-toolkit",
        "title": "AEDT simple example > Initialize toolkit",
        "section": "Initialize toolkit",
        "text": "Initialize the toolkit.\nInitialize toolkit"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#get-toolkit-properties",
        "title": "AEDT simple example > Get toolkit properties",
        "section": "Get toolkit properties",
        "text": "Get the toolkit properties.\nGet toolkit properties"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#set-properties",
        "title": "AEDT simple example > Set properties",
        "section": "Set properties",
        "text": "Set non-graphical mode.\nSet properties"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#initialize-aedt",
        "title": "AEDT simple example > Initialize AEDT",
        "section": "Initialize AEDT",
        "text": "Launch a new AEDT session in a thread.\nInitialize AEDT"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#wait-for-the-toolkit-thread-to-be-idle",
        "title": "AEDT simple example > Wait for the toolkit thread to be idle",
        "section": "Wait for the toolkit thread to be idle",
        "text": "Wait for the toolkit thread to be idle and ready to accept a new task.\nWait for the toolkit thread to be idle"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#connect-design",
        "title": "AEDT simple example > Connect design",
        "section": "Connect design",
        "text": "Connect or create a new design.\nConnect design"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#get-toolkit-properties",
        "title": "AEDT simple example > Get toolkit properties",
        "section": "Get toolkit properties",
        "text": "Get the toolkit properties, which contain the project information.\nGet toolkit properties"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#create-a-coaxial",
        "title": "AEDT simple example > Create a coaxial",
        "section": "Create a coaxial",
        "text": "Create a coaxial in the design.\nCreate a coaxial"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#release-aedt",
        "title": "AEDT simple example > Release AEDT",
        "section": "Release AEDT",
        "text": "Release AEDT.\nRelease AEDT"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#export-aedt-model",
        "title": "AEDT simple example > Export AEDT model",
        "section": "Export AEDT model",
        "text": "Export the OBJ files.\nExport AEDT model"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_simple",
        "href": "examples/aedt_common/api_aedt_simple.html#release-and-close-aedt",
        "title": "AEDT simple example > Release and close AEDT",
        "section": "Release and close AEDT",
        "text": "Release and close AEDT.\nRelease and close AEDT"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_left_column_menu",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_left_column_menu.html#set_left_column_menu",
        "title": "set_left_column_menu",
        "section": "set_left_column_menu",
        "text": "and the icon in the left column as the icon specified by icon_path.\nThe menu widget to be set as the current widget in the left column.\nThe title to be set in the left column’s title label.\nThe path to the icon image file to be set in the left column’s icon.\nset_left_column_menu\nQWidget\npython:str\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_left_column_menu",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_left_column_menu.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_left_column_menu",
        "title": "set_left_column_menu > set_left_column_menu > set_left_column_menu",
        "section": "set_left_column_menu > set_left_column_menu",
        "text": "CommonWindowUtils.set_left_column_menu(menu, title, icon_path)\n\nConfigures the left column of the CommonWindow UI by setting the current widget as the provided menu,\n\nthe title in the left column’s title label as the provided title,\n\nand the icon in the left column as the icon specified by icon_path.\n\nParameters\n\nmenu\n\nQWidget\n\nThe menu widget to be set as the current widget in the left column.\n\ntitle\n\npython:str\n\nThe title to be set in the left column’s title label.\n\nicon_path\n\npython:str\n\nThe path to the icon image file to be set in the left column’s icon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.export_aedt_model",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.export_aedt_model.html#export_aedt_model",
        "title": "export_aedt_model",
        "section": "export_aedt_model",
        "text": "Export the model in the OBJ format and then encode the file if the encode parameter is enabled.\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\nWhether to export air and vacuum objects. The default is False.\nWhether to encode the file. The default is True.\nList of exported OBJ files or encoded data.\nexport_aedt_model\nencode\npython:list\noptional\nNone\npython:str\noptional\nNone\noptional\nTrue\nFalse\noptional\nFalse\noptional\nTrue\npython:list\npython:dict"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.export_aedt_model",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.export_aedt_model.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.export_aedt_model",
        "title": "export_aedt_model > export_aedt_model > export_aedt_model",
        "section": "export_aedt_model > export_aedt_model",
        "text": "AEDTCommon.export_aedt_model(obj_list=None, export_path=None, export_as_single_objects=True, air_objects=False, encode=True)\n\nExport the model in the OBJ format and then encode the file if the encode parameter is enabled.\n\nParameters\n\nobj_list\n\npython:list, optional\n\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\n\nexport_path\n\npython:str, optional\n\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\n\nexport_as_single_objects\n\nbool, optional\n\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\n\nair_objects\n\nbool, optional\n\nWhether to export air and vacuum objects. The default is False.\n\nencode\n\nbool, optional\n\nWhether to encode the file. The default is True.\n\nReturns\n\npython:list or python:dict\n\nList of exported OBJ files or encoded data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_left_menu",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_left_menu.html#get_left_menu",
        "title": "get_left_menu",
        "section": "get_left_menu",
        "text": "Retrieves the QPushButton object in the left menu of the CommonWindow UI.\nThe name of the button object to be retrieved from the left menu.\nThe QPushButton object with the given object_name found in the left menu of the CommonWindow UI.\nget_left_menu\npython:str\nQPushButton"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_left_menu",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_left_menu.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_left_menu",
        "title": "get_left_menu > get_left_menu > get_left_menu",
        "section": "get_left_menu > get_left_menu",
        "text": "CommonWindowUtils.get_left_menu(object_name)\n\nRetrieves the QPushButton object in the left menu of the CommonWindow UI.\n\nParameters\n\nobject_name\n\npython:str\n\nThe name of the button object to be retrieved from the left menu.\n\nReturns\n\nQPushButton\n\nThe QPushButton object with the given object_name found in the left menu of the CommonWindow UI.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#pyleftmenu",
        "title": "PyLeftMenu",
        "section": "PyLeftMenu",
        "text": "Custom widget representing a left menu with toggle button, top and bottom layouts, and animated toggle behavior.\nThe parent widget.\nThe parent widget of the application.\nColor representing a dark shade.\nColor representing a darker shade.\nColor representing an even darker shade.\nBackground color of the left menu.\nColor of the icons in the left menu.\nColor of the icons when hovered.\nColor of the icons when pressed.\nColor of the icons in an active state.\nColor representing a context or active state.\nColor of the text in the left menu.\nColor of the text in an active state.\nBorder radius of the left menu.\nMinimum width of the left menu. The default is 50.\nMaximum width of the left menu. The default is 240.\nPath to the icon image file for the toggle button.\nPath to the icon image file for the toggle button when the menu is closed.\nText for the toggle button.\nTooltip text for the toggle button.\nAdd menus to the left menu.\nList of dictionaries containing parameters for each menu item.\nEmit signal when a menu button is clicked.\nEmit signal when a menu button is released.\nDeactivate all menu buttons.\nDeactivate all menu tabs.\nSet the active state for a specific menu button and deactivate others.\nID of the menu button to set as active.\nSet the active tab state for a specific menu button and deactivate others.\nID of the menu button to set as active tab.\nSet up the user interface for the left menu.\nToggle animation for hiding/showing the left menu.\nPyLeftMenu\n50\n240\npython:str\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu",
        "title": "PyLeftMenu > PyLeftMenu > PyLeftMenu",
        "section": "PyLeftMenu > PyLeftMenu",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu(parent=None, app_parent=None, dark_one='#1b1e23', dark_three='#21252d', dark_four='#272c36', bg_one='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', context_color='#568af2', text_foreground='#8a95aa', text_active='#dce1ec', radius=8, minimum_width=50, maximum_width=240, icon_path='icon_menu.svg', icon_path_close='icon_menu_close.svg', toggle_text='Hide Menu', toggle_tooltip='Show menu')\n\nCustom widget representing a left menu with toggle button, top and bottom layouts, and animated toggle behavior.\n\nParameters\n\nparent: QWidget, optional\n\nThe parent widget.\n\napp_parent: QWidget, optional\n\nThe parent widget of the application.\n\ndark_one: str, optional\n\nColor representing a dark shade.\n\ndark_three: str, optional\n\nColor representing a darker shade.\n\ndark_four: str, optional\n\nColor representing an even darker shade.\n\nbg_one: str, optional\n\nBackground color of the left menu.\n\nicon_color: str, optional\n\nColor of the icons in the left menu.\n\nicon_color_hover: str, optional\n\nColor of the icons when hovered.\n\nicon_color_pressed: str, optional\n\nColor of the icons when pressed.\n\nicon_color_active: str, optional\n\nColor of the icons in an active state.\n\ncontext_color: str, optional\n\nColor representing a context or active state.\n\ntext_foreground: str, optional\n\nColor of the text in the left menu.\n\ntext_active: str, optional\n\nColor of the text in an active state.\n\nradius: int, optional\n\nBorder radius of the left menu.\n\nminimum_width: int, optional\n\nMinimum width of the left menu. The default is 50.\n\nmaximum_width: int, optional\n\nMaximum width of the left menu. The default is 240.\n\nicon_path: str, optional\n\nPath to the icon image file for the toggle button.\n\nicon_path_close: str, optional\n\nPath to the icon image file for the toggle button when the menu is closed.\n\ntoggle_text: str, optional\n\nText for the toggle button.\n\ntoggle_tooltip: str, optional\n\nTooltip text for the toggle button.\n\n!! processed by numpydoc !!\n\n\n\nadd_menus(parameters)\n\nAdd menus to the left menu.\n\nParameters\n\nparameters: list\n\nList of dictionaries containing parameters for each menu item.\n\n!! processed by numpydoc !!\n\n\n\nbtn_clicked()\n\nEmit signal when a menu button is clicked.\n\n!! processed by numpydoc !!\n\n\n\nbtn_released()\n\nEmit signal when a menu button is released.\n\n!! processed by numpydoc !!\n\n\n\ndeselect_all()\n\nDeactivate all menu buttons.\n\n!! processed by numpydoc !!\n\n\n\ndeselect_all_tab()\n\nDeactivate all menu tabs.\n\n!! processed by numpydoc !!\n\n\n\nselect_only_one(widget: str)\n\nSet the active state for a specific menu button and deactivate others.\n\nParameters\n\nwidget\n\npython:str\n\nID of the menu button to set as active.\n\n!! processed by numpydoc !!\n\n\n\nselect_only_one_tab(widget: str)\n\nSet the active tab state for a specific menu button and deactivate others.\n\nParameters\n\nwidget\n\npython:str\n\nID of the menu button to set as active tab.\n\n!! processed by numpydoc !!\n\n\n\nsetup_ui()\n\nSet up the user interface for the left menu.\n\n!! processed by numpydoc !!\n\n\n\ntoggle_animation()\n\nToggle animation for hiding/showing the left menu.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.add_menus",
        "title": "PyLeftMenu > PyLeftMenu > add_menus",
        "section": "PyLeftMenu > add_menus",
        "text": "add_menus(parameters)\n\nAdd menus to the left menu.\n\nParameters\n\nparameters: list\n\nList of dictionaries containing parameters for each menu item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.btn_clicked",
        "title": "PyLeftMenu > PyLeftMenu > btn_clicked",
        "section": "PyLeftMenu > btn_clicked",
        "text": "btn_clicked()\n\nEmit signal when a menu button is clicked.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.btn_released",
        "title": "PyLeftMenu > PyLeftMenu > btn_released",
        "section": "PyLeftMenu > btn_released",
        "text": "btn_released()\n\nEmit signal when a menu button is released.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.deselect_all",
        "title": "PyLeftMenu > PyLeftMenu > deselect_all",
        "section": "PyLeftMenu > deselect_all",
        "text": "deselect_all()\n\nDeactivate all menu buttons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.deselect_all_tab",
        "title": "PyLeftMenu > PyLeftMenu > deselect_all_tab",
        "section": "PyLeftMenu > deselect_all_tab",
        "text": "deselect_all_tab()\n\nDeactivate all menu tabs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.select_only_one",
        "title": "PyLeftMenu > PyLeftMenu > select_only_one",
        "section": "PyLeftMenu > select_only_one",
        "text": "select_only_one(widget: str)\n\nSet the active state for a specific menu button and deactivate others.\n\nParameters\n\nwidget\n\npython:str\n\nID of the menu button to set as active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.select_only_one_tab",
        "title": "PyLeftMenu > PyLeftMenu > select_only_one_tab",
        "section": "PyLeftMenu > select_only_one_tab",
        "text": "select_only_one_tab(widget: str)\n\nSet the active tab state for a specific menu button and deactivate others.\n\nParameters\n\nwidget\n\npython:str\n\nID of the menu button to set as active tab.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.setup_ui",
        "title": "PyLeftMenu > PyLeftMenu > setup_ui",
        "section": "PyLeftMenu > setup_ui",
        "text": "setup_ui()\n\nSet up the user interface for the left menu.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_menu",
        "href": "toolkit/ui_reference/widgets/left_menu.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu.toggle_animation",
        "title": "PyLeftMenu > PyLeftMenu > toggle_animation",
        "section": "PyLeftMenu > toggle_animation",
        "text": "toggle_animation()\n\nToggle animation for hiding/showing the left menu.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.html#themehandler",
        "title": "ThemeHandler",
        "section": "ThemeHandler",
        "text": "A class for managing themes in a PySide6 desktop application.\nThis class handles the loading, exporting, and management of themes used in the application.\nThemeHandler.export_theme()\nExport the current theme to the theme file.\nThemeHandler.read_theme()\nRead and load theme settings from the theme file.\nThemeHandler\nThemeHandler.export_theme\nThemeHandler.read_theme"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.html#ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler",
        "title": "ThemeHandler > ThemeHandler > ThemeHandler",
        "section": "ThemeHandler > ThemeHandler",
        "text": "class ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler\n\nA class for managing themes in a PySide6 desktop application.\n\nThis class handles the loading, exporting, and management of themes used in the application.\n\nExamples\n\n>>> theme_handler = ThemeHandler()\n>>> theme_handler.export_theme()\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nThemeHandler.export_theme()\n\nExport the current theme to the theme file.\n\nThemeHandler.read_theme()\n\nRead and load theme settings from the theme file.\n\n"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_properties.html#get_properties",
        "title": "get_properties",
        "section": "get_properties",
        "text": "Get the toolkit properties.\nDictionary containing the toolkit properties.\nget_properties\npython:dict"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_properties.html#ansys.aedt.toolkits.common.backend.api.Common.get_properties",
        "title": "get_properties > get_properties > get_properties",
        "section": "get_properties > get_properties",
        "text": "Common.get_properties() -> Dict[str, str]\n\nGet the toolkit properties.\n\nReturns\n\npython:dict\n\nDictionary containing the toolkit properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_properties()\n{\"property1\": value1, \"property2\": value2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_column",
        "href": "toolkit/ui_reference/widgets/left_column.html#pyleftcolumn",
        "title": "PyLeftColumn",
        "section": "PyLeftColumn",
        "text": "Custom widget representing a left column with a title, an icon, and a close button.\nThe title text for the left column.\nThe font size of the title text.\nThe color of the title text.\nColor representing a dark shade.\nBackground color of the left column.\nColor of the close button.\nColor of the close button when hovered.\nColor of the close button when pressed.\nPath to the icon image file.\nColor of the icon.\nColor of the icon when hovered.\nColor of the icon when pressed.\nColor representing a context or active state.\nPath to the close icon image file.\nBorder radius of the left column.\nEmit signal when the close button is clicked.\nEmit signal when the close button is released.\nSet up the user interface for the left column.\nPyLeftColumn\npython:str\npython:int\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:int"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_column",
        "href": "toolkit/ui_reference/widgets/left_column.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_column.PyLeftColumn",
        "title": "PyLeftColumn > PyLeftColumn > PyLeftColumn",
        "section": "PyLeftColumn > PyLeftColumn",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_column.PyLeftColumn(text_title='Title', text_title_size=10, text_title_color='#343b48', dark_one='#1b1e23', bg_color='#343b48', btn_color='#c3ccdf', btn_color_hover='#3c4454', btn_color_pressed='#2c313c', icon_path='no_icon.svg', icon_color='#343b48', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', context_color='#dce1ec', icon_close_path='no_icon.svg', radius=8)\n\nCustom widget representing a left column with a title, an icon, and a close button.\n\nParameters\n\ntext_title\n\npython:str\n\nThe title text for the left column.\n\ntext_title_size\n\npython:int\n\nThe font size of the title text.\n\ntext_title_color\n\npython:str\n\nThe color of the title text.\n\ndark_one\n\npython:str\n\nColor representing a dark shade.\n\nbg_color\n\npython:str\n\nBackground color of the left column.\n\nbtn_color\n\npython:str\n\nColor of the close button.\n\nbtn_color_hover\n\npython:str\n\nColor of the close button when hovered.\n\nbtn_color_pressed\n\npython:str\n\nColor of the close button when pressed.\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str\n\nColor of the icon.\n\nicon_color_hover\n\npython:str\n\nColor of the icon when hovered.\n\nicon_color_pressed\n\npython:str\n\nColor of the icon when pressed.\n\ncontext_color\n\npython:str\n\nColor representing a context or active state.\n\nicon_close_path\n\npython:str\n\nPath to the close icon image file.\n\nradius\n\npython:int\n\nBorder radius of the left column.\n\n!! processed by numpydoc !!\n\n\n\nbtn_clicked()\n\nEmit signal when the close button is clicked.\n\n!! processed by numpydoc !!\n\n\n\nbtn_released()\n\nEmit signal when the close button is released.\n\n!! processed by numpydoc !!\n\n\n\nsetup_ui()\n\nSet up the user interface for the left column.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_column",
        "href": "toolkit/ui_reference/widgets/left_column.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_column.PyLeftColumn.btn_clicked",
        "title": "PyLeftColumn > PyLeftColumn > btn_clicked",
        "section": "PyLeftColumn > btn_clicked",
        "text": "btn_clicked()\n\nEmit signal when the close button is clicked.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_column",
        "href": "toolkit/ui_reference/widgets/left_column.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_column.PyLeftColumn.btn_released",
        "title": "PyLeftColumn > PyLeftColumn > btn_released",
        "section": "PyLeftColumn > btn_released",
        "text": "btn_released()\n\nEmit signal when the close button is released.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_column",
        "href": "toolkit/ui_reference/widgets/left_column.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_column.PyLeftColumn.setup_ui",
        "title": "PyLeftColumn > PyLeftColumn > setup_ui",
        "section": "PyLeftColumn > setup_ui",
        "text": "setup_ui()\n\nSet up the user interface for the left column.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui",
        "href": "toolkit/ui.html#ui-api-reference",
        "title": "UI API reference",
        "section": "UI API reference",
        "text": "The PyADT Common Toolkit is designed to streamline the process of creating standard AEDT applications\nusing Pyside6.\nThe UI API provides a set of pre-built components, utilities, and an API that simplifies\nthe development of robust and user-friendly applications.\nThe UI API contains three main modules: Utils, Windows, and Generic actions:\nCommon user interface classes to define widgets and load templates.\nDefault Windows initialization.\nGeneric methods to call the REST API.\nThis image shows the structure of the UI:\nThe UI is contained inside the main window. The main window contains some common widgets,\nsuch as the credits and title, that are initialized by default. You use the content widget\nto add new pages.\nFor initialization information, see the UI example.\nUI API reference\nUtils\nWindows\nGeneric actions"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#aedt-connect-session-example",
        "title": "AEDT connect session example",
        "section": "AEDT connect session example",
        "text": "This example shows how to use the Common AEDT API to connect to an existing AEDT session, create a HFSS design and create a waveguide.\nAEDT connect session example"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#perform-required-imports",
        "title": "AEDT connect session example > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#initialize-toolkit",
        "title": "AEDT connect session example > Initialize toolkit",
        "section": "Initialize toolkit",
        "text": "Initialize the toolkit.\nInitialize toolkit"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#get-toolkit-properties",
        "title": "AEDT connect session example > Get toolkit properties",
        "section": "Get toolkit properties",
        "text": "Get the toolkit properties, which contain the project information.\nGet toolkit properties"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#get-aedt-sessions",
        "title": "AEDT connect session example > Get AEDT sessions",
        "section": "Get AEDT sessions",
        "text": "Get AEDT sessions and select the first one.\nGet AEDT sessions"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#set-properties",
        "title": "AEDT connect session example > Set properties",
        "section": "Set properties",
        "text": "Specify the AEDT session selection.\nSet properties"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#initialize-aedt",
        "title": "AEDT connect session example > Initialize AEDT",
        "section": "Initialize AEDT",
        "text": "Launch a new AEDT session in a thread.\nInitialize AEDT"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#wait-for-the-toolkit-thread-to-be-idle",
        "title": "AEDT connect session example > Wait for the toolkit thread to be idle",
        "section": "Wait for the toolkit thread to be idle",
        "text": "Wait for the toolkit thread to be idle and ready to accept a new task.\nWait for the toolkit thread to be idle"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#connect-design",
        "title": "AEDT connect session example > Connect design",
        "section": "Connect design",
        "text": "Connect or create a new design.\nConnect design"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#get-toolkit-properties",
        "title": "AEDT connect session example > Get toolkit properties",
        "section": "Get toolkit properties",
        "text": "Get the toolkit properties, which contain the project information.\nGet toolkit properties"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#create-a-waveguide",
        "title": "AEDT connect session example > Create a waveguide",
        "section": "Create a waveguide",
        "text": "Create a waveguide in the design.\nCreate a waveguide"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_connect_session",
        "href": "examples/aedt_common/api_aedt_connect_session.html#save-and-release-aedt",
        "title": "AEDT connect session example > Save and release AEDT",
        "section": "Save and release AEDT",
        "text": "Save and release AEDT.\nSave and release AEDT"
    },
    {
        "objectID": "toolkit/api",
        "href": "toolkit/api.html#backend-api-reference",
        "title": "Backend API reference",
        "section": "Backend API reference",
        "text": "The backend API contains three classes, AEDTCommon`, EDBCommon, and Common,\nwhich provide methods for controlling the toolkit workflow:\nAEDTCommon: Provides methods for controlling AEDT. This class inherits the Common class.\nEDBCommon: Provides methods for controlling EDB. This class inherits the Common class.\nCommon: Provides methods for controlling the toolkit flow.\nIn the following descriptions, you can click the class name to view detailed API information.\nAEDTCommon([backend_properties])\nProvides common functions for controlling AEDT.\nEDBCommon([backend_properties])\nProvides the generic API for controlling EDB.\nCommon([backend_properties])\nProvides the API for controlling the toolkits.\nThis code shows how to use the AEDTCommon class:\nBackend API reference\nEDBCommon\nCommon\nAEDTCommon\nCommon\nEDBCommon\nCommon\nCommon\nAEDTCommon\nEDBCommon\nCommon\nAEDTCommon"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#pyleftbutton",
        "title": "PyLeftButton",
        "section": "PyLeftButton",
        "text": "Left button widget designed to function as a left-aligned button with various style and interaction options.\nButton identifier.\nButton width.\nButton height.\nButton corner radius.\nButton background color.\nButton background color when hovered.\nButton background color when pressed.\nIcon color.\nIcon color when hovered.\nIcon color when pressed.\nActive icon color.\nPath to icon file.\nDark color for theming.\nContext color for theming.\nText foreground color.\nWhether the button is active.\nChange the button style based on the event type.\nEvent triggering the style change.\nHandle the enter event.\nEnter event.\nPaint the icon on the button.\nQPainter object.\nPath to the icon image.\nRectangle to paint the icon within.\nCheck if the button is active.\nTrue if the button is active, False otherwise.\nHandle the leave event.\nLeave event.\nHandle the mouse press event.\nMouse press event.\nHandle the mouse release event.\nMouse release event.\nPaint the button.\nPaint event.\nSet the active state of the button.\nWhether the button is active.\nSet the icon for the button.\nPath to the icon image file.\nPyLeftButton\npython:str\noptional\npython:int\noptional\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\noptional\nQEvent\nQEvent\nQPainter\npython:str\nQRect\nQEvent\nQEvent\nQEvent\nQEvent\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton",
        "title": "PyLeftButton > PyLeftButton > PyLeftButton",
        "section": "PyLeftButton > PyLeftButton",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton(btn_id=None, width=30, height=30, radius=8, bg_color='#343b48', bg_color_hover='#3c4454', bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', icon_path='no_icon.svg', dark_one='#1b1e23', context_color='#568af2', text_foreground='#8a95aa', is_active=False)\n\nLeft button widget designed to function as a left-aligned button with various style and interaction options.\n\nParameters\n\nbtn_id\n\npython:str, optional\n\nButton identifier.\n\nwidth\n\npython:int, optional\n\nButton width.\n\nheight\n\npython:int, optional\n\nButton height.\n\nradius\n\npython:int, optional\n\nButton corner radius.\n\nbg_color\n\npython:str, optional\n\nButton background color.\n\nbg_color_hover\n\npython:str, optional\n\nButton background color when hovered.\n\nbg_color_pressed\n\npython:str, optional\n\nButton background color when pressed.\n\nicon_color\n\npython:str, optional\n\nIcon color.\n\nicon_color_hover\n\npython:str, optional\n\nIcon color when hovered.\n\nicon_color_pressed\n\npython:str, optional\n\nIcon color when pressed.\n\nicon_color_active\n\npython:str, optional\n\nActive icon color.\n\nicon_path\n\npython:str, optional\n\nPath to icon file.\n\ndark_one\n\npython:str, optional\n\nDark color for theming.\n\ncontext_color\n\npython:str, optional\n\nContext color for theming.\n\ntext_foreground\n\npython:str, optional\n\nText foreground color.\n\nis_active\n\nbool, optional\n\nWhether the button is active.\n\n!! processed by numpydoc !!\n\n\n\nchange_style(event)\n\nChange the button style based on the event type.\n\nParameters\n\nevent\n\nQEvent\n\nEvent triggering the style change.\n\n!! processed by numpydoc !!\n\n\n\nenterEvent(event)\n\nHandle the enter event.\n\nParameters\n\nevent\n\nQEvent\n\nEnter event.\n\n!! processed by numpydoc !!\n\n\n\nicon_paint(qp, image, rect)\n\nPaint the icon on the button.\n\nParameters\n\nqp\n\nQPainter\n\nQPainter object.\n\nimage\n\npython:str\n\nPath to the icon image.\n\nrect\n\nQRect\n\nRectangle to paint the icon within.\n\n!! processed by numpydoc !!\n\n\n\nis_active()\n\nCheck if the button is active.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\nleaveEvent(event)\n\nHandle the leave event.\n\nParameters\n\nevent\n\nQEvent\n\nLeave event.\n\n!! processed by numpydoc !!\n\n\n\nmousePressEvent(event)\n\nHandle the mouse press event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n!! processed by numpydoc !!\n\n\n\nmouseReleaseEvent(event)\n\nHandle the mouse release event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n!! processed by numpydoc !!\n\n\n\npaintEvent(event)\n\nPaint the button.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n!! processed by numpydoc !!\n\n\n\nset_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nWhether the button is active.\n\n!! processed by numpydoc !!\n\n\n\nset_icon(icon_path)\n\nSet the icon for the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.change_style",
        "title": "PyLeftButton > PyLeftButton > change_style",
        "section": "PyLeftButton > change_style",
        "text": "change_style(event)\n\nChange the button style based on the event type.\n\nParameters\n\nevent\n\nQEvent\n\nEvent triggering the style change.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.enterEvent",
        "title": "PyLeftButton > PyLeftButton > enterEvent",
        "section": "PyLeftButton > enterEvent",
        "text": "enterEvent(event)\n\nHandle the enter event.\n\nParameters\n\nevent\n\nQEvent\n\nEnter event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.icon_paint",
        "title": "PyLeftButton > PyLeftButton > icon_paint",
        "section": "PyLeftButton > icon_paint",
        "text": "icon_paint(qp, image, rect)\n\nPaint the icon on the button.\n\nParameters\n\nqp\n\nQPainter\n\nQPainter object.\n\nimage\n\npython:str\n\nPath to the icon image.\n\nrect\n\nQRect\n\nRectangle to paint the icon within.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.is_active",
        "title": "PyLeftButton > PyLeftButton > is_active",
        "section": "PyLeftButton > is_active",
        "text": "is_active()\n\nCheck if the button is active.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.leaveEvent",
        "title": "PyLeftButton > PyLeftButton > leaveEvent",
        "section": "PyLeftButton > leaveEvent",
        "text": "leaveEvent(event)\n\nHandle the leave event.\n\nParameters\n\nevent\n\nQEvent\n\nLeave event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.mousePressEvent",
        "title": "PyLeftButton > PyLeftButton > mousePressEvent",
        "section": "PyLeftButton > mousePressEvent",
        "text": "mousePressEvent(event)\n\nHandle the mouse press event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.mouseReleaseEvent",
        "title": "PyLeftButton > PyLeftButton > mouseReleaseEvent",
        "section": "PyLeftButton > mouseReleaseEvent",
        "text": "mouseReleaseEvent(event)\n\nHandle the mouse release event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.paintEvent",
        "title": "PyLeftButton > PyLeftButton > paintEvent",
        "section": "PyLeftButton > paintEvent",
        "text": "paintEvent(event)\n\nPaint the button.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.set_active",
        "title": "PyLeftButton > PyLeftButton > set_active",
        "section": "PyLeftButton > set_active",
        "text": "set_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nWhether the button is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/left_button",
        "href": "toolkit/ui_reference/widgets/left_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton.set_icon",
        "title": "PyLeftButton > PyLeftButton > set_icon",
        "section": "PyLeftButton > set_icon",
        "text": "set_icon(icon_path)\n\nSet the icon for the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.set_properties.html#set_properties",
        "title": "set_properties",
        "section": "set_properties",
        "text": "Assign the passed data to the internal data model.\nDictionary containing the properties to update.\nTuple indicating the success status and a message.\nset_properties\npython:dict\npython:tuple\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.set_properties.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.set_properties",
        "title": "set_properties > set_properties > set_properties",
        "section": "set_properties > set_properties",
        "text": "EDBCommon.set_properties(data: Dict[str, Any])\n\nAssign the passed data to the internal data model.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary containing the properties to update.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the success status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> value2 = 2\n>>> toolkit_api.set_properties({\"property1\": \"value1\", \"property2\": value2})\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_right_column_visible",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_right_column_visible.html#is_right_column_visible",
        "title": "is_right_column_visible",
        "section": "is_right_column_visible",
        "text": "Checks if the right column is visible.\nTrue if the right column is visible, False otherwise.\nis_right_column_visible\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_right_column_visible",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_right_column_visible.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_right_column_visible",
        "title": "is_right_column_visible > is_right_column_visible > is_right_column_visible",
        "section": "is_right_column_visible > is_right_column_visible",
        "text": "CommonWindowUtils.is_right_column_visible()\n\nChecks if the right column is visible.\n\nReturns\n\nbool\n\nTrue if the right column is visible, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.html#commonwindowutils",
        "title": "CommonWindowUtils",
        "section": "CommonWindowUtils",
        "text": "Class representing a common window with various UI functionalities.\nCommonWindowUtils.add_combobox(layout[, ...])\nAdds a label and combobox to a layout.\nCommonWindowUtils.add_icon_button(layout, icon)\nAdd icon button.\nCommonWindowUtils.add_n_buttons([layout, ...])\nAdd a specified number of buttons to a layout object.\nCommonWindowUtils.add_textbox(layout[, ...])\nAdds a label and textbox to a layout.\nCommonWindowUtils.add_toggle(layout[, ...])\nAdd a label and a toggle button to a specified layout.\nCommonWindowUtils.add_vertical_line(layout)\nAdd a vertical line.\nCommonWindowUtils.clear_layout(layout)\nClear all layout.\nCommonWindowUtils.create_animation(obj, ...)\nCreates an animation with specified parameters.\nCommonWindowUtils.get_left_menu(object_name)\nRetrieves the QPushButton object in the left menu of the CommonWindow UI.\nCommonWindowUtils.get_title_bar(object_name)\nGet title.\nCommonWindowUtils.is_left_column_visible()\nCheck if the left column is visible.\nCommonWindowUtils.is_progress_visible()\nChecks if the progress bar is visible.\nCommonWindowUtils.is_right_column_visible()\nChecks if the right column is visible.\nCommonWindowUtils.item_index(layout, item)\nItem index.\nCommonWindowUtils.remove_item(layout, index)\nRemove item by index.\nCommonWindowUtils.set_left_column_menu(menu, ...)\nConfigures the left column of the CommonWindow UI by setting the current widget as the provided menu,\nCommonWindowUtils.set_page(page)\nSet the current page in the load_pages widget.\nCommonWindowUtils.set_right_column_menu(title)\nSets the title of the right column menu.\nCommonWindowUtils.setup_animation(...)\nSets up an animation for the left and right columns of the UI.\nCommonWindowUtils.start_box_animation(direction)\nStarts a box animation in the specified direction.\nCommonWindowUtils.toggle_left_column()\nToggles the left column of the CommonWindow by starting a box animation.\nCommonWindowUtils.toggle_progress()\nToggles the progress row.\nCommonWindowUtils.toggle_right_column()\nToggles the display of the right column in a common window.\nCommonWindowUtils.update_logger(text)\nClear all layout.\nCommonWindowUtils.update_progress(progress_value)\nClear all layout.\nCommonWindowUtils.window_refresh()\nWindow refresh\nCommonWindowUtils\nCommonWindowUtils.add_combobox\nCommonWindowUtils.add_icon_button\nCommonWindowUtils.add_n_buttons\nCommonWindowUtils.add_textbox\nCommonWindowUtils.add_toggle\nCommonWindowUtils.add_vertical_line\nCommonWindowUtils.clear_layout\nCommonWindowUtils.create_animation\nCommonWindowUtils.get_left_menu\nCommonWindowUtils.get_title_bar\nCommonWindowUtils.is_left_column_visible\nCommonWindowUtils.is_progress_visible\nCommonWindowUtils.is_right_column_visible\nCommonWindowUtils.item_index\nCommonWindowUtils.remove_item\nCommonWindowUtils.set_left_column_menu\nCommonWindowUtils.set_page\nCommonWindowUtils.set_right_column_menu\nCommonWindowUtils.setup_animation\nCommonWindowUtils.start_box_animation\nCommonWindowUtils.toggle_left_column\nCommonWindowUtils.toggle_progress\nCommonWindowUtils.toggle_right_column\nCommonWindowUtils.update_logger\nCommonWindowUtils.update_progress\nCommonWindowUtils.window_refresh"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils",
        "title": "CommonWindowUtils > CommonWindowUtils > CommonWindowUtils",
        "section": "CommonWindowUtils > CommonWindowUtils",
        "text": "class ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils\n\nClass representing a common window with various UI functionalities.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCommonWindowUtils.add_combobox(layout[, ...])\n\nAdds a label and combobox to a layout.\n\nCommonWindowUtils.add_icon_button(layout, icon)\n\nAdd icon button.\n\nCommonWindowUtils.add_n_buttons([layout, ...])\n\nAdd a specified number of buttons to a layout object.\n\nCommonWindowUtils.add_textbox(layout[, ...])\n\nAdds a label and textbox to a layout.\n\nCommonWindowUtils.add_toggle(layout[, ...])\n\nAdd a label and a toggle button to a specified layout.\n\nCommonWindowUtils.add_vertical_line(layout)\n\nAdd a vertical line.\n\nCommonWindowUtils.clear_layout(layout)\n\nClear all layout.\n\nCommonWindowUtils.create_animation(obj, ...)\n\nCreates an animation with specified parameters.\n\nCommonWindowUtils.get_left_menu(object_name)\n\nRetrieves the QPushButton object in the left menu of the CommonWindow UI.\n\nCommonWindowUtils.get_title_bar(object_name)\n\nGet title.\n\nCommonWindowUtils.is_left_column_visible()\n\nCheck if the left column is visible.\n\nCommonWindowUtils.is_progress_visible()\n\nChecks if the progress bar is visible.\n\nCommonWindowUtils.is_right_column_visible()\n\nChecks if the right column is visible.\n\nCommonWindowUtils.item_index(layout, item)\n\nItem index.\n\nCommonWindowUtils.remove_item(layout, index)\n\nRemove item by index.\n\nCommonWindowUtils.set_left_column_menu(menu, ...)\n\nConfigures the left column of the CommonWindow UI by setting the current widget as the provided menu,\n\nCommonWindowUtils.set_page(page)\n\nSet the current page in the load_pages widget.\n\nCommonWindowUtils.set_right_column_menu(title)\n\nSets the title of the right column menu.\n\nCommonWindowUtils.setup_animation(...)\n\nSets up an animation for the left and right columns of the UI.\n\nCommonWindowUtils.start_box_animation(direction)\n\nStarts a box animation in the specified direction.\n\nCommonWindowUtils.toggle_left_column()\n\nToggles the left column of the CommonWindow by starting a box animation.\n\nCommonWindowUtils.toggle_progress()\n\nToggles the progress row.\n\nCommonWindowUtils.toggle_right_column()\n\nToggles the display of the right column in a common window.\n\nCommonWindowUtils.update_logger(text)\n\nClear all layout.\n\nCommonWindowUtils.update_progress(progress_value)\n\nClear all layout.\n\nCommonWindowUtils.window_refresh()\n\nWindow refresh\n\n"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_progress_visible",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_progress_visible.html#is_progress_visible",
        "title": "is_progress_visible",
        "section": "is_progress_visible",
        "text": "Checks if the progress bar is visible.\nTrue if the progress bar is visible, False otherwise.\nis_progress_visible\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_progress_visible",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_progress_visible.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_progress_visible",
        "title": "is_progress_visible > is_progress_visible > is_progress_visible",
        "section": "is_progress_visible > is_progress_visible",
        "text": "CommonWindowUtils.is_progress_visible()\n\nChecks if the progress bar is visible.\n\nReturns\n\nbool\n\nTrue if the progress bar is visible, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.open_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.open_project.html#open_project",
        "title": "open_project",
        "section": "open_project",
        "text": "Open an AEDT project.\nFull path to the project.\nTrue when successful, False when failed.\nopen_project\npython:str\noptional\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.open_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.open_project.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.open_project",
        "title": "open_project > open_project > open_project",
        "section": "open_project > open_project",
        "text": "AEDTCommon.open_project(project_name=None)\n\nOpen an AEDT project.\n\nParameters\n\nproject_name\n\npython:str, optional\n\nFull path to the project.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.open_project(\"path/to/file\")\n>>> toolkit_api.release_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.serialize_obj_base64.html#serialize_obj_base64",
        "title": "serialize_obj_base64",
        "section": "serialize_obj_base64",
        "text": "Encode a bytes-like object.\nPath to the file to serialize.\nEncoded data.\nserialize_obj_base64\npython:str\nbytes"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.serialize_obj_base64.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.serialize_obj_base64",
        "title": "serialize_obj_base64 > serialize_obj_base64 > serialize_obj_base64",
        "section": "serialize_obj_base64 > serialize_obj_base64",
        "text": "static AEDTCommon.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the file to serialize.\n\nReturns\n\nbytes\n\nEncoded data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.setup_animation",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.setup_animation.html#setup_animation",
        "title": "setup_animation",
        "section": "setup_animation",
        "text": "Sets up an animation for the left and right columns of the UI.\nThe starting value for the left box animation.\nThe starting value for the right box animation.\nThe ending value for the left box animation.\nThe ending value for the right box animation.\nsetup_animation"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.setup_animation",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.setup_animation.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.setup_animation",
        "title": "setup_animation > setup_animation > setup_animation",
        "section": "setup_animation > setup_animation",
        "text": "CommonWindowUtils.setup_animation(left_start, right_start, left_end, right_end)\n\nSets up an animation for the left and right columns of the UI.\n\nParameters\n\nleft_start: int\n\nThe starting value for the left box animation.\n\nright_start: int\n\nThe starting value for the right box animation.\n\nleft_end: int\n\nThe ending value for the left box animation.\n\nright_end: int\n\nThe ending value for the right box animation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#aedt-open-project-example",
        "title": "AEDT open project example",
        "section": "AEDT open project example",
        "text": "This example shows how to use the AEDTCommon class to launch a new AEDT session in a thread and open an existing AEDT project.\nAEDT open project example\nAEDTCommon"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#perform-required-imports",
        "title": "AEDT open project example > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#initialize-temporary-folder-and-project-settings",
        "title": "AEDT open project example > Initialize temporary folder and project settings",
        "section": "Initialize temporary folder and project settings",
        "text": "Initialize a temporary folder to copy the input file into and specify project settings.\nInitialize temporary folder and project settings"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#initialize-toolkit",
        "title": "AEDT open project example > Initialize toolkit",
        "section": "Initialize toolkit",
        "text": "Initialize the toolkit.\nInitialize toolkit"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#initialize-aedt",
        "title": "AEDT open project example > Initialize AEDT",
        "section": "Initialize AEDT",
        "text": "Launch a new AEDT session in a thread.\nInitialize AEDT"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#wait-for-the-toolkit-thread-to-be-idle",
        "title": "AEDT open project example > Wait for the toolkit thread to be idle",
        "section": "Wait for the toolkit thread to be idle",
        "text": "Wait for the toolkit thread to be idle and ready to accept a new task.\nWait for the toolkit thread to be idle"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#open-project",
        "title": "AEDT open project example > Open project",
        "section": "Open project",
        "text": "Open the project.\nOpen project"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#get-toolkit-properties",
        "title": "AEDT open project example > Get toolkit properties",
        "section": "Get toolkit properties",
        "text": "Get the toolkit properties, which contain the project information.\nGet toolkit properties"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#connect-design",
        "title": "AEDT open project example > Connect design",
        "section": "Connect design",
        "text": "Connect or create a new design.\nConnect design"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#create-a-box",
        "title": "AEDT open project example > Create a box",
        "section": "Create a box",
        "text": "Create a box in the design.\nCreate a box"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#save-and-release-aedt",
        "title": "AEDT open project example > Save and release AEDT",
        "section": "Save and release AEDT",
        "text": "Save and release AEDT.\nSave and release AEDT"
    },
    {
        "objectID": "examples/aedt_common/api_aedt_open_project",
        "href": "examples/aedt_common/api_aedt_open_project.html#remove-temporary-folder",
        "title": "AEDT open project example > Remove temporary folder",
        "section": "Remove temporary folder",
        "text": "Remove the temporary folder.\nRemove temporary folder"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_aedt.html#connect_aedt",
        "title": "connect_aedt",
        "section": "connect_aedt",
        "text": "Connect to an existing AEDT session.\nTrue when successful, False when failed.\nconnect_aedt\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_aedt.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_aedt",
        "title": "connect_aedt > connect_aedt > connect_aedt",
        "section": "connect_aedt > connect_aedt",
        "text": "AEDTCommon.connect_aedt() -> bool\n\nConnect to an existing AEDT session.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.release_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.icon_path",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.icon_path.html#icon_path",
        "title": "icon_path",
        "section": "icon_path",
        "text": "Get the full path for the specified icon.\nThe name of the icon file.\nThe full path to the specified icon.\nicon_path\npython:str\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.icon_path",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.icon_path.html#ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.icon_path",
        "title": "icon_path > icon_path > icon_path",
        "section": "icon_path > icon_path",
        "text": "LoadImages.icon_path(icon_name)\n\nGet the full path for the specified icon.\n\nParameters\n\nicon_name\n\npython:str\n\nThe name of the icon file.\n\nReturns\n\npython:str\n\nThe full path to the specified icon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/push_button",
        "href": "toolkit/ui_reference/widgets/push_button.html#pypushbutton",
        "title": "PyPushButton",
        "section": "PyPushButton",
        "text": "Initialize the PyPushButton.\nThe title text for the right column.\nThe border radius of the button.\nThe text color of the button.\nThe background color of the button.\nThe background color of the button when hovered.\nThe background color of the button when pressed.\nThe font size of the text on the button.\nThe parent widget. The default is None.\nPyPushButton\npython:str\npython:int\npython:str\npython:str\npython:int\npython:str\npython:int\npython:str\noptional"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/push_button",
        "href": "toolkit/ui_reference/widgets/push_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_push_button.py_push_button.PyPushButton",
        "title": "PyPushButton > PyPushButton > PyPushButton",
        "section": "PyPushButton > PyPushButton",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_push_button.py_push_button.PyPushButton(text, radius, color, bg_color, bg_color_hover, bg_color_pressed, font_size, parent=None)\n\nInitialize the PyPushButton.\n\nParameters\n\ntext\n\npython:str\n\nThe title text for the right column.\n\nradius\n\npython:int\n\nThe border radius of the button.\n\ncolor\n\npython:str\n\nThe text color of the button.\n\nbg_color\n\npython:str\n\nThe background color of the button.\n\nbg_color_hover\n\npython:int\n\nThe background color of the button when hovered.\n\nbg_color_pressed\n\npython:str\n\nThe background color of the button when pressed.\n\nfont_size\n\npython:int\n\nThe font size of the text on the button.\n\nparent\n\npython:str, optional\n\nThe parent widget. The default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.is_aedt_connected",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.is_aedt_connected.html#is_aedt_connected",
        "title": "is_aedt_connected",
        "section": "is_aedt_connected",
        "text": "Check if AEDT is connected.\nTuple indicating the connection status and a message.\nis_aedt_connected\npython:tuple\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.is_aedt_connected",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.is_aedt_connected.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.is_aedt_connected",
        "title": "is_aedt_connected > is_aedt_connected > is_aedt_connected",
        "section": "is_aedt_connected > is_aedt_connected",
        "text": "AEDTCommon.is_aedt_connected() -> Tuple[bool, str]\n\nCheck if AEDT is connected.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the connection status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.is_aedt_connected()\n(True, \"toolkit connected to process <process_id> on Grpc <grpc_port>\")\n>>> toolkit_api.release_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_toggle",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_toggle.html#add_toggle",
        "title": "add_toggle",
        "section": "add_toggle",
        "text": "Add a label and a toggle button to a specified layout.\nLayout object to add the label and toggle button to.\nHeight of the label and toggle. Default is 40.\nWidth of the label and toggle. Default is [50, 100, 50] if None.\nLabel text. Default is [‘label1’, ‘label2’] if None.\nFont size for the label text. Default is 12.\nA tuple containing the layout row, label object, toggle object, and second label object\nadd_toggle\npython:tuple"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_toggle",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_toggle.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_toggle",
        "title": "add_toggle > add_toggle > add_toggle",
        "section": "add_toggle > add_toggle",
        "text": "CommonWindowUtils.add_toggle(layout, height=40, width=None, label=None, font_size=12)\n\nAdd a label and a toggle button to a specified layout.\n\nParameters\n\nlayout: QLayout\n\nLayout object to add the label and toggle button to.\n\nheight: int, optional\n\nHeight of the label and toggle. Default is 40.\n\nwidth: list, optional\n\nWidth of the label and toggle. Default is [50, 100, 50] if None.\n\nlabel: list of str, optional\n\nLabel text. Default is [‘label1’, ‘label2’] if None.\n\nfont_size: int, optional\n\nFont size for the label text. Default is 12.\n\nReturns\n\npython:tuple\n\nA tuple containing the layout row, label object, toggle object, and second label object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.serialize_obj_base64.html#serialize_obj_base64",
        "title": "serialize_obj_base64",
        "section": "serialize_obj_base64",
        "text": "Encode a bytes-like object.\nPath to the file to serialize.\nEncoded data.\nserialize_obj_base64\npython:str\nbytes"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.serialize_obj_base64.html#ansys.aedt.toolkits.common.backend.api.Common.serialize_obj_base64",
        "title": "serialize_obj_base64 > serialize_obj_base64 > serialize_obj_base64",
        "section": "serialize_obj_base64 > serialize_obj_base64",
        "text": "static Common.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the file to serialize.\n\nReturns\n\nbytes\n\nEncoded data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.html#edbcommon",
        "title": "EDBCommon",
        "section": "EDBCommon",
        "text": "Provides the generic API for controlling EDB.\nThis class provides basic functions to control EDB and properties to share between the\nbackend and UI.\nUpdated properties.\nEDBCommon.aedt_sessions()\nGet information for the active AEDT sessions.\nEDBCommon.close_edb()\nClose the EDB project.\nEDBCommon.get_properties()\nGet the toolkit properties.\nEDBCommon.get_thread_status()\nGet the toolkit thread status.\nEDBCommon.installed_aedt_version()\nGet the installed AEDT versions.\nEDBCommon.launch_thread(process)\nLaunch the thread.\nEDBCommon.load_edb([edb_path])\nLoad the EDB project.\nEDBCommon.save_edb([edb_path])\nSave the EDB project.\nEDBCommon.serialize_obj_base64(file_path)\nEncode a bytes-like object.\nEDBCommon.set_properties(data)\nAssign the passed data to the internal data model.\nEDBCommon.wait_to_be_idle([timeout])\nWait for the thread to be idle and ready to accept a new task.\nEDBCommon\nbackend.models.Properties\nEDBCommon.aedt_sessions\nEDBCommon.close_edb\nEDBCommon.get_properties\nEDBCommon.get_thread_status\nEDBCommon.installed_aedt_version\nEDBCommon.launch_thread\nEDBCommon.load_edb\nEDBCommon.save_edb\nEDBCommon.serialize_obj_base64\nEDBCommon.set_properties\nEDBCommon.wait_to_be_idle"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.html#ansys.aedt.toolkits.common.backend.api.EDBCommon",
        "title": "EDBCommon > EDBCommon > EDBCommon",
        "section": "EDBCommon > EDBCommon",
        "text": "class ansys.aedt.toolkits.common.backend.api.EDBCommon(backend_properties=None)\n\nProvides the generic API for controlling EDB.\n\nThis class provides basic functions to control EDB and properties to share between the\nbackend and UI.\n\nParameters\n\nbackend_properties\n\nbackend.models.Properties\n\nUpdated properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBCommon.aedt_sessions()\n\nGet information for the active AEDT sessions.\n\nEDBCommon.close_edb()\n\nClose the EDB project.\n\nEDBCommon.get_properties()\n\nGet the toolkit properties.\n\nEDBCommon.get_thread_status()\n\nGet the toolkit thread status.\n\nEDBCommon.installed_aedt_version()\n\nGet the installed AEDT versions.\n\nEDBCommon.launch_thread(process)\n\nLaunch the thread.\n\nEDBCommon.load_edb([edb_path])\n\nLoad the EDB project.\n\nEDBCommon.save_edb([edb_path])\n\nSave the EDB project.\n\nEDBCommon.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nEDBCommon.set_properties(data)\n\nAssign the passed data to the internal data model.\n\nEDBCommon.wait_to_be_idle([timeout])\n\nWait for the thread to be idle and ready to accept a new task.\n\n"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/slider",
        "href": "toolkit/ui_reference/widgets/slider.html#pyslider",
        "title": "PySlider",
        "section": "PySlider",
        "text": "Custom slider widget with customizable styles.\nThe margin of the slider, by default 0.\nThe background size, by default 20.\nThe background border radius, by default 10.\nThe background color, by default “#1b1e23”.\nThe background color on hover, by default “#1e2229”.\nThe margin of the slider handle, by default 2.\nThe size of the slider handle, by default 16.\nThe border radius of the slider handle, by default 8.\nThe color of the slider handle, by default “#568af2”.\nThe color of the slider handle on hover, by default “#6c99f4”.\nThe color of the slider handle when pressed, by default “#3f6fd1”.\nPySlider\npython:int\noptional\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/slider",
        "href": "toolkit/ui_reference/widgets/slider.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_slider.py_slider.PySlider",
        "title": "PySlider > PySlider > PySlider",
        "section": "PySlider > PySlider",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_slider.py_slider.PySlider(margin=0, bg_size=20, bg_radius=10, bg_color='#1b1e23', bg_color_hover='#1e2229', handle_margin=2, handle_size=16, handle_radius=8, handle_color='#568af2', handle_color_hover='#6c99f4', handle_color_pressed='#3f6fd1')\n\nCustom slider widget with customizable styles.\n\nParameters\n\nmargin\n\npython:int, optional\n\nThe margin of the slider, by default 0.\n\nbg_size\n\npython:int, optional\n\nThe background size, by default 20.\n\nbg_radius\n\npython:int, optional\n\nThe background border radius, by default 10.\n\nbg_color\n\npython:str, optional\n\nThe background color, by default “#1b1e23”.\n\nbg_color_hover\n\npython:str, optional\n\nThe background color on hover, by default “#1e2229”.\n\nhandle_margin\n\npython:int, optional\n\nThe margin of the slider handle, by default 2.\n\nhandle_size\n\npython:int, optional\n\nThe size of the slider handle, by default 16.\n\nhandle_radius\n\npython:int, optional\n\nThe border radius of the slider handle, by default 8.\n\nhandle_color\n\npython:str, optional\n\nThe color of the slider handle, by default “#568af2”.\n\nhandle_color_hover\n\npython:str, optional\n\nThe color of the slider handle on hover, by default “#6c99f4”.\n\nhandle_color_pressed\n\npython:str, optional\n\nThe color of the slider handle when pressed, by default “#3f6fd1”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#pytitlebar",
        "title": "PyTitleBar",
        "section": "PyTitleBar",
        "text": "Custom title bar for the application window.\nThe parent widget.\nThe main application window.\nThe path to the logo image file, by default “ansys-primary-logo-white.svg”.\nThe width of the logo, by default 10.\nThe color for the dark theme, by default “#1b1e23”.\nThe background color, by default “#343b48”.\nThe color for dividers, by default “#3c4454”.\nThe background color for buttons, by default “#343b48”.\nThe background color for buttons on hover, by default “#3c4454”.\nThe background color for buttons on pressed state, by default “#2c313c”.\nThe default icon color, by default “#c3ccdf”.\nThe icon color on hover, by default “#dce1ec”.\nThe icon color on pressed state, by default “#edf0f5”.\nThe icon color for the active state, by default “#f5f6f9”.\nThe context color, by default “#6c99f4”.\nThe text color, by default “#8a95aa”.\nThe border radius, by default 8.\nThe font family, by default “Segoe UI”.\nThe font size for the title, by default 10.\nAdd custom menus to the title bar.\nList of dictionaries, each containing information about a menu button.\nEach dictionary should have the following keys:\n- btn_icon: str, the icon file for the button.\n- btn_id: str, the ID of the button.\n- btn_tooltip: str, the tooltip text for the button.\n- is_active: bool, whether the button is initially active or not.\nHandle the button click event.\nHandle the button release event.\nMaximize or restore the application window.\nSet the title of the application.\nThe title to be set.\nSet up the user interface for the title bar.\nPyTitleBar\nQWidget\nQWidget\npython:str\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:str\noptional\npython:int\noptional\npython:list\nof\npython:dict\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar",
        "title": "PyTitleBar > PyTitleBar > PyTitleBar",
        "section": "PyTitleBar > PyTitleBar",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar(parent, app_parent, logo_image='ansys-primary-logo-white.svg', logo_width=10, dark_one='#1b1e23', bg_color='#343b48', div_color='#3c4454', btn_bg_color='#343b48', btn_bg_color_hover='#3c4454', btn_bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', context_color='#6c99f4', text_foreground='#8a95aa', radius=8, font_family='Segoe UI', title_size=10)\n\nCustom title bar for the application window.\n\nParameters\n\nparent\n\nQWidget\n\nThe parent widget.\n\napp_parent\n\nQWidget\n\nThe main application window.\n\nlogo_image\n\npython:str, optional\n\nThe path to the logo image file, by default “ansys-primary-logo-white.svg”.\n\nlogo_width\n\npython:int, optional\n\nThe width of the logo, by default 10.\n\ndark_one\n\npython:str, optional\n\nThe color for the dark theme, by default “#1b1e23”.\n\nbg_color\n\npython:str, optional\n\nThe background color, by default “#343b48”.\n\ndiv_color\n\npython:str, optional\n\nThe color for dividers, by default “#3c4454”.\n\nbtn_bg_color\n\npython:str, optional\n\nThe background color for buttons, by default “#343b48”.\n\nbtn_bg_color_hover\n\npython:str, optional\n\nThe background color for buttons on hover, by default “#3c4454”.\n\nbtn_bg_color_pressed\n\npython:str, optional\n\nThe background color for buttons on pressed state, by default “#2c313c”.\n\nicon_color\n\npython:str, optional\n\nThe default icon color, by default “#c3ccdf”.\n\nicon_color_hover\n\npython:str, optional\n\nThe icon color on hover, by default “#dce1ec”.\n\nicon_color_pressed\n\npython:str, optional\n\nThe icon color on pressed state, by default “#edf0f5”.\n\nicon_color_active\n\npython:str, optional\n\nThe icon color for the active state, by default “#f5f6f9”.\n\ncontext_color\n\npython:str, optional\n\nThe context color, by default “#6c99f4”.\n\ntext_foreground\n\npython:str, optional\n\nThe text color, by default “#8a95aa”.\n\nradius\n\npython:int, optional\n\nThe border radius, by default 8.\n\nfont_family\n\npython:str, optional\n\nThe font family, by default “Segoe UI”.\n\ntitle_size\n\npython:int, optional\n\nThe font size for the title, by default 10.\n\n!! processed by numpydoc !!\n\n\n\nadd_menus(parameters)\n\nAdd custom menus to the title bar.\n\nParameters\n\nparameters\n\npython:list of python:dict\n\nList of dictionaries, each containing information about a menu button.\nEach dictionary should have the following keys:\n- btn_icon: str, the icon file for the button.\n- btn_id: str, the ID of the button.\n- btn_tooltip: str, the tooltip text for the button.\n- is_active: bool, whether the button is initially active or not.\n\n!! processed by numpydoc !!\n\n\n\nbtn_clicked()\n\nHandle the button click event.\n\n!! processed by numpydoc !!\n\n\n\nbtn_released()\n\nHandle the button release event.\n\n!! processed by numpydoc !!\n\n\n\nmaximize_restore()\n\nMaximize or restore the application window.\n\n!! processed by numpydoc !!\n\n\n\nset_title(title)\n\nSet the title of the application.\n\nParameters\n\ntitle\n\npython:str\n\nThe title to be set.\n\n!! processed by numpydoc !!\n\n\n\nsetup_ui()\n\nSet up the user interface for the title bar.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar.add_menus",
        "title": "PyTitleBar > PyTitleBar > add_menus",
        "section": "PyTitleBar > add_menus",
        "text": "add_menus(parameters)\n\nAdd custom menus to the title bar.\n\nParameters\n\nparameters\n\npython:list of python:dict\n\nList of dictionaries, each containing information about a menu button.\nEach dictionary should have the following keys:\n- btn_icon: str, the icon file for the button.\n- btn_id: str, the ID of the button.\n- btn_tooltip: str, the tooltip text for the button.\n- is_active: bool, whether the button is initially active or not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar.btn_clicked",
        "title": "PyTitleBar > PyTitleBar > btn_clicked",
        "section": "PyTitleBar > btn_clicked",
        "text": "btn_clicked()\n\nHandle the button click event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar.btn_released",
        "title": "PyTitleBar > PyTitleBar > btn_released",
        "section": "PyTitleBar > btn_released",
        "text": "btn_released()\n\nHandle the button release event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar.maximize_restore",
        "title": "PyTitleBar > PyTitleBar > maximize_restore",
        "section": "PyTitleBar > maximize_restore",
        "text": "maximize_restore()\n\nMaximize or restore the application window.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar.set_title",
        "title": "PyTitleBar > PyTitleBar > set_title",
        "section": "PyTitleBar > set_title",
        "text": "set_title(title)\n\nSet the title of the application.\n\nParameters\n\ntitle\n\npython:str\n\nThe title to be set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_bar",
        "href": "toolkit/ui_reference/widgets/title_bar.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar.setup_ui",
        "title": "PyTitleBar > PyTitleBar > setup_ui",
        "section": "PyTitleBar > setup_ui",
        "text": "setup_ui()\n\nSet up the user interface for the title bar.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.html#common",
        "title": "Common",
        "section": "Common",
        "text": "Provides the API for controlling the toolkits.\nThis class provides basic functions to control AEDT and EDB and the\nproperties to share between the backend and UI.\nUpdated properties.\nCommon.aedt_sessions()\nGet information for the active AEDT sessions.\nCommon.get_properties()\nGet the toolkit properties.\nCommon.get_thread_status()\nGet the toolkit thread status.\nCommon.installed_aedt_version()\nGet the installed AEDT versions.\nCommon.launch_thread(process)\nLaunch the thread.\nCommon.serialize_obj_base64(file_path)\nEncode a bytes-like object.\nCommon.set_properties(data)\nAssign the passed data to the internal data model.\nCommon.wait_to_be_idle([timeout])\nWait for the thread to be idle and ready to accept a new task.\nCommon\nbackend.models.Properties\nCommon.aedt_sessions\nCommon.get_properties\nCommon.get_thread_status\nCommon.installed_aedt_version\nCommon.launch_thread\nCommon.serialize_obj_base64\nCommon.set_properties\nCommon.wait_to_be_idle"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.html#ansys.aedt.toolkits.common.backend.api.Common",
        "title": "Common > Common > Common",
        "section": "Common > Common",
        "text": "class ansys.aedt.toolkits.common.backend.api.Common(backend_properties=None)\n\nProvides the API for controlling the toolkits.\n\nThis class provides basic functions to control AEDT and EDB and the\nproperties to share between the backend and UI.\n\nParameters\n\nbackend_properties\n\nbackend.models.Properties\n\nUpdated properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_properties = toolkit_api.get_properties()\n>>> new_properties = {\"aedt_version\": \"2024.2\"}\n>>> toolkit_api.set_properties(new_properties)\n>>> new_properties = toolkit_api.get_properties()\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCommon.aedt_sessions()\n\nGet information for the active AEDT sessions.\n\nCommon.get_properties()\n\nGet the toolkit properties.\n\nCommon.get_thread_status()\n\nGet the toolkit thread status.\n\nCommon.installed_aedt_version()\n\nGet the installed AEDT versions.\n\nCommon.launch_thread(process)\n\nLaunch the thread.\n\nCommon.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nCommon.set_properties(data)\n\nAssign the passed data to the internal data model.\n\nCommon.wait_to_be_idle([timeout])\n\nWait for the thread to be idle and ready to accept a new task.\n\n"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_properties.html#get_properties",
        "title": "get_properties",
        "section": "get_properties",
        "text": "Get the toolkit properties.\nDictionary containing the toolkit properties.\nget_properties\npython:dict"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_properties.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.get_properties",
        "title": "get_properties > get_properties > get_properties",
        "section": "get_properties > get_properties",
        "text": "EDBCommon.get_properties() -> Dict[str, str]\n\nGet the toolkit properties.\n\nReturns\n\npython:dict\n\nDictionary containing the toolkit properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_properties()\n{\"property1\": value1, \"property2\": value2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_thread_status.html#get_thread_status",
        "title": "get_thread_status",
        "section": "get_thread_status",
        "text": "Get the toolkit thread status.\nTrue when active, False when inactive.\nget_thread_status\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_thread_status.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.get_thread_status",
        "title": "get_thread_status > get_thread_status > get_thread_status",
        "section": "get_thread_status > get_thread_status",
        "text": "EDBCommon.get_thread_status() -> ToolkitThreadStatus\n\nGet the toolkit thread status.\n\nReturns\n\nbool\n\nTrue when active, False when inactive.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_thread_status()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.installed_aedt_version.html#installed_aedt_version",
        "title": "installed_aedt_version",
        "section": "installed_aedt_version",
        "text": "Get the installed AEDT versions.\nList of installed AEDT versions.\ninstalled_aedt_version\npython:list"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.installed_aedt_version.html#ansys.aedt.toolkits.common.backend.api.Common.installed_aedt_version",
        "title": "installed_aedt_version > installed_aedt_version > installed_aedt_version",
        "section": "installed_aedt_version > installed_aedt_version",
        "text": "static Common.installed_aedt_version() -> List\n\nGet the installed AEDT versions.\n\nReturns\n\npython:list\n\nList of installed AEDT versions.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.installed_aedt_version()\n[\"2023.2\", \"2024.1\", \"2024.2\"]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_right_column_menu",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_right_column_menu.html#set_right_column_menu",
        "title": "set_right_column_menu",
        "section": "set_right_column_menu",
        "text": "Sets the title of the right column menu.\nThe title to be set.\nset_right_column_menu"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_right_column_menu",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_right_column_menu.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_right_column_menu",
        "title": "set_right_column_menu > set_right_column_menu > set_right_column_menu",
        "section": "set_right_column_menu > set_right_column_menu",
        "text": "CommonWindowUtils.set_right_column_menu(title)\n\nSets the title of the right column menu.\n\nParameters\n\ntitle: str\n\nThe title to be set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.start_box_animation",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.start_box_animation.html#start_box_animation",
        "title": "start_box_animation",
        "section": "start_box_animation",
        "text": "Starts a box animation in the specified direction.\nThe direction in which the box animation should be performed.\nPossible values are “left” and “right”.\nstart_box_animation"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.start_box_animation",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.start_box_animation.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.start_box_animation",
        "title": "start_box_animation > start_box_animation > start_box_animation",
        "section": "start_box_animation > start_box_animation",
        "text": "CommonWindowUtils.start_box_animation(direction)\n\nStarts a box animation in the specified direction.\n\nParameters\n\ndirection: str\n\nThe direction in which the box animation should be performed.\nPossible values are “left” and “right”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.aedt_sessions.html#aedt_sessions",
        "title": "aedt_sessions",
        "section": "aedt_sessions",
        "text": "Get information for the active AEDT sessions.\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\naedt_sessions\npython:dict\n-1"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.aedt_sessions.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.aedt_sessions",
        "title": "aedt_sessions > aedt_sessions > aedt_sessions",
        "section": "aedt_sessions > aedt_sessions",
        "text": "AEDTCommon.aedt_sessions() -> Dict[int, int]\n\nGet information for the active AEDT sessions.\n\nReturns\n\npython:dict\n\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.aedt_sessions()\n{pid1: grpc_port1, pid2: grpc_port2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/right_column",
        "href": "toolkit/ui_reference/widgets/right_column.html#pycombobox",
        "title": "PyComboBox",
        "section": "PyComboBox",
        "text": "Custom widget representing a right column with a title, an icon, and a content area.\nThe title text for the right column.\nThe font size of the title text.\nThe color of the title text.\nColor representing a dark shade.\nBackground color of the right column.\nColor of the buttons in the right column.\nColor of the buttons when hovered.\nColor of the buttons when pressed.\nPath to the icon image file.\nColor of the icon.\nColor of the icon when hovered.\nColor of the icon when pressed.\nColor representing a context or active state.\nBorder radius of the right column.\nSet up the user interface for the title bar.\nPyComboBox\npython:str\npython:int\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:int"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/right_column",
        "href": "toolkit/ui_reference/widgets/right_column.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_right_column.py_right_column.PyRightColumn",
        "title": "PyComboBox > PyComboBox > PyRightColumn",
        "section": "PyComboBox > PyRightColumn",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_right_column.py_right_column.PyRightColumn(text_title, text_title_size, text_title_color, dark_one, bg_color, btn_color, btn_color_hover, btn_color_pressed, icon_path, icon_color, icon_color_hover, icon_color_pressed, context_color, radius=8)\n\nCustom widget representing a right column with a title, an icon, and a content area.\n\nParameters\n\ntext_title\n\npython:str\n\nThe title text for the right column.\n\ntext_title_size\n\npython:int\n\nThe font size of the title text.\n\ntext_title_color\n\npython:str\n\nThe color of the title text.\n\ndark_one\n\npython:str\n\nColor representing a dark shade.\n\nbg_color\n\npython:str\n\nBackground color of the right column.\n\nbtn_color\n\npython:str\n\nColor of the buttons in the right column.\n\nbtn_color_hover\n\npython:str\n\nColor of the buttons when hovered.\n\nbtn_color_pressed\n\npython:str\n\nColor of the buttons when pressed.\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str\n\nColor of the icon.\n\nicon_color_hover\n\npython:str\n\nColor of the icon when hovered.\n\nicon_color_pressed\n\npython:str\n\nColor of the icon when pressed.\n\ncontext_color\n\npython:str\n\nColor representing a context or active state.\n\nradius\n\npython:int\n\nBorder radius of the right column.\n\n!! processed by numpydoc !!\n\n\n\nsetup_ui()\n\nSet up the user interface for the title bar.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/right_column",
        "href": "toolkit/ui_reference/widgets/right_column.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_right_column.py_right_column.PyRightColumn.setup_ui",
        "title": "PyComboBox > PyComboBox > setup_ui",
        "section": "PyComboBox > setup_ui",
        "text": "setup_ui()\n\nSet up the user interface for the title bar.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.aedt_sessions.html#aedt_sessions",
        "title": "aedt_sessions",
        "section": "aedt_sessions",
        "text": "Get information for the active AEDT sessions.\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\naedt_sessions\npython:dict\n-1"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.aedt_sessions.html#ansys.aedt.toolkits.common.backend.api.Common.aedt_sessions",
        "title": "aedt_sessions > aedt_sessions > aedt_sessions",
        "section": "aedt_sessions > aedt_sessions",
        "text": "Common.aedt_sessions() -> Dict[int, int]\n\nGet information for the active AEDT sessions.\n\nReturns\n\npython:dict\n\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.aedt_sessions()\n{pid1: grpc_port1, pid2: grpc_port2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.wait_to_be_idle.html#wait_to_be_idle",
        "title": "wait_to_be_idle",
        "section": "wait_to_be_idle",
        "text": "Wait for the thread to be idle and ready to accept a new task.\nTime out in seconds. The default is 60.\nwait_to_be_idle\npython:int\noptional\n60"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.wait_to_be_idle.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.wait_to_be_idle",
        "title": "wait_to_be_idle > wait_to_be_idle > wait_to_be_idle",
        "section": "wait_to_be_idle > wait_to_be_idle",
        "text": "EDBCommon.wait_to_be_idle(timeout: int = 60) -> bool\n\nWait for the thread to be idle and ready to accept a new task.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 60.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/divider",
        "href": "toolkit/ui_reference/widgets/divider.html#pydiv",
        "title": "PyDiv",
        "section": "PyDiv",
        "text": "Vertical divider widget with customizable elements.\nThe color of the divider in hex color code. The default is \"#000000\".\nDivider height. The default is 0.\nDivider width. The default is 20.\nPyDiv\npython:str\noptional\n\"#000000\"\npython:float\noptional\n0\npython:float\noptional\n20"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/divider",
        "href": "toolkit/ui_reference/widgets/divider.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_div.py_div.PyDiv",
        "title": "PyDiv > PyDiv > PyDiv",
        "section": "PyDiv > PyDiv",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_div.py_div.PyDiv(color='#000000', height=0, width=20)\n\nVertical divider widget with customizable elements.\n\nParameters\n\ncolor\n\npython:str, optional\n\nThe color of the divider in hex color code. The default is \"#000000\".\n\nheight\n\npython:float, optional\n\nDivider height. The default is 0.\n\nwidth\n\npython:float, optional\n\nDivider width. The default is 20.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QVBoxLayout, QPushButton\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class Example(QWidget):\n>>>     def __init__(self):\n>>>         super().__init__()\n>>>         layout = QVBoxLayout(self)\n>>>         layout.addWidget(QPushButton(\"Button 1\"))\n>>>         layout.addWidget(PyDiv(\"#FF0000\", 20))\n>>>         layout.addWidget(QPushButton(\"Button 2\"))\n\n>>> if __name__ == \"__main__\":\n>>>     app = QApplication([])\n>>>     window = Example()\n>>>     window.show()\n>>>     app.exec()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.aedt_sessions.html#aedt_sessions",
        "title": "aedt_sessions",
        "section": "aedt_sessions",
        "text": "Get information for the active AEDT sessions.\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\naedt_sessions\npython:dict\n-1"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.aedt_sessions.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.aedt_sessions",
        "title": "aedt_sessions > aedt_sessions > aedt_sessions",
        "section": "aedt_sessions > aedt_sessions",
        "text": "EDBCommon.aedt_sessions() -> Dict[int, int]\n\nGet information for the active AEDT sessions.\n\nReturns\n\npython:dict\n\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.aedt_sessions()\n{pid1: grpc_port1, pid2: grpc_port2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.window_refresh",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.window_refresh.html#window_refresh",
        "title": "window_refresh",
        "section": "window_refresh",
        "text": "Window refresh\nwindow_refresh"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.window_refresh",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.window_refresh.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.window_refresh",
        "title": "window_refresh > window_refresh > window_refresh",
        "section": "window_refresh > window_refresh",
        "text": "CommonWindowUtils.window_refresh()\n\nWindow refresh\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_logger",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_logger.html#update_logger",
        "title": "update_logger",
        "section": "update_logger",
        "text": "Clear all layout.\nupdate_logger"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_logger",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_logger.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_logger",
        "title": "update_logger > update_logger > update_logger",
        "section": "update_logger > update_logger",
        "text": "CommonWindowUtils.update_logger(text)\n\nClear all layout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_textbox",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_textbox.html#add_textbox",
        "title": "add_textbox",
        "section": "add_textbox",
        "text": "Adds a label and textbox to a layout.\nThe layout object to which the label and combobox will be added.\nThe height of the label and combobox widgets. Default is 40.\nThe width of the label and combobox widgets. If not provided, a default width of [100, 100] will be used.\nThe text to be displayed on the label widget. Default is ‘“label1”’.\nText to be displayed in the textbox.\nThe font size of the label widget. Default is 12.\nA list containing the layout row object, label object, and combobox object.\nadd_textbox\npython:list"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_textbox",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_textbox.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_textbox",
        "title": "add_textbox > add_textbox > add_textbox",
        "section": "add_textbox > add_textbox",
        "text": "CommonWindowUtils.add_textbox(layout, height=40, width=None, label='label1', initial_text=None, font_size=12)\n\nAdds a label and textbox to a layout.\n\nParameters\n\nlayout: QLayout\n\nThe layout object to which the label and combobox will be added.\n\nheight: int, optional\n\nThe height of the label and combobox widgets. Default is 40.\n\nwidth: list, optional\n\nThe width of the label and combobox widgets. If not provided, a default width of [100, 100] will be used.\n\nlabel: str, optional\n\nThe text to be displayed on the label widget. Default is ‘“label1”’.\n\ninitial_text: str, optional\n\nText to be displayed in the textbox.\n\nfont_size: int, optional\n\nThe font size of the label widget. Default is 12.\n\nReturns\n\npython:list\n\nA list containing the layout row object, label object, and combobox object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/line_edit",
        "href": "toolkit/ui_reference/widgets/line_edit.html#pylineedit",
        "title": "PyLineEdit",
        "section": "PyLineEdit",
        "text": "Custom QLineEdit widget with enhanced styling.\nThe initial text for the line edit. Default is an empty string.\nThe placeholder text to be displayed when the line edit is empty. Default is an empty string.\nThe border radius of the line edit. Default is 8.\nThe border size of the line edit. Default is 2.\nThe text color of the line edit. Default is “#FFF” (white).\nThe text selection color of the line edit. Default is “#FFF” (white).\nThe background color of the line edit. Default is “#333” (dark gray).\nThe background color of the line edit when active. Default is “#222” (darker gray).\nThe color representing a context or active state. Default is “#00ABE8” (blue).\nThe font size of the text on the button.\nSet the stylesheet for the PyLineEdit.\nBorder radius of the line edit.\nBorder size of the line edit.\nText color of the line edit.\nText selection color of the line edit.\nBackground color of the line edit.\nBackground color when the line edit is active.\nColor representing a context or active state.\nThe font size of the text on the button.\nPyLineEdit\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:int\npython:int\npython:str\npython:str\npython:str\npython:str\npython:str\npython:int"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/line_edit",
        "href": "toolkit/ui_reference/widgets/line_edit.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_line_edit.py_line_edit.PyLineEdit",
        "title": "PyLineEdit > PyLineEdit > PyLineEdit",
        "section": "PyLineEdit > PyLineEdit",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_line_edit.py_line_edit.PyLineEdit(text='', place_holder_text='', radius=8, border_size=2, color='#FFF', selection_color='#FFF', bg_color='#333', bg_color_active='#222', context_color='#00ABE8', font_size=12)\n\nCustom QLineEdit widget with enhanced styling.\n\nParameters\n\ntext\n\npython:str, optional\n\nThe initial text for the line edit. Default is an empty string.\n\nplace_holder_text\n\npython:str, optional\n\nThe placeholder text to be displayed when the line edit is empty. Default is an empty string.\n\nradius\n\npython:int, optional\n\nThe border radius of the line edit. Default is 8.\n\nborder_size\n\npython:int, optional\n\nThe border size of the line edit. Default is 2.\n\ncolor\n\npython:str, optional\n\nThe text color of the line edit. Default is “#FFF” (white).\n\nselection_color\n\npython:str, optional\n\nThe text selection color of the line edit. Default is “#FFF” (white).\n\nbg_color\n\npython:str, optional\n\nThe background color of the line edit. Default is “#333” (dark gray).\n\nbg_color_active\n\npython:str, optional\n\nThe background color of the line edit when active. Default is “#222” (darker gray).\n\ncontext_color\n\npython:str, optional\n\nThe color representing a context or active state. Default is “#00ABE8” (blue).\n\nfont_size\n\npython:int, optional\n\nThe font size of the text on the button.\n\n!! processed by numpydoc !!\n\n\n\nset_stylesheet(radius, border_size, color, selection_color, bg_color, bg_color_active, context_color, font_size)\n\nSet the stylesheet for the PyLineEdit.\n\nParameters\n\nradius\n\npython:int\n\nBorder radius of the line edit.\n\nborder_size\n\npython:int\n\nBorder size of the line edit.\n\ncolor\n\npython:str\n\nText color of the line edit.\n\nselection_color\n\npython:str\n\nText selection color of the line edit.\n\nbg_color\n\npython:str\n\nBackground color of the line edit.\n\nbg_color_active\n\npython:str\n\nBackground color when the line edit is active.\n\ncontext_color\n\npython:str\n\nColor representing a context or active state.\n\nfont_size\n\npython:int\n\nThe font size of the text on the button.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/line_edit",
        "href": "toolkit/ui_reference/widgets/line_edit.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_line_edit.py_line_edit.PyLineEdit.set_stylesheet",
        "title": "PyLineEdit > PyLineEdit > set_stylesheet",
        "section": "PyLineEdit > set_stylesheet",
        "text": "set_stylesheet(radius, border_size, color, selection_color, bg_color, bg_color_active, context_color, font_size)\n\nSet the stylesheet for the PyLineEdit.\n\nParameters\n\nradius\n\npython:int\n\nBorder radius of the line edit.\n\nborder_size\n\npython:int\n\nBorder size of the line edit.\n\ncolor\n\npython:str\n\nText color of the line edit.\n\nselection_color\n\npython:str\n\nText selection color of the line edit.\n\nbg_color\n\npython:str\n\nBackground color of the line edit.\n\nbg_color_active\n\npython:str\n\nBackground color when the line edit is active.\n\ncontext_color\n\npython:str\n\nColor representing a context or active state.\n\nfont_size\n\npython:int\n\nThe font size of the text on the button.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.save_edb",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.save_edb.html#save_edb",
        "title": "save_edb",
        "section": "save_edb",
        "text": "Save the EDB project.\nFull path to the aedb folder. The default is None.\nTrue when successful, False when failed.\nsave_edb\npython:str\noptional\naedb\nNone\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.save_edb",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.save_edb.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.save_edb",
        "title": "save_edb > save_edb > save_edb",
        "section": "save_edb > save_edb",
        "text": "EDBCommon.save_edb(edb_path=None)\n\nSave the EDB project.\n\nParameters\n\nedb_path\n\npython:str, optional\n\nFull path to the aedb folder. The default is None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n>>> toolkit_api.save_edb(\"path/to/new_file\")\n>>> toolkit_api.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.html#loadimages",
        "title": "LoadImages",
        "section": "LoadImages",
        "text": "A utility class for managing image and icon paths in a PySide6 desktop application.\nThis class facilitates the retrieval of image and icon paths, allowing the application to access\nand display graphical assets.\nThe base path to the directory containing images. If not provided, the default path is the directory\nwhere the script is located.\nLoadImages.icon_path(icon_name)\nGet the full path for the specified icon.\nLoadImages.image_path(file_name)\nGet the full path for the specified image file.\nLoadImages\npython:str\noptional\nLoadImages.icon_path\nLoadImages.image_path"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.html#ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages",
        "title": "LoadImages > LoadImages > LoadImages",
        "section": "LoadImages > LoadImages",
        "text": "class ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages(path=None)\n\nA utility class for managing image and icon paths in a PySide6 desktop application.\n\nThis class facilitates the retrieval of image and icon paths, allowing the application to access\nand display graphical assets.\n\nParameters\n\npath\n\npython:str, optional\n\nThe base path to the directory containing images. If not provided, the default path is the directory\nwhere the script is located.\n\nExamples\n\n>>> image_loader = LoadImages()\n>>> icon_path = image_loader.icon_path(\"my_icon.png\")\n>>> image_path = image_loader.image_path(\"my_image.png\")\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nLoadImages.icon_path(icon_name)\n\nGet the full path for the specified icon.\n\nLoadImages.image_path(file_name)\n\nGet the full path for the specified image file.\n\n"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_aedt.html#launch_aedt",
        "title": "launch_aedt",
        "section": "launch_aedt",
        "text": "Launch AEDT.\nThis method is launched in a thread if gRPC is enabled. AEDT is released once it is opened.\nTrue when successful, False when failed.\nlaunch_aedt\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_aedt.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_aedt",
        "title": "launch_aedt > launch_aedt > launch_aedt",
        "section": "launch_aedt > launch_aedt",
        "text": "AEDTCommon.launch_aedt() -> bool\n\nLaunch AEDT.\n\nThis method is launched in a thread if gRPC is enabled. AEDT is released once it is opened.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.clear_layout",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.clear_layout.html#clear_layout",
        "title": "clear_layout",
        "section": "clear_layout",
        "text": "Clear all layout.\nclear_layout"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.clear_layout",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.clear_layout.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.clear_layout",
        "title": "clear_layout > clear_layout > clear_layout",
        "section": "clear_layout > clear_layout",
        "text": "CommonWindowUtils.clear_layout(layout)\n\nClear all layout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.remove_item",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.remove_item.html#remove_item",
        "title": "remove_item",
        "section": "remove_item",
        "text": "Remove item by index.\nremove_item"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.remove_item",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.remove_item.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.remove_item",
        "title": "remove_item > remove_item > remove_item",
        "section": "remove_item > remove_item",
        "text": "static CommonWindowUtils.remove_item(layout, index)\n\nRemove item by index.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.installed_aedt_version.html#installed_aedt_version",
        "title": "installed_aedt_version",
        "section": "installed_aedt_version",
        "text": "Get the installed AEDT versions.\nList of installed AEDT versions.\ninstalled_aedt_version\npython:list"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.installed_aedt_version.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.installed_aedt_version",
        "title": "installed_aedt_version > installed_aedt_version > installed_aedt_version",
        "section": "installed_aedt_version > installed_aedt_version",
        "text": "static EDBCommon.installed_aedt_version() -> List\n\nGet the installed AEDT versions.\n\nReturns\n\npython:list\n\nList of installed AEDT versions.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.installed_aedt_version()\n[\"2023.2\", \"2024.1\", \"2024.2\"]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#pytitlebutton",
        "title": "PyTitleButton",
        "section": "PyTitleButton",
        "text": "Customizable title button.\nInherits QPushButton and provides a customizable title button.\nParent widget.\nApplication parent widget. The default is None.\nTooltip text for the button. The default is an empty string.\nButton ID. The default is None.\nWidth of the button. The default is 30.\nHeight of the button. The default is 30.\nBorder radius of the button. The default is 8.\nBackground color of the button. The default is \"#343b48\".\nBackground color when the mouse hovers over the button. The default is \"#3c4454\".\nBackground color when the button is pressed. The default is \"#2c313c\".\nIcon color of the button. The default is \"#c3ccdf\".\nIcon color when the mouse hovers over the button. The default is \"#dce1ec\".\nIcon color when the button is pressed. The default is \"#edf0f5\".\nIcon color when the button is active. The default is \"#f5f6f9\".\nPath to the icon image. The default is \"no_icon.svg\".\nDark color for styling. The default is \"#1b1e23\".\nContext color for styling. The default is \"#568af2\".\nText foreground color. The default is \"#8a95aa\".\nInitial state of the button (active or not). The default is False.\nChange the style of the button based on the given event.\nThe event triggering the style change.\nEvent triggered when the mouse enters the button.\nMouse enter event.\nDraw the icon with specified colors.\nThe QPainter object.\nPath to the icon image.\nRectangle representing the button’s area.\nCheck if the button is in an active state.\nTrue if the button is active, False otherwise.\nEvent triggered when the mouse leaves the button.\nMouse leave event.\nEvent triggered when the left mouse button is pressed.\nMouse press event.\nEvent triggered when the left mouse button is released.\nMouse release event.\nMove the tooltip to the appropriate position relative to the button.\nPaint the button and its icon.\nPaint event.\nSet the active state of the button.\nTrue to set the button as active, False otherwise.\nSet the icon of the button.\nPath to the icon image.\nPyTitleButton\nQWidget\nQWidget\noptional\nNone\npython:str\noptional\npython:str\noptional\nNone\npython:int\noptional\n30\npython:int\noptional\n30\npython:int\noptional\n8\npython:str\noptional\n\"#343b48\"\npython:str\noptional\n\"#3c4454\"\npython:str\noptional\n\"#2c313c\"\npython:str\noptional\n\"#c3ccdf\"\npython:str\noptional\n\"#dce1ec\"\npython:str\noptional\n\"#edf0f5\"\npython:str\noptional\n\"#f5f6f9\"\npython:str\noptional\n\"no_icon.svg\"\npython:str\noptional\n\"#1b1e23\"\npython:str\noptional\n\"#568af2\"\npython:str\noptional\n\"#8a95aa\"\noptional\nFalse\nQEvent\nQEvent\nQPainter\npython:str\nQRect\nQEvent\nQEvent\nQEvent\nQEvent\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton",
        "title": "PyTitleButton > PyTitleButton > PyTitleButton",
        "section": "PyTitleButton > PyTitleButton",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton(parent, app_parent=None, tooltip_text='', btn_id=None, width=30, height=30, radius=8, bg_color='#343b48', bg_color_hover='#3c4454', bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', icon_path='no_icon.svg', dark_one='#1b1e23', context_color='#568af2', text_foreground='#8a95aa', is_active=False)\n\nCustomizable title button.\n\nInherits QPushButton and provides a customizable title button.\n\nParameters\n\nparent\n\nQWidget\n\nParent widget.\n\napp_parent\n\nQWidget, optional\n\nApplication parent widget. The default is None.\n\ntooltip_text\n\npython:str, optional\n\nTooltip text for the button. The default is an empty string.\n\nbtn_id\n\npython:str, optional\n\nButton ID. The default is None.\n\nwidth\n\npython:int, optional\n\nWidth of the button. The default is 30.\n\nheight\n\npython:int, optional\n\nHeight of the button. The default is 30.\n\nradius\n\npython:int, optional\n\nBorder radius of the button. The default is 8.\n\nbg_color\n\npython:str, optional\n\nBackground color of the button. The default is \"#343b48\".\n\nbg_color_hover\n\npython:str, optional\n\nBackground color when the mouse hovers over the button. The default is \"#3c4454\".\n\nbg_color_pressed\n\npython:str, optional\n\nBackground color when the button is pressed. The default is \"#2c313c\".\n\nicon_color\n\npython:str, optional\n\nIcon color of the button. The default is \"#c3ccdf\".\n\nicon_color_hover\n\npython:str, optional\n\nIcon color when the mouse hovers over the button. The default is \"#dce1ec\".\n\nicon_color_pressed\n\npython:str, optional\n\nIcon color when the button is pressed. The default is \"#edf0f5\".\n\nicon_color_active\n\npython:str, optional\n\nIcon color when the button is active. The default is \"#f5f6f9\".\n\nicon_path\n\npython:str, optional\n\nPath to the icon image. The default is \"no_icon.svg\".\n\ndark_one\n\npython:str, optional\n\nDark color for styling. The default is \"#1b1e23\".\n\ncontext_color\n\npython:str, optional\n\nContext color for styling. The default is \"#568af2\".\n\ntext_foreground\n\npython:str, optional\n\nText foreground color. The default is \"#8a95aa\".\n\nis_active\n\nbool, optional\n\nInitial state of the button (active or not). The default is False.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QWidget\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import PyTitleButton\n\n>>> class MyApp(QWidget):\n...     def __init__(self):\n...         super().__init__()\n...         self.title_button = PyTitleButton(self, tooltip_text=\"Click me!\")\n...         self.title_button.clicked.connect(self.on_button_clicked)\n...         self.title_button.released.connect(self.on_button_released)\n...\n...     def on_button_clicked(self):\n...         print(\"Button Clicked!\")\n...\n...     def on_button_released(self):\n...         print(\"Button Released!\")\n...\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n!! processed by numpydoc !!\n\n\n\nchange_style(event)\n\nChange the style of the button based on the given event.\n\nParameters\n\nevent\n\nQEvent\n\nThe event triggering the style change.\n\n!! processed by numpydoc !!\n\n\n\nenterEvent(event)\n\nEvent triggered when the mouse enters the button.\n\nParameters\n\nevent\n\nQEvent\n\nMouse enter event.\n\n!! processed by numpydoc !!\n\n\n\nicon_paint(qp, image, rect)\n\nDraw the icon with specified colors.\n\nParameters\n\nqp\n\nQPainter\n\nThe QPainter object.\n\nimage\n\npython:str\n\nPath to the icon image.\n\nrect\n\nQRect\n\nRectangle representing the button’s area.\n\n!! processed by numpydoc !!\n\n\n\nis_active()\n\nCheck if the button is in an active state.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\nleaveEvent(event)\n\nEvent triggered when the mouse leaves the button.\n\nParameters\n\nevent\n\nQEvent\n\nMouse leave event.\n\n!! processed by numpydoc !!\n\n\n\nmousePressEvent(event)\n\nEvent triggered when the left mouse button is pressed.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n!! processed by numpydoc !!\n\n\n\nmouseReleaseEvent(event)\n\nEvent triggered when the left mouse button is released.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n!! processed by numpydoc !!\n\n\n\nmove_tooltip()\n\nMove the tooltip to the appropriate position relative to the button.\n\n!! processed by numpydoc !!\n\n\n\npaintEvent(event)\n\nPaint the button and its icon.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n!! processed by numpydoc !!\n\n\n\nset_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nTrue to set the button as active, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\nset_icon(icon_path)\n\nSet the icon of the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.change_style",
        "title": "PyTitleButton > PyTitleButton > change_style",
        "section": "PyTitleButton > change_style",
        "text": "change_style(event)\n\nChange the style of the button based on the given event.\n\nParameters\n\nevent\n\nQEvent\n\nThe event triggering the style change.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.enterEvent",
        "title": "PyTitleButton > PyTitleButton > enterEvent",
        "section": "PyTitleButton > enterEvent",
        "text": "enterEvent(event)\n\nEvent triggered when the mouse enters the button.\n\nParameters\n\nevent\n\nQEvent\n\nMouse enter event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.icon_paint",
        "title": "PyTitleButton > PyTitleButton > icon_paint",
        "section": "PyTitleButton > icon_paint",
        "text": "icon_paint(qp, image, rect)\n\nDraw the icon with specified colors.\n\nParameters\n\nqp\n\nQPainter\n\nThe QPainter object.\n\nimage\n\npython:str\n\nPath to the icon image.\n\nrect\n\nQRect\n\nRectangle representing the button’s area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.is_active",
        "title": "PyTitleButton > PyTitleButton > is_active",
        "section": "PyTitleButton > is_active",
        "text": "is_active()\n\nCheck if the button is in an active state.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.leaveEvent",
        "title": "PyTitleButton > PyTitleButton > leaveEvent",
        "section": "PyTitleButton > leaveEvent",
        "text": "leaveEvent(event)\n\nEvent triggered when the mouse leaves the button.\n\nParameters\n\nevent\n\nQEvent\n\nMouse leave event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.mousePressEvent",
        "title": "PyTitleButton > PyTitleButton > mousePressEvent",
        "section": "PyTitleButton > mousePressEvent",
        "text": "mousePressEvent(event)\n\nEvent triggered when the left mouse button is pressed.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.mouseReleaseEvent",
        "title": "PyTitleButton > PyTitleButton > mouseReleaseEvent",
        "section": "PyTitleButton > mouseReleaseEvent",
        "text": "mouseReleaseEvent(event)\n\nEvent triggered when the left mouse button is released.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.move_tooltip",
        "title": "PyTitleButton > PyTitleButton > move_tooltip",
        "section": "PyTitleButton > move_tooltip",
        "text": "move_tooltip()\n\nMove the tooltip to the appropriate position relative to the button.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.paintEvent",
        "title": "PyTitleButton > PyTitleButton > paintEvent",
        "section": "PyTitleButton > paintEvent",
        "text": "paintEvent(event)\n\nPaint the button and its icon.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.set_active",
        "title": "PyTitleButton > PyTitleButton > set_active",
        "section": "PyTitleButton > set_active",
        "text": "set_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nTrue to set the button as active, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/title_button",
        "href": "toolkit/ui_reference/widgets/title_button.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton.set_icon",
        "title": "PyTitleButton > PyTitleButton > set_icon",
        "section": "PyTitleButton > set_icon",
        "text": "set_icon(icon_path)\n\nSet the icon of the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_vertical_line",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_vertical_line.html#add_vertical_line",
        "title": "add_vertical_line",
        "section": "add_vertical_line",
        "text": "Add a vertical line.\nLayout object to add the label and toggle button to.\nTop spacer. Default is [0, 10].\nBottom, spacer. Default is [0, 10].\nadd_vertical_line"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_vertical_line",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_vertical_line.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_vertical_line",
        "title": "add_vertical_line > add_vertical_line > add_vertical_line",
        "section": "add_vertical_line > add_vertical_line",
        "text": "CommonWindowUtils.add_vertical_line(layout, top_spacer=None, bot_spacer=None)\n\nAdd a vertical line.\n\nParameters\n\nlayout: QLayout\n\nLayout object to add the label and toggle button to.\n\ntop_spacer: list, optional\n\nTop spacer. Default is [0, 10].\n\nbot_spacer: list, optional\n\nBottom, spacer. Default is [0, 10].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#toolkit-example",
        "title": "Toolkit example",
        "section": "Toolkit example",
        "text": "The examples/toolkit/pyaedt_toolkit\nfolder contains all files for creating a toolkit using the PyAEDT Common Toolkit.\nToolkit example"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#example-walkthrough",
        "title": "Toolkit example > Example walkthrough",
        "section": "Example walkthrough",
        "text": "Follow the steps outlined in the example to gain practical insights into toolkit implementation:\nAccess the example: Navigate to the examples/toolkit/pyaedt_toolkit\nfolder.\nUnderstand the toolkit structure:\nExplore the directory and file structure of the example toolkit.\nGain insights into best practices for organizing toolkit components.\nExample walkthrough"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#toolkit-structure",
        "title": "Toolkit example > Toolkit structure",
        "section": "Toolkit structure",
        "text": "For optimal organization and maintainability, toolkits should adhere to the following structure:\nToolkit structure"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#backend-and-ui",
        "title": "Toolkit example > Backend and UI",
        "section": "Backend and UI",
        "text": "As described in Architecture, toolkits must have a separation between the\nbackend and UI.\nThe backend directory houses backend functionalities, including API and REST API definitions,\ndata processing, and communication with the common library.\nThe ui folder focuses on frontend interactions, managing the UI and connecting with backend\nfunctionalities.\nBackend and UI\nbackend\nui"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#api",
        "title": "Toolkit example > API",
        "section": "API",
        "text": "The toolkit API controls the workflow, enabling the creation of an automated workflow without a UI.\nThe following code shows how to inherit common methods.\nYou can play with the API in the Python console:\nAPI\ntoolkit"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#models-and-properties",
        "title": "Toolkit example > Models and properties",
        "section": "Models and properties",
        "text": "To introduce new properties to the toolkit, define them using models. Properties have a fixed type,\nso they are protected. In models, specify the type. In this example, two new properties, multiplier\nand geometry, are defined as float and string, respectively.\nIn the backend_properties.json file, define default values for both common and new properties.\nThese properties are correctly loaded by being imported into the toolkit API, as seen here:\nModels and properties\nmultiplier\ngeometry\nbackend_properties.json"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#run-backend",
        "title": "Toolkit example > Run backend",
        "section": "Run backend",
        "text": "A script, conventionally named  rest_api.py for its role in managing the REST API of the toolkit,\nis referred to as run_backend.py in this example. Upon execution, the script launches a server that\nlistens for incoming requests.\nSimilar to the API, this file inherits the common REST API, containing only the specific REST API functionalities\nrequired for the toolkit. The following Python code imports the REST API application from the common library:\nThis code then creates an instance of the toolkit API object:\nRun backend\nrest_api.py\nrun_backend.py"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#run-frontend",
        "title": "Toolkit example > Run frontend",
        "section": "Run frontend",
        "text": "The run_frontend.py script serves as the application launcher for the UI, built using PySide6.\nThe file concludes with the following code, ensuring proper initialization using PySide6:\nThe initialization of the ApplicationWindow class calls different common pages defined in\nUI reference.\nIf additional pages are to be added to the toolkit, include them along with any required actions\ninside the windows directory.\nRun frontend\nrun_frontend.py\nApplicationWindow\nwindows"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#common-actions",
        "title": "Toolkit example > Common actions",
        "section": "Common actions",
        "text": "Common actions define the calls to the REST API, as described in Actions.\nCommon actions"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#ui-properties",
        "title": "Toolkit example > UI properties",
        "section": "UI properties",
        "text": "Similar to the backend, the UI has its own properties. The frontend_properties.json file enables\ncustomization of the UI theme, addition of new tabs, and modification of the URL and port for backend\ncommunication.\nUI properties\nfrontend_properties.json"
    },
    {
        "objectID": "getting_started/example_toolkit",
        "href": "getting_started/example_toolkit.html#run-toolkit",
        "title": "Toolkit example > Run toolkit",
        "section": "Run toolkit",
        "text": "The run_toolkit.py script facilitates the simultaneous execution of both the backend and UI in two\ndifferent threads. This eliminates the need for launching the backend and UI separately.\nIn cases where the backend is running remotely, execute the backend on the remote machine\nbefore running this script.\nRun toolkit\nrun_toolkit.py"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.item_index",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.item_index.html#item_index",
        "title": "item_index",
        "section": "item_index",
        "text": "Item index.\nitem_index"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.item_index",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.item_index.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.item_index",
        "title": "item_index > item_index > item_index",
        "section": "item_index > item_index",
        "text": "static CommonWindowUtils.item_index(layout, item)\n\nItem index.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_thread_status.html#get_thread_status",
        "title": "get_thread_status",
        "section": "get_thread_status",
        "text": "Get the toolkit thread status.\nTrue when active, False when inactive.\nget_thread_status\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_thread_status.html#ansys.aedt.toolkits.common.backend.api.Common.get_thread_status",
        "title": "get_thread_status > get_thread_status > get_thread_status",
        "section": "get_thread_status > get_thread_status",
        "text": "Common.get_thread_status() -> ToolkitThreadStatus\n\nGet the toolkit thread status.\n\nReturns\n\nbool\n\nTrue when active, False when inactive.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_thread_status()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "End-to-end examples show how to use the three classes in the backend API of the PyAEDT Common Toolkit\nand its REST API.\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#the-aedtcommon-class",
        "title": "Examples > The AEDTCommon class",
        "section": "The AEDTCommon class",
        "text": "These examples show how to use the AEDTCommon class of the backend API:\nThe AEDTCommon class\nAEDTCommon\nAEDTCommon"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#the-edbcommon-class",
        "title": "Examples > The EDBCommon class",
        "section": "The EDBCommon class",
        "text": "These examples show how to use the EDBCommon class of the backend API:\nThe EDBCommon class\nEDBCommon\nEDBCommon"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#the-common-class",
        "title": "Examples > The Common class",
        "section": "The Common class",
        "text": "These examples show how to use the Common class of the backend API:\nThe Common class\nCommon\nCommon"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#rest-api",
        "title": "Examples > REST API",
        "section": "REST API",
        "text": "For an example of using the REST API for the PyAEDT Common Toolkit, see the\nrest_api_aedt_example.py\nfile in the repository.\nREST API"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This section explains how to install the PyAEDT Common Toolkit.\nIt then explains this toolkit’s architecture and provides an example\nof how to use its common methods to develop a new Ansys\nElectronics Desktop (AEDT) toolkit.\nLearn how to install the PyAEDT Common Toolkit.\nLearn about this toolkit’s architecture.\nUse this toolkit’s common methods to create an example toolkit.\nGetting started"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.launch_thread.html#launch_thread",
        "title": "launch_thread",
        "section": "launch_thread",
        "text": "Launch the thread.\nlaunch_thread"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.launch_thread.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.launch_thread",
        "title": "launch_thread > launch_thread > launch_thread",
        "section": "launch_thread > launch_thread",
        "text": "EDBCommon.launch_thread(process) -> ThreadManager\n\nLaunch the thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.serialize_obj_base64.html#serialize_obj_base64",
        "title": "serialize_obj_base64",
        "section": "serialize_obj_base64",
        "text": "Encode a bytes-like object.\nPath to the file to serialize.\nEncoded data.\nserialize_obj_base64\npython:str\nbytes"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.serialize_obj_base64.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.serialize_obj_base64",
        "title": "serialize_obj_base64 > serialize_obj_base64 > serialize_obj_base64",
        "section": "serialize_obj_base64 > serialize_obj_base64",
        "text": "static EDBCommon.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the file to serialize.\n\nReturns\n\nbytes\n\nEncoded data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_title_bar",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_title_bar.html#get_title_bar",
        "title": "get_title_bar",
        "section": "get_title_bar",
        "text": "Get title.\nThe name of the QPushButton object.\nget_title_bar"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_title_bar",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_title_bar.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_title_bar",
        "title": "get_title_bar > get_title_bar > get_title_bar",
        "section": "get_title_bar > get_title_bar",
        "text": "CommonWindowUtils.get_title_bar(object_name)\n\nGet title.\n\nParameters\n\nobject_name: str\n\nThe name of the QPushButton object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.wait_to_be_idle.html#wait_to_be_idle",
        "title": "wait_to_be_idle",
        "section": "wait_to_be_idle",
        "text": "Wait for the thread to be idle and ready to accept a new task.\nTime out in seconds. The default is 60.\nwait_to_be_idle\npython:int\noptional\n60"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.wait_to_be_idle.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.wait_to_be_idle",
        "title": "wait_to_be_idle > wait_to_be_idle > wait_to_be_idle",
        "section": "wait_to_be_idle > wait_to_be_idle",
        "text": "AEDTCommon.wait_to_be_idle(timeout: int = 60) -> bool\n\nWait for the thread to be idle and ready to accept a new task.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 60.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/combobox",
        "href": "toolkit/ui_reference/widgets/combobox.html#pycombobox",
        "title": "PyComboBox",
        "section": "PyComboBox",
        "text": "Combo box widget with customizable elements.\nInherits QComboBox and includes customizable elements including\ntext, radius, color, and background colors in different states.\nList of options in combo box.\nRadius of combo box corners. The default is 5.\nBackground color of the combo box. The default is \"#FFFFFF\".\nBackground color when mouse hovers over the combo box. The default is \"#FFFFFF\".\nText color in the combo box. The default is \"#000000\".\nThe font size of the text on the button.\nPyComboBox\npython:list\npython:int\noptional\n5\npython:str\noptional\n\"#FFFFFF\"\npython:str\noptional\n\"#FFFFFF\"\npython:str\noptional\n\"#000000\"\npython:int\noptional"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/combobox",
        "href": "toolkit/ui_reference/widgets/combobox.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_combo_box.py_combo_box.PyComboBox",
        "title": "PyComboBox > PyComboBox > PyComboBox",
        "section": "PyComboBox > PyComboBox",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_combo_box.py_combo_box.PyComboBox(text_list, radius=5, bg_color='#FFFFFF', bg_color_hover='#FFFFFF', text_color='#000000', font_size=12)\n\nCombo box widget with customizable elements.\n\nInherits QComboBox and includes customizable elements including\ntext, radius, color, and background colors in different states.\n\nParameters\n\ntext_list\n\npython:list\n\nList of options in combo box.\n\nradius\n\npython:int, optional\n\nRadius of combo box corners. The default is 5.\n\nbg_color\n\npython:str, optional\n\nBackground color of the combo box. The default is \"#FFFFFF\".\n\nbg_color_hover\n\npython:str, optional\n\nBackground color when mouse hovers over the combo box. The default is \"#FFFFFF\".\n\ntext_color\n\npython:str, optional\n\nText color in the combo box. The default is \"#000000\".\n\nfont_size\n\npython:int, optional\n\nThe font size of the text on the button.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import *\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.combo_box = PyComboBox(text_list=['Option 1', 'Option 2'], radius=5)\n...         self.combo_box.show()\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/window",
        "href": "toolkit/ui_reference/widgets/window.html#pywindow",
        "title": "PyWindow",
        "section": "PyWindow",
        "text": "Custom window frame widget with customizable styling and drop shadow effect.\nInherits QFrame and provides a customizable window frame.\nThe parent widget for this PyWindow.\nThe margin size around the window frame. Default is 0.\nThe spacing between layout items. Default is 2.\nThe background color of the window frame. Default is “#2c313c”.\nThe text color of the window frame. Default is “#fff”.\nThe font of the text in the window frame. Default is “9pt ‘Segoe UI’”.\nThe border radius of the window frame corners. Default is 10.\nThe size of the border around the window frame. Default is 2.\nThe color of the border around the window frame. Default is “#343b48”.\nSets the style sheet of the PyWindow with customizable attributes.\nThe background color of the window frame.\nThe border radius of the window frame corners.\nThe size of the border around the window frame.\nThe color of the border around the window frame.\nThe text color of the window frame.\nThe font of the text in the window frame.\nPyWindow\nQWidget\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:str\noptional"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/window",
        "href": "toolkit/ui_reference/widgets/window.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_window.py_window.PyWindow",
        "title": "PyWindow > PyWindow > PyWindow",
        "section": "PyWindow > PyWindow",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_window.py_window.PyWindow(parent, margin=0, spacing=2, bg_color='#2c313c', text_color='#fff', text_font=\"9pt 'Segoe UI'\", border_radius=10, border_size=2, border_color='#343b48')\n\nCustom window frame widget with customizable styling and drop shadow effect.\n\nInherits QFrame and provides a customizable window frame.\n\nParameters\n\nparent\n\nQWidget\n\nThe parent widget for this PyWindow.\n\nmargin\n\npython:int, optional\n\nThe margin size around the window frame. Default is 0.\n\nspacing\n\npython:int, optional\n\nThe spacing between layout items. Default is 2.\n\nbg_color\n\npython:str, optional\n\nThe background color of the window frame. Default is “#2c313c”.\n\ntext_color\n\npython:str, optional\n\nThe text color of the window frame. Default is “#fff”.\n\ntext_font\n\npython:str, optional\n\nThe font of the text in the window frame. Default is “9pt ‘Segoe UI’”.\n\nborder_radius\n\npython:int, optional\n\nThe border radius of the window frame corners. Default is 10.\n\nborder_size\n\npython:int, optional\n\nThe size of the border around the window frame. Default is 2.\n\nborder_color\n\npython:str, optional\n\nThe color of the border around the window frame. Default is “#343b48”.\n\n!! processed by numpydoc !!\n\n\n\nset_stylesheet(bg_color=None, border_radius=None, border_size=None, border_color=None, text_color=None, text_font=None)\n\nSets the style sheet of the PyWindow with customizable attributes.\n\nParameters\n\nbg_color\n\npython:str, optional\n\nThe background color of the window frame.\n\nborder_radius\n\npython:int, optional\n\nThe border radius of the window frame corners.\n\nborder_size\n\npython:int, optional\n\nThe size of the border around the window frame.\n\nborder_color\n\npython:str, optional\n\nThe color of the border around the window frame.\n\ntext_color\n\npython:str, optional\n\nThe text color of the window frame.\n\ntext_font\n\npython:str, optional\n\nThe font of the text in the window frame.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QMainWindow\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import PyWindow\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.window = PyWindow(self)\n...         self.setCentralWidget(self.window)\n...         self.show()\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/window",
        "href": "toolkit/ui_reference/widgets/window.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_window.py_window.PyWindow.set_stylesheet",
        "title": "PyWindow > PyWindow > set_stylesheet",
        "section": "PyWindow > set_stylesheet",
        "text": "set_stylesheet(bg_color=None, border_radius=None, border_size=None, border_color=None, text_color=None, text_font=None)\n\nSets the style sheet of the PyWindow with customizable attributes.\n\nParameters\n\nbg_color\n\npython:str, optional\n\nThe background color of the window frame.\n\nborder_radius\n\npython:int, optional\n\nThe border radius of the window frame corners.\n\nborder_size\n\npython:int, optional\n\nThe size of the border around the window frame.\n\nborder_color\n\npython:str, optional\n\nThe color of the border around the window frame.\n\ntext_color\n\npython:str, optional\n\nThe text color of the window frame.\n\ntext_font\n\npython:str, optional\n\nThe font of the text in the window frame.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QMainWindow\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import PyWindow\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.window = PyWindow(self)\n...         self.setCentralWidget(self.window)\n...         self.show()\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_combobox",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_combobox.html#add_combobox",
        "title": "add_combobox",
        "section": "add_combobox",
        "text": "Adds a label and combobox to a layout.\nThe layout object to which the label and combobox will be added.\nThe height of the label and combobox widgets. Default is 40.\nThe width of the label and combobox widgets. If not provided, a default width of [100, 100] will be used.\nThe text to be displayed on the label widget. Default is ‘label1’.\nA list of items to be displayed in the combobox. If not provided, a default list of [‘1’, ‘2’] will be used.\nThe font size of the label widget. Default is 12.\nA list containing the layout row object, label object, and combobox object.\nadd_combobox\npython:list"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_combobox",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_combobox.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_combobox",
        "title": "add_combobox > add_combobox > add_combobox",
        "section": "add_combobox > add_combobox",
        "text": "CommonWindowUtils.add_combobox(layout, height=40, width=None, label='label1', combobox_list=None, font_size=12)\n\nAdds a label and combobox to a layout.\n\nParameters\n\nlayout: QLayout\n\nThe layout object to which the label and combobox will be added.\n\nheight: int, optional\n\nThe height of the label and combobox widgets. Default is 40.\n\nwidth: list, optional\n\nThe width of the label and combobox widgets. If not provided, a default width of [100, 100] will be used.\n\nlabel: str, optional\n\nThe text to be displayed on the label widget. Default is ‘label1’.\n\ncombobox_list: list, optional\n\nA list of items to be displayed in the combobox. If not provided, a default list of [‘1’, ‘2’] will be used.\n\nfont_size: int, optional\n\nThe font size of the label widget. Default is 12.\n\nReturns\n\npython:list\n\nA list containing the layout row object, label object, and combobox object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.close_edb",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.close_edb.html#close_edb",
        "title": "close_edb",
        "section": "close_edb",
        "text": "Close the EDB project.\nTrue when successful, False when failed.\nclose_edb\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.close_edb",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.close_edb.html#ansys.aedt.toolkits.common.backend.api.EDBCommon.close_edb",
        "title": "close_edb > close_edb > close_edb",
        "section": "close_edb > close_edb",
        "text": "EDBCommon.close_edb()\n\nClose the EDB project.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n>>> toolkit_api.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_right_column",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_right_column.html#toggle_right_column",
        "title": "toggle_right_column",
        "section": "toggle_right_column",
        "text": "Toggles the display of the right column in a common window.\ntoggle_right_column"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_right_column",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_right_column.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_right_column",
        "title": "toggle_right_column > toggle_right_column > toggle_right_column",
        "section": "toggle_right_column > toggle_right_column",
        "text": "CommonWindowUtils.toggle_right_column()\n\nToggles the display of the right column in a common window.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.export_theme",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.export_theme.html#export_theme",
        "title": "export_theme",
        "section": "export_theme",
        "text": "Export the current theme to the theme file.\nWrites the current theme settings to the theme file in JSON format.\nexport_theme"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.export_theme",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.export_theme.html#ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.export_theme",
        "title": "export_theme > export_theme > export_theme",
        "section": "export_theme > export_theme",
        "text": "ThemeHandler.export_theme() -> None\n\nExport the current theme to the theme file.\n\nWrites the current theme settings to the theme file in JSON format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_n_buttons",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_n_buttons.html#add_n_buttons",
        "title": "add_n_buttons",
        "section": "add_n_buttons",
        "text": "Add a specified number of buttons to a layout object.\nThe layout to which the buttons will be added. If None, a new QHBoxLayout will be created.\nThe number of buttons to be added to the layout. Default is 1.\nThe height of the buttons. Default is 40.\nThe widths of the buttons. If list length is less than num_buttons, all buttons take the same width.\nDefault is [200].\nThe texts to be displayed on the buttons.\nIf list length is less than num_buttons, all buttons display the same text.\nDefault is [‘button’].\nFont size. Default is 10.\nA list containing the layout row object and the button objects.\nadd_n_buttons\n10\npython:list"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_n_buttons",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_n_buttons.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_n_buttons",
        "title": "add_n_buttons > add_n_buttons > add_n_buttons",
        "section": "add_n_buttons > add_n_buttons",
        "text": "CommonWindowUtils.add_n_buttons(layout=None, num_buttons=1, height=40, width=[200], text=['button'], font_size=10)\n\nAdd a specified number of buttons to a layout object.\n\nParameters\n\nlayout: QLayout, optional\n\nThe layout to which the buttons will be added. If None, a new QHBoxLayout will be created.\n\nnum_buttons: int, optional\n\nThe number of buttons to be added to the layout. Default is 1.\n\nheight: int, optional\n\nThe height of the buttons. Default is 40.\n\nwidth: list of int, optional\n\nThe widths of the buttons. If list length is less than num_buttons, all buttons take the same width.\nDefault is [200].\n\ntext: list of str, optional\n\nThe texts to be displayed on the buttons.\nIf list length is less than num_buttons, all buttons display the same text.\nDefault is [‘button’].\n\nfont_size: float or int, optional\n\nFont size. Default is 10.\n\nReturns\n\npython:list\n\nA list containing the layout row object and the button objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.read_theme",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.read_theme.html#read_theme",
        "title": "read_theme",
        "section": "read_theme",
        "text": "Read and load theme settings from the theme file.\nReads the theme settings from the theme file in JSON format and updates the internal state.\nread_theme"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.read_theme",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.read_theme.html#ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.read_theme",
        "title": "read_theme > read_theme > read_theme",
        "section": "read_theme > read_theme",
        "text": "ThemeHandler.read_theme() -> None\n\nRead and load theme settings from the theme file.\n\nReads the theme settings from the theme file in JSON format and updates the internal state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_left_column_visible",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_left_column_visible.html#is_left_column_visible",
        "title": "is_left_column_visible",
        "section": "is_left_column_visible",
        "text": "Check if the left column is visible.\nTrue if the left column is visible, False otherwise.\nis_left_column_visible\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_left_column_visible",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_left_column_visible.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_left_column_visible",
        "title": "is_left_column_visible > is_left_column_visible > is_left_column_visible",
        "section": "is_left_column_visible > is_left_column_visible",
        "text": "CommonWindowUtils.is_left_column_visible()\n\nCheck if the left column is visible.\n\nReturns\n\nbool\n\nTrue if the left column is visible, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon",
        "href": "toolkit/ui_reference/widgets/icon.html#pyicon",
        "title": "PyIcon",
        "section": "PyIcon",
        "text": "Icon widget with customizable elements.\nThe icon and color can be customized during initialization.\nPath to the icon image file.\nThe color of the icon in hex color code. The default is \"#000000\".\nSet icon of the PyIcon widget.\nThe icon and color can be customized during initialization.\nPath to the icon image file.\nThe color of the icon in hex color code. The default is \"#000000\".\nPyIcon\npython:str\npython:str\noptional\n\"#000000\"\npython:str\npython:str\noptional\n\"#000000\""
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon",
        "href": "toolkit/ui_reference/widgets/icon.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon.py_icon.PyIcon",
        "title": "PyIcon > PyIcon > PyIcon",
        "section": "PyIcon > PyIcon",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_icon.py_icon.PyIcon(icon_path, icon_color='#000000')\n\nIcon widget with customizable elements.\n\nThe icon and color can be customized during initialization.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str, optional\n\nThe color of the icon in hex color code. The default is \"#000000\".\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QVBoxLayout, QPushButton\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class Example(QWidget):\n>>>     def __init__(self):\n>>>         super().__init__()\n>>>         layout = QVBoxLayout(self)\n>>>         layout.addWidget(QPushButton(\"Button 1\"))\n>>>         layout.addWidget(PyIcon('path_to_icon.svg', \"#FF0000\"))\n>>>         layout.addWidget(QPushButton(\"Button 2\"))\n\n>>> if __name__ == \"__main__\":\n>>>     app = QApplication([])\n>>>     window = Example()\n>>>     window.show()\n>>>     app.exec()\n\n!! processed by numpydoc !!\n\n\n\nset_icon(icon_path, icon_color=None)\n\nSet icon of the PyIcon widget.\n\nThe icon and color can be customized during initialization.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str, optional\n\nThe color of the icon in hex color code. The default is \"#000000\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/icon",
        "href": "toolkit/ui_reference/widgets/icon.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_icon.py_icon.PyIcon.set_icon",
        "title": "PyIcon > PyIcon > set_icon",
        "section": "PyIcon > set_icon",
        "text": "set_icon(icon_path, icon_color=None)\n\nSet icon of the PyIcon widget.\n\nThe icon and color can be customized during initialization.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str, optional\n\nThe color of the icon in hex color code. The default is \"#000000\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/toggle",
        "href": "toolkit/ui_reference/widgets/toggle.html#pytoggle",
        "title": "PyToggle",
        "section": "PyToggle",
        "text": "Customizable toggle switch.\nInherits QCheckBox and provides a customizable toggle switch with options\nfor width, background color, circle color, active color, and animation curve.\nWidth of the toggle switch. The default is 50.\nBackground color of the toggle switch. The default is \"#777\".\nColor of the circle in the toggle switch. The default is \"#DDD\".\nColor of the toggle switch when active. The default is \"#00BCFF\".\nAnimation curve for the toggle switch. The default is QEasingCurve.OutBounce.\n…     def toggle_state_changed(self, state):\n…         print(“Toggle State:”, state)\nDetermine if a button press occurred within the toggle switch.\nThe position of the button press.\nTrue if the button press occurred within the toggle switch, False otherwise.\nPaint the toggle switch.\nPaint event.\nPyToggle\npython:int\noptional\n50\npython:str\noptional\n\"#777\"\npython:str\noptional\n\"#DDD\"\npython:str\noptional\n\"#00BCFF\"\nQEasingCurve\noptional\nQEasingCurve.OutBounce\nQPoint\nQPaintEvent"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/toggle",
        "href": "toolkit/ui_reference/widgets/toggle.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_toggle.py_toggle.PyToggle",
        "title": "PyToggle > PyToggle > PyToggle",
        "section": "PyToggle > PyToggle",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_toggle.py_toggle.PyToggle(width=50, bg_color='#777', circle_color='#DDD', active_color='#00BCFF', animation_curve=Type.OutBounce)\n\nCustomizable toggle switch.\n\nInherits QCheckBox and provides a customizable toggle switch with options\nfor width, background color, circle color, active color, and animation curve.\n\nParameters\n\nwidth\n\npython:int, optional\n\nWidth of the toggle switch. The default is 50.\n\nbg_color\n\npython:str, optional\n\nBackground color of the toggle switch. The default is \"#777\".\n\ncircle_color\n\npython:str, optional\n\nColor of the circle in the toggle switch. The default is \"#DDD\".\n\nactive_color\n\npython:str, optional\n\nColor of the toggle switch when active. The default is \"#00BCFF\".\n\nanimation_curve\n\nQEasingCurve, optional\n\nAnimation curve for the toggle switch. The default is QEasingCurve.OutBounce.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import PyToggle\n\n>>> class MyApp(QWidget):\n...     def __init__(self):\n...         super().__init__()\n...         self.toggle = PyToggle()\n...         self.toggle.stateChanged.connect(self.toggle_state_changed)\n...         self.toggle.show()\n\n…     def toggle_state_changed(self, state):\n…         print(“Toggle State:”, state)\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n!! processed by numpydoc !!\n\n\n\nhitButton(pos: QPoint)\n\nDetermine if a button press occurred within the toggle switch.\n\nParameters\n\npos\n\nQPoint\n\nThe position of the button press.\n\nReturns\n\nbool\n\nTrue if the button press occurred within the toggle switch, False otherwise.\n\n!! processed by numpydoc !!\n\n\n\npaintEvent(e)\n\nPaint the toggle switch.\n\nParameters\n\ne\n\nQPaintEvent\n\nPaint event.\n\n!! processed by numpydoc !!\n\n\n\nposition = <PySide6.QtCore.Property object>\n\n"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/toggle",
        "href": "toolkit/ui_reference/widgets/toggle.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_toggle.py_toggle.PyToggle.hitButton",
        "title": "PyToggle > PyToggle > hitButton",
        "section": "PyToggle > hitButton",
        "text": "hitButton(pos: QPoint)\n\nDetermine if a button press occurred within the toggle switch.\n\nParameters\n\npos\n\nQPoint\n\nThe position of the button press.\n\nReturns\n\nbool\n\nTrue if the button press occurred within the toggle switch, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/toggle",
        "href": "toolkit/ui_reference/widgets/toggle.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_toggle.py_toggle.PyToggle.paintEvent",
        "title": "PyToggle > PyToggle > paintEvent",
        "section": "PyToggle > paintEvent",
        "text": "paintEvent(e)\n\nPaint the toggle switch.\n\nParameters\n\ne\n\nQPaintEvent\n\nPaint event.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/toggle",
        "href": "toolkit/ui_reference/widgets/toggle.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_toggle.py_toggle.PyToggle.position",
        "title": "PyToggle > PyToggle > position",
        "section": "PyToggle > position",
        "text": "position = <PySide6.QtCore.Property object>\n\n"
    },
    {
        "objectID": "toolkit/ui_reference/windows",
        "href": "toolkit/ui_reference/windows.html#windows",
        "title": "Windows",
        "section": "Windows",
        "text": "The Windows layout template is in the\nmain_window\ndirectory in the repository.\nThe Common_windows\ndirectory contains the files for setting up the main window, home menu, and settings column.\nThe following script shows how to use the previous files to initialize the application.\nWindows"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.release_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.release_aedt.html#release_aedt",
        "title": "release_aedt",
        "section": "release_aedt",
        "text": "Release AEDT.\nWhether to close the AEDT projects that are open in the session.\nThe default is True.\nWhether to close the active AEDT session on exiting AEDT.\nThe default is True.\nTrue when successful, False when failed.\nrelease_aedt\noptional\nTrue\noptional\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.release_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.release_aedt.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.release_aedt",
        "title": "release_aedt > release_aedt > release_aedt",
        "section": "release_aedt > release_aedt",
        "text": "AEDTCommon.release_aedt(close_projects=False, close_on_exit=False)\n\nRelease AEDT.\n\nParameters\n\nclose_projects\n\nbool, optional\n\nWhether to close the AEDT projects that are open in the session.\nThe default is True.\n\nclose_on_exit\n\nbool, optional\n\nWhether to close the active AEDT session on exiting AEDT.\nThe default is True.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.release_aedt(True, True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.installed_aedt_version.html#installed_aedt_version",
        "title": "installed_aedt_version",
        "section": "installed_aedt_version",
        "text": "Get the installed AEDT versions.\nList of installed AEDT versions.\ninstalled_aedt_version\npython:list"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.installed_aedt_version.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.installed_aedt_version",
        "title": "installed_aedt_version > installed_aedt_version > installed_aedt_version",
        "section": "installed_aedt_version > installed_aedt_version",
        "text": "static AEDTCommon.installed_aedt_version() -> List\n\nGet the installed AEDT versions.\n\nReturns\n\npython:list\n\nList of installed AEDT versions.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.installed_aedt_version()\n[\"2023.2\", \"2024.1\", \"2024.2\"]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_thread_status.html#get_thread_status",
        "title": "get_thread_status",
        "section": "get_thread_status",
        "text": "Get the toolkit thread status.\nTrue when active, False when inactive.\nget_thread_status\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_thread_status.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_thread_status",
        "title": "get_thread_status > get_thread_status > get_thread_status",
        "section": "get_thread_status > get_thread_status",
        "text": "AEDTCommon.get_thread_status() -> ToolkitThreadStatus\n\nGet the toolkit thread status.\n\nReturns\n\nbool\n\nTrue when active, False when inactive.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_thread_status()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_thread.html#launch_thread",
        "title": "launch_thread",
        "section": "launch_thread",
        "text": "Launch the thread.\nlaunch_thread"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_thread.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_thread",
        "title": "launch_thread > launch_thread > launch_thread",
        "section": "launch_thread > launch_thread",
        "text": "AEDTCommon.launch_thread(process) -> ThreadManager\n\nLaunch the thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.set_properties.html#set_properties",
        "title": "set_properties",
        "section": "set_properties",
        "text": "Assign the passed data to the internal data model.\nDictionary containing the properties to update.\nTuple indicating the success status and a message.\nset_properties\npython:dict\npython:tuple\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.set_properties.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.set_properties",
        "title": "set_properties > set_properties > set_properties",
        "section": "set_properties > set_properties",
        "text": "AEDTCommon.set_properties(data: Dict[str, Any])\n\nAssign the passed data to the internal data model.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary containing the properties to update.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the success status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> value2 = 2\n>>> toolkit_api.set_properties({\"property1\": \"value1\", \"property2\": value2})\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/logger",
        "href": "toolkit/ui_reference/widgets/logger.html#pylogger",
        "title": "PyLogger",
        "section": "PyLogger",
        "text": "Logger widget.\nInherits QTextEdit and provides a simple interface for logging strings.\nText color. The default is \"#f5f6f9\".\nColor of background. The default is \"#000000\".\nFont size. The default is 10.\nFont size. The default is \"Segoe UI”.\nLogger height. The default is 10.\nLogs a message to the widget.\nmessage: The string message to log.\nPyLogger\npython:str\noptional\n\"#f5f6f9\"\n\"#000000\"\n10\n\"Segoe UI\n10"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/logger",
        "href": "toolkit/ui_reference/widgets/logger.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_logger.py_logger.PyLogger",
        "title": "PyLogger > PyLogger > PyLogger",
        "section": "PyLogger > PyLogger",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_logger.py_logger.PyLogger(text_color='#f5f6f9', background_color='#000000', font_size=10, font_family='Segoe UI', height=50)\n\nLogger widget.\n\nInherits QTextEdit and provides a simple interface for logging strings.\n\nParameters\n\ntext_color\n\npython:str, optional\n\nText color. The default is \"#f5f6f9\".\n\nbackground_color: str, optional\n\nColor of background. The default is \"#000000\".\n\nfont_size: float or int, optional\n\nFont size. The default is 10.\n\nfont_family: str, optional\n\nFont size. The default is \"Segoe UI”.\n\nheight: float or int\n\nLogger height. The default is 10.\n\n!! processed by numpydoc !!\n\n\n\nlog(message)\n\nLogs a message to the widget.\n\nParameters:\n\nmessage: The string message to log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/logger",
        "href": "toolkit/ui_reference/widgets/logger.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_logger.py_logger.PyLogger.log",
        "title": "PyLogger > PyLogger > log",
        "section": "PyLogger > log",
        "text": "log(message)\n\nLogs a message to the widget.\n\nParameters:\n\nmessage: The string message to log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#properties-example",
        "title": "Properties example",
        "section": "Properties example",
        "text": "This example shows how to use the Common class, which contains properties models. These properties provide for sharing information through all the workflow.\nProperties example\nCommon"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#add-new-properties",
        "title": "Properties example > Add new properties",
        "section": "Add new properties",
        "text": "Before importing the common module, you can add new properties. First create a file that contains the new properties type, Models. Then add a TOML file that sets the needed default values. Finally, import the properties.\nAdd new properties"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#perform-required-imports",
        "title": "Properties example > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#initialize-toolkit",
        "title": "Properties example > Initialize toolkit",
        "section": "Initialize toolkit",
        "text": "Initialize the toolkit with the new properties.\nInitialize toolkit"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#get-properties",
        "title": "Properties example > Get properties",
        "section": "Get properties",
        "text": "Get the properties.\nGet properties"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#set-property",
        "title": "Properties example > Set property",
        "section": "Set property",
        "text": "Use set_properties to set the new property.\nSet property\nset_properties"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#set-property-directly",
        "title": "Properties example > Set property directly",
        "section": "Set property directly",
        "text": "Set the property directly.\nSet property directly"
    },
    {
        "objectID": "examples/properties_common/api_properties",
        "href": "examples/properties_common/api_properties.html#set-wrong-property",
        "title": "Properties example > Set wrong property",
        "section": "Set wrong property",
        "text": "Set the wrong property. It is not possible to change the property type.\nSet wrong property"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/credits",
        "href": "toolkit/ui_reference/widgets/credits.html#pycredits",
        "title": "PyCredits",
        "section": "PyCredits",
        "text": "Credits information widget with customizable elements.\nInherits QWidget and includes UILabels for credits and version information,\nwith customizable styles.\nCopyright text to be displayed. The default is \"© 2024 MyApp Co.\".\nVersion information text to be displayed. The default is \"0.0.1\".\nBackground color for the widget. The default is \"FFFFFF\".\nFont family name for the text. The default is \"Segoe UI\".\nSize of the text. The default is 9.\nColor of the text. The default is \"#FFFFFF\".\nRadius of the widget’s corners. The default is 9.\nPadding applied to the text in the labels. The default is 10.\nPyCredits\npython:str\noptional\n\"© 2024 MyApp Co.\"\npython:str\noptional\n\"0.0.1\"\npython:str\noptional\n\"FFFFFF\"\npython:str\noptional\n\"Segoe UI\"\npython:int\noptional\n9\npython:str\noptional\n\"#FFFFFF\"\npython:int\noptional\n9\npython:int\noptional\n10"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/credits",
        "href": "toolkit/ui_reference/widgets/credits.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_credits.py_credits.PyCredits",
        "title": "PyCredits > PyCredits > PyCredits",
        "section": "PyCredits > PyCredits",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_credits.py_credits.PyCredits(text='© 2024 MyApp Co.', version='0.0.1', bg='#FFFFFF', font_family='Segoe UI', text_size=9, text_description_color='#00000', radius=8, padding=10)\n\nCredits information widget with customizable elements.\n\nInherits QWidget and includes UILabels for credits and version information,\nwith customizable styles.\n\nParameters\n\ntext\n\npython:str, optional\n\nCopyright text to be displayed. The default is \"© 2024 MyApp Co.\".\n\nversion\n\npython:str, optional\n\nVersion information text to be displayed. The default is \"0.0.1\".\n\nbg\n\npython:str, optional\n\nBackground color for the widget. The default is \"FFFFFF\".\n\nfont_family\n\npython:str, optional\n\nFont family name for the text. The default is \"Segoe UI\".\n\ntext_size\n\npython:int, optional\n\nSize of the text. The default is 9.\n\ntext_description_color\n\npython:str, optional\n\nColor of the text. The default is \"#FFFFFF\".\n\nradius\n\npython:int, optional\n\nRadius of the widget’s corners. The default is 9.\n\npadding\n\npython:int, optional\n\nPadding applied to the text in the labels. The default is 10.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import *\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.credits = PyCredits()\n...         self.credits.show()\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/label",
        "href": "toolkit/ui_reference/widgets/label.html#pylabel",
        "title": "PyLabel",
        "section": "PyLabel",
        "text": "Label widget with customizable elements.\nText to be displayed on the QLabel, by default an empty string.\nColor for the text, in hex format, by default ‘#000000’ (black).\nSize for the font, by default is 8.\nWeight for the font, by default is ‘bold’.\nApply the custom styles defined in the class to the QLabel.\nText color for the QLabel.\nFont size for the QLabel.\nFont weight for the QLabel.\nPyLabel\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:str\noptional\npython:str\npython:int\npython:str"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/label",
        "href": "toolkit/ui_reference/widgets/label.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_label.py_label.PyLabel",
        "title": "PyLabel > PyLabel > PyLabel",
        "section": "PyLabel > PyLabel",
        "text": "class ansys.aedt.toolkits.common.ui.utils.widgets.py_label.py_label.PyLabel(text='', color='#000000', font_size=8, font_weight='bold')\n\nLabel widget with customizable elements.\n\nParameters\n\ntext\n\npython:str, optional\n\nText to be displayed on the QLabel, by default an empty string.\n\ncolor\n\npython:str, optional\n\nColor for the text, in hex format, by default ‘#000000’ (black).\n\nfont_size\n\npython:int, optional\n\nSize for the font, by default is 8.\n\nfont_weight\n\npython:str, optional\n\nWeight for the font, by default is ‘bold’.\n\n!! processed by numpydoc !!\n\n\n\napply_stylesheet(color, font_size, font_weight)\n\nApply the custom styles defined in the class to the QLabel.\n\nParameters\n\ncolor\n\npython:str\n\nText color for the QLabel.\n\nfont_size\n\npython:int\n\nFont size for the QLabel.\n\nfont_weight\n\npython:str\n\nFont weight for the QLabel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/widgets/label",
        "href": "toolkit/ui_reference/widgets/label.html#ansys.aedt.toolkits.common.ui.utils.widgets.py_label.py_label.PyLabel.apply_stylesheet",
        "title": "PyLabel > PyLabel > apply_stylesheet",
        "section": "PyLabel > apply_stylesheet",
        "text": "apply_stylesheet(color, font_size, font_weight)\n\nApply the custom styles defined in the class to the QLabel.\n\nParameters\n\ncolor\n\npython:str\n\nText color for the QLabel.\n\nfont_size\n\npython:int\n\nFont size for the QLabel.\n\nfont_weight\n\npython:str\n\nFont weight for the QLabel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_project_name",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_project_name.html#get_project_name",
        "title": "get_project_name",
        "section": "get_project_name",
        "text": "Get the project name from the project path.\nProject name.\nget_project_name\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_project_name",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_project_name.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_project_name",
        "title": "get_project_name > get_project_name > get_project_name",
        "section": "get_project_name > get_project_name",
        "text": "static AEDTCommon.get_project_name(project_path) -> str\n\nGet the project name from the project path.\n\nReturns\n\npython:str\n\nProject name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/utils",
        "href": "toolkit/ui_reference/utils.html#utils",
        "title": "Utils",
        "section": "Utils",
        "text": "This section describes the classes for common widgets, objects, and layout templates, which\nare all designed for versatile application use. While a description of each class follows,\nyou can click the class name to view detailed API reference information.\n``CommonWindowUtils``\nCommonWindowUtils()\nClass representing a common window with various UI functionalities.\n``LoadImages``\nLoadImages([path])\nA utility class for managing image and icon paths in a PySide6 desktop application.\n``ThemeHandler``\nThemeHandler()\nA class for managing themes in a PySide6 desktop application.\nYou use the CommonWindowUtils class to create custom widgets in the UI. The PyAEDT\nCommon Toolkit also provides the additional widgets described in widgets.\nIn addition to wrapped PySide6 widgets, the PyAEDT Common Toolkit provides these UI\ntemplates to enhance the overall layout:\nleft_column.ui\nright_column.ui\nmain_pages.ui\nThese templates serve as a foundation for creating default layouts. You can explore these templates in the\nui templates\ndirectory of the repository.\nUtils\nCommonWindowUtils\nLoadImages\nThemeHandler\nCommonWindowUtils\nleft_column.ui\nright_column.ui\nmain_pages.ui"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_left_column",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_left_column.html#toggle_left_column",
        "title": "toggle_left_column",
        "section": "toggle_left_column",
        "text": "Toggles the left column of the CommonWindow by starting a box animation.\ntoggle_left_column"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_left_column",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_left_column.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_left_column",
        "title": "toggle_left_column > toggle_left_column > toggle_left_column",
        "section": "toggle_left_column > toggle_left_column",
        "text": "CommonWindowUtils.toggle_left_column()\n\nToggles the left column of the CommonWindow by starting a box animation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.create_animation",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.create_animation.html#create_animation",
        "title": "create_animation",
        "section": "create_animation",
        "text": "Creates an animation with specified parameters.\nThe object on which the animation will be applied.\nThe name of the property to animate.\nThe initial value of the property.\nThe final value of the property.\nThe created animation.\ncreate_animation\nQPropertyAnimation"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.create_animation",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.create_animation.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.create_animation",
        "title": "create_animation > create_animation > create_animation",
        "section": "create_animation > create_animation",
        "text": "static CommonWindowUtils.create_animation(obj, property_name, start_val, end_val)\n\nCreates an animation with specified parameters.\n\nParameters\n\nobj: QObject\n\nThe object on which the animation will be applied.\n\nproperty_name: str\n\nThe name of the property to animate.\n\nstart_val: Any\n\nThe initial value of the property.\n\nend_val: Any\n\nThe final value of the property.\n\nReturns\n\nQPropertyAnimation\n\nThe created animation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_progress",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_progress.html#toggle_progress",
        "title": "toggle_progress",
        "section": "toggle_progress",
        "text": "Toggles the progress row.\ntoggle_progress"
    },
    {
        "objectID": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_progress",
        "href": "toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_progress.html#ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_progress",
        "title": "toggle_progress > toggle_progress > toggle_progress",
        "section": "toggle_progress > toggle_progress",
        "text": "CommonWindowUtils.toggle_progress()\n\nToggles the progress row.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.set_properties.html#set_properties",
        "title": "set_properties",
        "section": "set_properties",
        "text": "Assign the passed data to the internal data model.\nDictionary containing the properties to update.\nTuple indicating the success status and a message.\nset_properties\npython:dict\npython:tuple\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.set_properties.html#ansys.aedt.toolkits.common.backend.api.Common.set_properties",
        "title": "set_properties > set_properties > set_properties",
        "section": "set_properties > set_properties",
        "text": "Common.set_properties(data: Dict[str, Any])\n\nAssign the passed data to the internal data model.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary containing the properties to update.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the success status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> value2 = 2\n>>> toolkit_api.set_properties({\"property1\": \"value1\", \"property2\": value2})\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.wait_to_be_idle.html#wait_to_be_idle",
        "title": "wait_to_be_idle",
        "section": "wait_to_be_idle",
        "text": "Wait for the thread to be idle and ready to accept a new task.\nTime out in seconds. The default is 60.\nwait_to_be_idle\npython:int\noptional\n60"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.wait_to_be_idle.html#ansys.aedt.toolkits.common.backend.api.Common.wait_to_be_idle",
        "title": "wait_to_be_idle > wait_to_be_idle > wait_to_be_idle",
        "section": "wait_to_be_idle > wait_to_be_idle",
        "text": "Common.wait_to_be_idle(timeout: int = 60) -> bool\n\nWait for the thread to be idle and ready to accept a new task.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 60.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.html#aedtcommon",
        "title": "AEDTCommon",
        "section": "AEDTCommon",
        "text": "Provides common functions for controlling AEDT.\nThis class provides basic functions for controlling AEDT and properties to share\nbetween the backend and UI.\nUpdated properties.\nAEDTCommon.aedt_sessions()\nGet information for the active AEDT sessions.\nAEDTCommon.connect_aedt()\nConnect to an existing AEDT session.\nAEDTCommon.connect_design([app_name])\nConnect to an application design.\nAEDTCommon.export_aedt_model([obj_list, ...])\nExport the model in the OBJ format and then encode the file if the encode parameter is enabled.\nAEDTCommon.get_design_names()\nGet the design names for a specific project.\nAEDTCommon.get_project_name(project_path)\nGet the project name from the project path.\nAEDTCommon.get_properties()\nGet the toolkit properties.\nAEDTCommon.get_thread_status()\nGet the toolkit thread status.\nAEDTCommon.installed_aedt_version()\nGet the installed AEDT versions.\nAEDTCommon.is_aedt_connected()\nCheck if AEDT is connected.\nAEDTCommon.launch_aedt()\nLaunch AEDT.\nAEDTCommon.launch_thread(process)\nLaunch the thread.\nAEDTCommon.open_project([project_name])\nOpen an AEDT project.\nAEDTCommon.release_aedt([close_projects, ...])\nRelease AEDT.\nAEDTCommon.save_project([project_path, ...])\nSave the project.\nAEDTCommon.serialize_obj_base64(file_path)\nEncode a bytes-like object.\nAEDTCommon.set_properties(data)\nAssign the passed data to the internal data model.\nAEDTCommon.wait_to_be_idle([timeout])\nWait for the thread to be idle and ready to accept a new task.\nAEDTCommon\nbackend.models.Properties\nAEDTCommon.aedt_sessions\nAEDTCommon.connect_aedt\nAEDTCommon.connect_design\nAEDTCommon.export_aedt_model\nencode\nAEDTCommon.get_design_names\nAEDTCommon.get_project_name\nAEDTCommon.get_properties\nAEDTCommon.get_thread_status\nAEDTCommon.installed_aedt_version\nAEDTCommon.is_aedt_connected\nAEDTCommon.launch_aedt\nAEDTCommon.launch_thread\nAEDTCommon.open_project\nAEDTCommon.release_aedt\nAEDTCommon.save_project\nAEDTCommon.serialize_obj_base64\nAEDTCommon.set_properties\nAEDTCommon.wait_to_be_idle"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.html#ansys.aedt.toolkits.common.backend.api.AEDTCommon",
        "title": "AEDTCommon > AEDTCommon > AEDTCommon",
        "section": "AEDTCommon > AEDTCommon",
        "text": "class ansys.aedt.toolkits.common.backend.api.AEDTCommon(backend_properties: ThreadManager | None = None)\n\nProvides common functions for controlling AEDT.\n\nThis class provides basic functions for controlling AEDT and properties to share\nbetween the backend and UI.\n\nParameters\n\nbackend_properties\n\nbackend.models.Properties\n\nUpdated properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> msg = toolkit_api.launch_aedt()\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nAEDTCommon.aedt_sessions()\n\nGet information for the active AEDT sessions.\n\nAEDTCommon.connect_aedt()\n\nConnect to an existing AEDT session.\n\nAEDTCommon.connect_design([app_name])\n\nConnect to an application design.\n\nAEDTCommon.export_aedt_model([obj_list, ...])\n\nExport the model in the OBJ format and then encode the file if the encode parameter is enabled.\n\nAEDTCommon.get_design_names()\n\nGet the design names for a specific project.\n\nAEDTCommon.get_project_name(project_path)\n\nGet the project name from the project path.\n\nAEDTCommon.get_properties()\n\nGet the toolkit properties.\n\nAEDTCommon.get_thread_status()\n\nGet the toolkit thread status.\n\nAEDTCommon.installed_aedt_version()\n\nGet the installed AEDT versions.\n\nAEDTCommon.is_aedt_connected()\n\nCheck if AEDT is connected.\n\nAEDTCommon.launch_aedt()\n\nLaunch AEDT.\n\nAEDTCommon.launch_thread(process)\n\nLaunch the thread.\n\nAEDTCommon.open_project([project_name])\n\nOpen an AEDT project.\n\nAEDTCommon.release_aedt([close_projects, ...])\n\nRelease AEDT.\n\nAEDTCommon.save_project([project_path, ...])\n\nSave the project.\n\nAEDTCommon.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nAEDTCommon.set_properties(data)\n\nAssign the passed data to the internal data model.\n\nAEDTCommon.wait_to_be_idle([timeout])\n\nWait for the thread to be idle and ready to accept a new task.\n\n"
    }
]