[{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.set_properties.html#set_properties","title":"set_properties","text":"set_properties\n\n\n\nAEDTCommon.set_properties(data: Dict[str, Any])\n\nAssign the passed data to the internal data model.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary containing the properties to update.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the success status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> value2 = 2\n>>> toolkit_api.set_properties({\"property1\": \"value1\", \"property2\": value2})"},{"objectID":"Home","href":"getting_started/installation.html#installation","title":"Installation","text":"Installation\n\nThe PyAEDT Common Toolkit can be installed like any other open source package\nand then added as a dependency to a new toolkit project.\n\nFrom PyPI, you can either install both the backend and user interface (UI)\nmethods or install only the backend methods.\n\nTo install both the backend and UI methods, run this command:\n\nIf you only need the common API, install only the backend methods with this\ncommand:"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.image_path.html#image_path","title":"image_path","text":"image_path\n\n\n\nLoadImages.image_path(file_name)\n\nGet the full path for the specified image file.\n\nParameters\n\nfile_name\n\npython:str\n\nThe name of the image file.\n\nReturns\n\npython:str\n\nThe full path to the specified image file."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_progress.html#update_progress","title":"update_progress","text":"update_progress\n\n\n\nCommonWindowUtils.update_progress(progress_value)\n\nClear all layout."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/window.html#pywindow","title":"PyWindow","text":"PyWindow\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_window.py_window.PyWindow(parent, margin=0, spacing=2, bg_color='#2c313c', text_color='#fff', text_font=\"9pt 'Segoe UI'\", border_radius=10, border_size=2, border_color='#343b48')\n\nCustom window frame widget with customizable styling and drop shadow effect.\n\nInherits QFrame and provides a customizable window frame.\n\nParameters\n\nparent\n\nQWidget\n\nThe parent widget for this PyWindow.\n\nmargin\n\npython:int, optional\n\nThe margin size around the window frame. Default is 0.\n\nspacing\n\npython:int, optional\n\nThe spacing between layout items. Default is 2.\n\nbg_color\n\npython:str, optional\n\nThe background color of the window frame. Default is “#2c313c”.\n\ntext_color\n\npython:str, optional\n\nThe text color of the window frame. Default is “#fff”.\n\ntext_font\n\npython:str, optional\n\nThe font of the text in the window frame. Default is “9pt ‘Segoe UI’”.\n\nborder_radius\n\npython:int, optional\n\nThe border radius of the window frame corners. Default is 10.\n\nborder_size\n\npython:int, optional\n\nThe size of the border around the window frame. Default is 2.\n\nborder_color\n\npython:str, optional\n\nThe color of the border around the window frame. Default is “#343b48”.\n\n\n\nset_stylesheet(bg_color=None, border_radius=None, border_size=None, border_color=None, text_color=None, text_font=None)\n\nSets the style sheet of the PyWindow with customizable attributes.\n\nParameters\n\nbg_color\n\npython:str, optional\n\nThe background color of the window frame.\n\nborder_radius\n\npython:int, optional\n\nThe border radius of the window frame corners.\n\nborder_size\n\npython:int, optional\n\nThe size of the border around the window frame.\n\nborder_color\n\npython:str, optional\n\nThe color of the border around the window frame.\n\ntext_color\n\npython:str, optional\n\nThe text color of the window frame.\n\ntext_font\n\npython:str, optional\n\nThe font of the text in the window frame.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QMainWindow\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import PyWindow\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.window = PyWindow(self)\n...         self.setCentralWidget(self.window)\n...         self.show()\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_design.html#connect_design","title":"connect_design","text":"connect_design\n\n\n\nAEDTCommon.connect_design(app_name: str | None = None)\n\nConnect to an application design.\n\nIf a design exists, this method uses the active project and design. If a design does not exist,\nthis method creates a design of the specified type. If no application is specified, the default is \"HFSS\".\n\nParameters\n\napp_name\n\npython:str\n\nAEDT application name. Options are:\n\n\"Circuit\"\n\n\"EMIT\"\n\n\"HFSS\"\n\n\"HFSS3DLayout\"\n\n\"Icepak\"\n\n\"Maxwell2D\"\n\n\"Maxwell3D\"\n\n\"Q2D\"\n\n\"Q3D\"\n\n\"Rmxprt\"\n\n\"TwinBuilder\"\n\n\"Mechanical\"\n\nReturns\n\nbool\n\nReturns True if the connection to a design is successful, False otherwise.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_design()"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.installed_aedt_version.html#installed_aedt_version","title":"installed_aedt_version","text":"installed_aedt_version\n\n\n\nstatic AEDTCommon.installed_aedt_version() -> List\n\nGet the installed AEDT versions.\n\nReturns\n\npython:list\n\nList of installed AEDT versions.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.installed_aedt_version()\n[\"2024.2\", \"2025.1\", \"2025.2\"]"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_combobox.html#add_combobox","title":"add_combobox","text":"add_combobox\n\n\n\nCommonWindowUtils.add_combobox(layout, height=40, width=None, label='label1', combobox_list=None, font_size=12)\n\nAdds a label and combobox to a layout.\n\nParameters\n\nlayout: QLayout\n\nThe layout object to which the label and combobox will be added.\n\nheight: int, optional\n\nThe height of the label and combobox widgets. Default is 40.\n\nwidth: list, optional\n\nThe width of the label and combobox widgets. If not provided, a default width of [100, 100] will be used.\n\nlabel: str, optional\n\nThe text to be displayed on the label widget. Default is ‘label1’.\n\ncombobox_list: list, optional\n\nA list of items to be displayed in the combobox. If not provided, a default list of [‘1’, ‘2’] will be used.\n\nfont_size: int, optional\n\nThe font size of the label widget. Default is 12.\n\nReturns\n\npython:list\n\nA list containing the layout row object, label object, and combobox object."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.launch_thread.html#launch_thread","title":"launch_thread","text":"launch_thread\n\n\n\nCommon.launch_thread(process, *args) -> ThreadManager\n\nLaunch the thread."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_properties.html#get_properties","title":"get_properties","text":"get_properties\n\n\n\nCommon.get_properties() -> Dict[str, str]\n\nGet the toolkit properties.\n\nReturns\n\npython:dict\n\nDictionary containing the toolkit properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_properties()\n{\"property1\": value1, \"property2\": value2}"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_left_column_visible.html#is_left_column_visible","title":"is_left_column_visible","text":"is_left_column_visible\n\n\n\nCommonWindowUtils.is_left_column_visible()\n\nCheck if the left column is visible.\n\nReturns\n\nbool\n\nTrue if the left column is visible, False otherwise."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.is_aedt_connected.html#is_aedt_connected","title":"is_aedt_connected","text":"is_aedt_connected\n\n\n\nAEDTCommon.is_aedt_connected() -> Tuple[bool, str]\n\nCheck if AEDT is connected.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the connection status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.is_aedt_connected()\n(True, \"toolkit connected to process <process_id> on Grpc <grpc_port>\")\n>>> toolkit_api.release_aedt()"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_textbox.html#add_textbox","title":"add_textbox","text":"add_textbox\n\n\n\nCommonWindowUtils.add_textbox(layout, height=40, width=None, label='label1', initial_text=None, font_size=12)\n\nAdds a label and textbox to a layout.\n\nParameters\n\nlayout: QLayout\n\nThe layout object to which the label and combobox will be added.\n\nheight: int, optional\n\nThe height of the label and combobox widgets. The default is 40.\n\nwidth: list, optional\n\nThe width of the label and combobox widgets. If not provided, a default width of [100, 100] will be used.\n\nlabel: str, optional\n\nThe text to be displayed on the label widget. The default is ‘“label1”’.\n\ninitial_text: str, optional\n\nText to be displayed in the textbox.\n\nfont_size: int, optional\n\nThe font size of the label widget. The default is 12.\n\nReturns\n\npython:list\n\nA list containing the layout row object, label object, and combobox object."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.serialize_obj_base64.html#serialize_obj_base64","title":"serialize_obj_base64","text":"serialize_obj_base64\n\n\n\nstatic AEDTCommon.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the file to serialize.\n\nReturns\n\nbytes\n\nEncoded data."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.aedt_sessions.html#aedt_sessions","title":"aedt_sessions","text":"aedt_sessions\n\n\n\nEDBCommon.aedt_sessions() -> Dict[int, int]\n\nGet information for the active AEDT sessions.\n\nReturns\n\npython:dict\n\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.aedt_sessions()\n{pid1: grpc_port1, pid2: grpc_port2}"},{"objectID":"Home","href":"toolkit/ui_reference/widgets/label.html#pylabel","title":"PyLabel","text":"PyLabel\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_label.py_label.PyLabel(text='', color='#000000', font_size=8, font_weight='bold')\n\nLabel widget with customizable elements.\n\nParameters\n\ntext\n\npython:str, optional\n\nText to be displayed on the QLabel, by default an empty string.\n\ncolor\n\npython:str, optional\n\nColor for the text, in hex format, by default ‘#000000’ (black).\n\nfont_size\n\npython:int, optional\n\nSize for the font, by default is 8.\n\nfont_weight\n\npython:str, optional\n\nWeight for the font, by default is ‘bold’.\n\n\n\napply_stylesheet(color, font_size, font_weight)\n\nApply the custom styles defined in the class to the QLabel.\n\nParameters\n\ncolor\n\npython:str\n\nText color for the QLabel.\n\nfont_size\n\npython:int\n\nFont size for the QLabel.\n\nfont_weight\n\npython:str\n\nFont weight for the QLabel."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/left_menu.html#pyleftmenu","title":"PyLeftMenu","text":"PyLeftMenu\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_left_menu.py_left_menu.PyLeftMenu(parent=None, app_parent=None, dark_one='#1b1e23', dark_three='#21252d', dark_four='#272c36', bg_one='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', context_color='#568af2', text_foreground='#8a95aa', text_active='#dce1ec', radius=8, minimum_width=50, maximum_width=240, icon_path='icon_menu.svg', icon_path_close='icon_menu_close.svg', toggle_text='Hide Menu', toggle_tooltip='Show menu')\n\nCustom widget representing a left menu with toggle button, top and bottom layouts, and animated toggle behavior.\n\nParameters\n\nparent: QWidget, optional\n\nThe parent widget.\n\napp_parent: QWidget, optional\n\nThe parent widget of the application.\n\ndark_one: str, optional\n\nColor representing a dark shade.\n\ndark_three: str, optional\n\nColor representing a darker shade.\n\ndark_four: str, optional\n\nColor representing an even darker shade.\n\nbg_one: str, optional\n\nBackground color of the left menu.\n\nicon_color: str, optional\n\nColor of the icons in the left menu.\n\nicon_color_hover: str, optional\n\nColor of the icons when hovered.\n\nicon_color_pressed: str, optional\n\nColor of the icons when pressed.\n\nicon_color_active: str, optional\n\nColor of the icons in an active state.\n\ncontext_color: str, optional\n\nColor representing a context or active state.\n\ntext_foreground: str, optional\n\nColor of the text in the left menu.\n\ntext_active: str, optional\n\nColor of the text in an active state.\n\nradius: int, optional\n\nBorder radius of the left menu.\n\nminimum_width: int, optional\n\nMinimum width of the left menu. The default is 50.\n\nmaximum_width: int, optional\n\nMaximum width of the left menu. The default is 240.\n\nicon_path: str, optional\n\nPath to the icon image file for the toggle button.\n\nicon_path_close: str, optional\n\nPath to the icon image file for the toggle button when the menu is closed.\n\ntoggle_text: str, optional\n\nText for the toggle button.\n\ntoggle_tooltip: str, optional\n\nTooltip text for the toggle button.\n\n\n\nadd_menus(parameters)\n\nAdd menus to the left menu.\n\nParameters\n\nparameters: list\n\nList of dictionaries containing parameters for each menu item.\n\n\n\nbtn_clicked()\n\nEmit signal when a menu button is clicked.\n\n\n\nbtn_released()\n\nEmit signal when a menu button is released.\n\n\n\ndeselect_all()\n\nDeactivate all menu buttons.\n\n\n\ndeselect_all_tab()\n\nDeactivate all menu tabs.\n\n\n\nselect_only_one(widget: str)\n\nSet the active state for a specific menu button and deactivate others.\n\nParameters\n\nwidget\n\npython:str\n\nID of the menu button to set as active.\n\n\n\nselect_only_one_tab(widget: str)\n\nSet the active tab state for a specific menu button and deactivate others.\n\nParameters\n\nwidget\n\npython:str\n\nID of the menu button to set as active tab.\n\n\n\nset_visible_button(widget: str, visible: bool = True)\n\nSets the visibility of a QPushButton widget within the UI.\n\nThis method searches for a QPushButton widget by its object name and sets its visibility.\n\nParameters\n\nwidget\n\npython:str\n\nThe object name of the QPushButton to modify.\n\nvisible\n\nbool, optional\n\nA boolean indicating whether the button should be visible. The default is False.\n\n\n\nsetup_ui()\n\nSet up the user interface for the left menu.\n\n\n\ntoggle_animation()\n\nToggle animation for hiding/showing the left menu."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/icon.html#pyicon","title":"PyIcon","text":"PyIcon\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_icon.py_icon.PyIcon(icon_path, icon_color='#000000')\n\nIcon widget with customizable elements.\n\nThe icon and color can be customized during initialization.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str, optional\n\nThe color of the icon in hex color code. The default is \"#000000\".\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QVBoxLayout, QPushButton\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class Example(QWidget):\n>>>     def __init__(self):\n>>>         super().__init__()\n>>>         layout = QVBoxLayout(self)\n>>>         layout.addWidget(QPushButton(\"Button 1\"))\n>>>         layout.addWidget(PyIcon('path_to_icon.svg', \"#FF0000\"))\n>>>         layout.addWidget(QPushButton(\"Button 2\"))\n\n>>> if __name__ == \"__main__\":\n>>>     app = QApplication([])\n>>>     window = Example()\n>>>     window.show()\n>>>     app.exec()\n\n\n\nset_icon(icon_path, icon_color=None)\n\nSet icon of the PyIcon widget.\n\nThe icon and color can be customized during initialization.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str, optional\n\nThe color of the icon in hex color code. The default is \"#000000\"."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.html#themehandler","title":"ThemeHandler","text":"ThemeHandler\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler\n\nA class for managing themes in a PySide6 desktop application.\n\nThis class handles the loading, exporting, and management of themes used in the application.\n\nExamples\n\n>>> theme_handler = ThemeHandler()\n>>> theme_handler.export_theme()\n\nMethods\n\n"},{"objectID":"Home","href":"toolkit/ui_reference/widgets/right_column.html#pycombobox","title":"PyComboBox","text":"PyComboBox\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_right_column.py_right_column.PyRightColumn(text_title, text_title_size, text_title_color, dark_one, bg_color, btn_color, btn_color_hover, btn_color_pressed, icon_path, icon_color, icon_color_hover, icon_color_pressed, context_color, radius=8)\n\nCustom widget representing a right column with a title, an icon, and a content area.\n\nParameters\n\ntext_title\n\npython:str\n\nThe title text for the right column.\n\ntext_title_size\n\npython:int\n\nThe font size of the title text.\n\ntext_title_color\n\npython:str\n\nThe color of the title text.\n\ndark_one\n\npython:str\n\nColor representing a dark shade.\n\nbg_color\n\npython:str\n\nBackground color of the right column.\n\nbtn_color\n\npython:str\n\nColor of the buttons in the right column.\n\nbtn_color_hover\n\npython:str\n\nColor of the buttons when hovered.\n\nbtn_color_pressed\n\npython:str\n\nColor of the buttons when pressed.\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str\n\nColor of the icon.\n\nicon_color_hover\n\npython:str\n\nColor of the icon when hovered.\n\nicon_color_pressed\n\npython:str\n\nColor of the icon when pressed.\n\ncontext_color\n\npython:str\n\nColor representing a context or active state.\n\nradius\n\npython:int\n\nBorder radius of the right column.\n\n\n\nsetup_ui()\n\nSet up the user interface for the title bar."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.read_theme.html#read_theme","title":"read_theme","text":"read_theme\n\n\n\nThemeHandler.read_theme() -> None\n\nRead and load theme settings from the theme file.\n\nReads the theme settings from the theme file in JSON format and updates the internal state."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.setup_animation.html#setup_animation","title":"setup_animation","text":"setup_animation\n\n\n\nCommonWindowUtils.setup_animation(left_start, right_start, left_end, right_end)\n\nSets up an animation for the left and right columns of the UI.\n\nParameters\n\nleft_start: int\n\nThe starting value for the left box animation.\n\nright_start: int\n\nThe starting value for the right box animation.\n\nleft_end: int\n\nThe ending value for the left box animation.\n\nright_end: int\n\nThe ending value for the right box animation."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_right_column_menu.html#set_right_column_menu","title":"set_right_column_menu","text":"set_right_column_menu\n\n\n\nCommonWindowUtils.set_right_column_menu(title)\n\nSets the title of the right column menu.\n\nParameters\n\ntitle: str\n\nThe title to be set."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_thread.html#launch_thread","title":"launch_thread","text":"launch_thread\n\n\n\nAEDTCommon.launch_thread(process, *args) -> ThreadManager\n\nLaunch the thread."},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nEnd-to-end examples show how to use the three classes in the backend API of the PyAEDT Common Toolkit\nand its REST API."},{"objectID":"Home","href":"examples/index.html#the-aedtcommon-class","title":"Examples > The AEDTCommon class","text":"The AEDTCommon class\n\nThese examples show how to use the AEDTCommon class of the backend API:\n\n"},{"objectID":"Home","href":"examples/index.html#the-edbcommon-class","title":"Examples > The EDBCommon class","text":"The EDBCommon class\n\nThese examples show how to use the EDBCommon class of the backend API:\n\n"},{"objectID":"Home","href":"examples/index.html#the-common-class","title":"Examples > The Common class","text":"The Common class\n\nThese examples show how to use the Common class of the backend API:\n\n"},{"objectID":"Home","href":"examples/index.html#rest-api","title":"Examples > REST API","text":"REST API\n\nFor an example of using the REST API for the PyAEDT Common Toolkit, see the\nrest_api_aedt_example.py\nfile in the repository."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.open_project.html#open_project","title":"open_project","text":"open_project\n\n\n\nAEDTCommon.open_project(project_name=None)\n\nOpen an AEDT project.\n\nParameters\n\nproject_name\n\npython:str, optional\n\nFull path to the project.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.open_project(\"path/to/file\")\n>>> toolkit_api.release_aedt()"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.clear_layout.html#clear_layout","title":"clear_layout","text":"clear_layout\n\n\n\nCommonWindowUtils.clear_layout(layout)\n\nClear all layout."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/combobox.html#pycombobox","title":"PyComboBox","text":"PyComboBox\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_combo_box.py_combo_box.PyComboBox(text_list, radius=5, bg_color='#FFFFFF', bg_color_hover='#FFFFFF', text_color='#000000', font_size=12)\n\nCombo box widget with customizable elements.\n\nInherits QComboBox and includes customizable elements including\ntext, radius, color, and background colors in different states.\n\nParameters\n\ntext_list\n\npython:list\n\nList of options in combo box.\n\nradius\n\npython:int, optional\n\nRadius of combo box corners. The default is 5.\n\nbg_color\n\npython:str, optional\n\nBackground color of the combo box. The default is \"#FFFFFF\".\n\nbg_color_hover\n\npython:str, optional\n\nBackground color when mouse hovers over the combo box. The default is \"#FFFFFF\".\n\ntext_color\n\npython:str, optional\n\nText color in the combo box. The default is \"#000000\".\n\nfont_size\n\npython:int, optional\n\nThe font size of the text on the button.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import *\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.combo_box = PyComboBox(text_list=['Option 1', 'Option 2'], radius=5)\n...         self.combo_box.show()\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_icon_button.html#add_icon_button","title":"add_icon_button","text":"add_icon_button\n\n\n\nCommonWindowUtils.add_icon_button(layout, icon, height=40, width=None, text='lineedit')\n\nAdd icon button.\n\nParameters\n\nlayout: QLayout\n\nThe layout to which the icon button and line edit will be added.\n\nicon: QIcon\n\nThe path to the icon that will be displayed on the button.\n\nheight: int, optional\n\nThe height of the icon button and line edit. Default is 40.\n\nwidth: list, optional\n\nThe width of the icon button. If not provided, it will be set to a default value.\n\ntext: str, optional\n\nThe placeholder text for the line edit. Default is ‘lineedit’.\n\nReturns\n\npython:list\n\nA list containing the layout row object, the button object, and the line edit object."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/push_button.html#pypushbutton","title":"PyPushButton","text":"PyPushButton\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_push_button.py_push_button.PyPushButton(text, radius, color, bg_color, bg_color_hover, bg_color_pressed, font_size, parent=None)\n\nInitialize the PyPushButton.\n\nParameters\n\ntext\n\npython:str\n\nThe title text for the right column.\n\nradius\n\npython:int\n\nThe border radius of the button.\n\ncolor\n\npython:str\n\nThe text color of the button.\n\nbg_color\n\npython:str\n\nThe background color of the button.\n\nbg_color_hover\n\npython:int\n\nThe background color of the button when hovered.\n\nbg_color_pressed\n\npython:str\n\nThe background color of the button when pressed.\n\nfont_size\n\npython:int\n\nThe font size of the text on the button.\n\nparent\n\npython:str, optional\n\nThe parent widget. The default is None."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.installed_aedt_version.html#installed_aedt_version","title":"installed_aedt_version","text":"installed_aedt_version\n\n\n\nstatic EDBCommon.installed_aedt_version() -> List\n\nGet the installed AEDT versions.\n\nReturns\n\npython:list\n\nList of installed AEDT versions.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.installed_aedt_version()\n[\"2024.2\", \"2025.1\", \"2025.2\"]"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.wait_to_be_idle.html#wait_to_be_idle","title":"wait_to_be_idle","text":"wait_to_be_idle\n\n\n\nAEDTCommon.wait_to_be_idle(timeout: int = 60) -> bool\n\nWait for the thread to be idle and ready to accept a new task.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 60.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.load_edb.html#load_edb","title":"load_edb","text":"load_edb\n\n\n\nEDBCommon.load_edb(edb_path=None)\n\nLoad the EDB project.\n\nParameters\n\nedb_path\n\npython:str, optional\n\nFull path to the aedb folder.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n>>> toolkit_api.close_edb()"},{"objectID":"Home","href":"getting_started/architecture.html#architecture","title":"Architecture","text":"Architecture\n\nThe AEDT Common Toolkit provides a common API for creating new AEDT toolkits.\nThereby standardizing their implementations.\n\nThe API provides methods for connecting to an existing AEDT session, opening an existing\nAEDT project, and initializing a new AEDT session, which are basic capabilities required\nby any toolkit.\n\nThe architecture is divided in two main parts:\n\nBackend: Consists of the API and REST API. The API is built on PyAEDT. The REST API uses\nFlask to facilitate the creation of a REST\nAPI that enables interactions between different services through HTTP requests. By leveraging\nFlask, the toolkit becomes interface-agnostic, allowing flexibility in choosing different user\ninterfaces such as a Web UI.\n\nUser Interface: Provides UI creation capability using\nPyside6. Pyside6 includes a designer tool\nfor creating UIs translated directly to Python."},{"objectID":"Home","href":"getting_started/architecture.html#toolkit-architecture-diagram","title":"Architecture > Toolkit architecture diagram","text":"Toolkit architecture diagram"},{"objectID":"Home","href":"getting_started/architecture.html#toolkit-backend-and-ui","title":"Architecture > Toolkit backend and UI","text":"Toolkit backend and UI\n\nThe repository for the PyAEDT Common Toolkit is structured as follows:\n\n.github: GitHub Action configuration.\n\ndoc: Documentation structure.\n\ncommon:\nToolkit code, split into backend and UI.\n\nbackend:\n\nNon-user-facing part of the toolkit for handling requests and preparing data for the UI. Key files include:\n\nrest_api.py: Defines Flask entrypoints.\n\napi.py: Defines the toolkit API.\n\ncommon_properties.toml: Defines common backend properties.\n\nmodels.py: Defines the class for storing backend properties.\n\nui: UI part of\nthe toolkit. Key files include:\n\ncommon_properties.toml: Defines common UI properties.\n\nmodels.py: Defines the class for storing UI properties.\n\ntests: Folder containing the backend\nunit tests."},{"objectID":"Home","href":"getting_started/architecture.html#models-and-properties","title":"Architecture > Models and properties","text":"Models and properties\n\nThe models.py\nfile stores the backend properties that are shared between the backend and UI.\nProperties are loaded by loading the content of the properties in the class properties.\n\nTo understand how the backend and UI interact, see the actions_generic.py\nfile in the repository. For example, when an event is triggered by the frontend, the\nget_properties()\nmethod builds the GET HTTP request to send to the backend to retrieve properties from the backend.\nThe event of setting up a property calls the set_properties()\nmethod, which builds the PUT HTTP request that is sent to the backend."},{"objectID":"Home","href":"getting_started/architecture.html#api","title":"Architecture > API","text":"API\n\nThe ../toolkit/api contains three classes, Common, AEDTCommon, and EDBCommon, which provide methods for\ncontrolling the toolkit workflow."},{"objectID":"Home","href":"getting_started/architecture.html#rest-api","title":"Architecture > REST API","text":"REST API\n\nREST APIs are standard web interfaces allowing clients to communicate with services via HTTP requests.\nJSON is the standard for transferring data. In fact, REST APIs accept JSON for request payload and also\nsend responses to JSON.\n\nIn the client-server architecture model, the client sends the request to the server to fetch some information.\nServer-side technologies decode JSON information and transmit back the response to the client. This interaction\nis handled by the HTTP protocol."},{"objectID":"Home","href":"getting_started/architecture.html#ui-and-backend-interaction","title":"Architecture > UI and backend interaction","text":"UI and backend interaction\n\nThe UI sends HTTP requests to retrieve data, while the backend returns appropriate results.\n\nThe toolkit uses CRUD (Create, Read, Update & Delete) operations that are simply HTTP request methods\nthat specify the action to perform through the request."},{"objectID":"Home","href":"getting_started/architecture.html#ui","title":"Architecture > UI","text":"UI\n\nFor more information on the UI, see ../toolkit/ui."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.close_edb.html#close_edb","title":"close_edb","text":"close_edb\n\n\n\nEDBCommon.close_edb()\n\nClose the EDB project.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n>>> toolkit_api.close_edb()"},{"objectID":"Home","href":"toolkit/ui_reference/utils.html#utils","title":"Utils","text":"Utils\n\nThis section describes the classes for common widgets, objects, and layout templates, which\nare all designed for versatile application use. While a description of each class follows,\nyou can click the class name to view detailed API reference information.\n\n``CommonWindowUtils``\n\n\n\n``LoadImages``\n\n\n\n``ThemeHandler``\n\n\n\nYou use the CommonWindowUtils class to create custom widgets in the UI. The PyAEDT\nCommon Toolkit also provides the additional widgets described in widgets.\n\nIn addition to wrapped PySide6 widgets, the PyAEDT Common Toolkit provides these UI\ntemplates to enhance the overall layout:\n\nleft_column.ui\n\nright_column.ui\n\nmain_pages.ui\n\nThese templates serve as a foundation for creating default layouts. You can explore these templates in the\nui templates\ndirectory of the repository.\n\n"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.export_aedt_model.html#export_aedt_model","title":"export_aedt_model","text":"export_aedt_model\n\n\n\nAEDTCommon.export_aedt_model(obj_list=None, export_path=None, export_as_single_objects=True, air_objects=False, encode=True)\n\nExport the model in the OBJ format and then encode the file if the encode parameter is enabled.\n\nParameters\n\nobj_list\n\npython:list, optional\n\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\n\nexport_path\n\npython:str, optional\n\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\n\nexport_as_single_objects\n\nbool, optional\n\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\n\nair_objects\n\nbool, optional\n\nWhether to export air and vacuum objects. The default is False.\n\nencode\n\nbool, optional\n\nWhether to encode the file. The default is True.\n\nReturns\n\npython:list or python:dict\n\nList of exported OBJ files or encoded data."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/title_button.html#pytitlebutton","title":"PyTitleButton","text":"PyTitleButton\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_button.PyTitleButton(parent, app_parent=None, tooltip_text='', btn_id=None, width=30, height=30, radius=8, bg_color='#343b48', bg_color_hover='#3c4454', bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', icon_path='no_icon.svg', dark_one='#1b1e23', context_color='#568af2', text_foreground='#8a95aa', is_active=False)\n\nCustomizable title button.\n\nInherits QPushButton and provides a customizable title button.\n\nParameters\n\nparent\n\nQWidget\n\nParent widget.\n\napp_parent\n\nQWidget, optional\n\nApplication parent widget. The default is None.\n\ntooltip_text\n\npython:str, optional\n\nTooltip text for the button. The default is an empty string.\n\nbtn_id\n\npython:str, optional\n\nButton ID. The default is None.\n\nwidth\n\npython:int, optional\n\nWidth of the button. The default is 30.\n\nheight\n\npython:int, optional\n\nHeight of the button. The default is 30.\n\nradius\n\npython:int, optional\n\nBorder radius of the button. The default is 8.\n\nbg_color\n\npython:str, optional\n\nBackground color of the button. The default is \"#343b48\".\n\nbg_color_hover\n\npython:str, optional\n\nBackground color when the mouse hovers over the button. The default is \"#3c4454\".\n\nbg_color_pressed\n\npython:str, optional\n\nBackground color when the button is pressed. The default is \"#2c313c\".\n\nicon_color\n\npython:str, optional\n\nIcon color of the button. The default is \"#c3ccdf\".\n\nicon_color_hover\n\npython:str, optional\n\nIcon color when the mouse hovers over the button. The default is \"#dce1ec\".\n\nicon_color_pressed\n\npython:str, optional\n\nIcon color when the button is pressed. The default is \"#edf0f5\".\n\nicon_color_active\n\npython:str, optional\n\nIcon color when the button is active. The default is \"#f5f6f9\".\n\nicon_path\n\npython:str, optional\n\nPath to the icon image. The default is \"no_icon.svg\".\n\ndark_one\n\npython:str, optional\n\nDark color for styling. The default is \"#1b1e23\".\n\ncontext_color\n\npython:str, optional\n\nContext color for styling. The default is \"#568af2\".\n\ntext_foreground\n\npython:str, optional\n\nText foreground color. The default is \"#8a95aa\".\n\nis_active\n\nbool, optional\n\nInitial state of the button (active or not). The default is False.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QWidget\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import PyTitleButton\n\n>>> class MyApp(QWidget):\n...     def __init__(self):\n...         super().__init__()\n...         self.title_button = PyTitleButton(self, tooltip_text=\"Click me!\")\n...         self.title_button.clicked.connect(self.on_button_clicked)\n...         self.title_button.released.connect(self.on_button_released)\n...\n...     def on_button_clicked(self):\n...         print(\"Button Clicked!\")\n...\n...     def on_button_released(self):\n...         print(\"Button Released!\")\n...\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n\n\nchange_style(event)\n\nChange the style of the button based on the given event.\n\nParameters\n\nevent\n\nQEvent\n\nThe event triggering the style change.\n\n\n\nenterEvent(event)\n\nEvent triggered when the mouse enters the button.\n\nParameters\n\nevent\n\nQEvent\n\nMouse enter event.\n\n\n\nicon_paint(qp, image, rect)\n\nDraw the icon with specified colors.\n\nParameters\n\nqp\n\nQPainter\n\nThe QPainter object.\n\nimage\n\npython:str\n\nPath to the icon image.\n\nrect\n\nQRect\n\nRectangle representing the button’s area.\n\n\n\nis_active()\n\nCheck if the button is in an active state.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n\n\nleaveEvent(event)\n\nEvent triggered when the mouse leaves the button.\n\nParameters\n\nevent\n\nQEvent\n\nMouse leave event.\n\n\n\nmousePressEvent(event)\n\nEvent triggered when the left mouse button is pressed.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n\n\nmouseReleaseEvent(event)\n\nEvent triggered when the left mouse button is released.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n\n\nmove_tooltip()\n\nMove the tooltip to the appropriate position relative to the button.\n\n\n\npaintEvent(event)\n\nPaint the button and its icon.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n\n\nset_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nTrue to set the button as active, False otherwise.\n\n\n\nset_icon(icon_path)\n\nSet the icon of the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_right_column_visible.html#is_right_column_visible","title":"is_right_column_visible","text":"is_right_column_visible\n\n\n\nCommonWindowUtils.is_right_column_visible()\n\nChecks if the right column is visible.\n\nReturns\n\nbool\n\nTrue if the right column is visible, False otherwise."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.html#loadimages","title":"LoadImages","text":"LoadImages\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages(path=None)\n\nA utility class for managing image and icon paths in a PySide6 desktop application.\n\nThis class facilitates the retrieval of image and icon paths, allowing the application to access\nand display graphical assets.\n\nParameters\n\npath\n\npython:str, optional\n\nThe base path to the directory containing images. If not provided, the default path is the directory\nwhere the script is located.\n\nExamples\n\n>>> image_loader = LoadImages()\n>>> icon_path = image_loader.icon_path(\"my_icon.png\")\n>>> image_path = image_loader.image_path(\"my_image.png\")\n\nMethods\n\n"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.set_properties.html#set_properties","title":"set_properties","text":"set_properties\n\n\n\nEDBCommon.set_properties(data: Dict[str, Any])\n\nAssign the passed data to the internal data model.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary containing the properties to update.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the success status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> value2 = 2\n>>> toolkit_api.set_properties({\"property1\": \"value1\", \"property2\": value2})"},{"objectID":"Distribute","href":"distributing.html#distribute","title":"Distribute","text":"Distribute\n\nDistributing your application in a distributable format means packaging it in a way that makes it easy to install, run\nand share. A distributable format bundles everything needed (dependencies, configurations, executables) into a\nconvenient package.\nPackaging helps making your toolkit easier to distribute and more likely to run consistently across systems."},{"objectID":"Distribute","href":"distributing.html#how-to-distribute-in-windows","title":"Distribute > How to distribute in Windows","text":"How to distribute in Windows\n\nThe aim is to package the toolkit into a Windows installer (EXE file) using NSIS (Nullsoft Scriptable Install System)."},{"objectID":"Distribute","href":"distributing.html#pre-requisites-and-setup","title":"Distribute > Pre-requisites and setup","text":"Pre-requisites and setup\n\n1. Install chocolatey (Windows package manager)\nChocolatey lets you install tools like NSIS easily. For example, you can install NSIS by:\n- Opening a PowerShell terminal as Administrator.\n- Running the following command\n\nVisit the Chocolatey website for more information on the installation process.\n\n2. Add NSIS to your PATH in Windows environment variables\nUsually the NSIS is located at C:\\Program Files (x86)\\NSIS.\n\nInstall NSIS using chocolatey\n\n4. Install PyInstaller\nPyInstaller bundles a Python application and all its dependencies into a single package.\nThe user can run the packaged app without installing a Python interpreter or any modules.\n\nThis step requires the toolkit TOML file to have a section called freeze in [project.optional-dependencies].\nAn example can be found in Antenna Wizard TOML file.\n\nOpen the toolkit project in your IDE of choice, activate your virtual environment and run the following command:\n\n5. Extract the toolkit version\nThis step requires you to have the extract_version.py python script.\n\n6. Create the standalone executable\nThis step requires you to have a frozen.spec file. An example of such file can be found  here.\nThis file plays a key role in how your toolkit is turned into a standalone executable.\nIt defines the instructions PyInstaller uses to package your toolkit into a single executable file.\n\n7. Create a standalone installer program\nThis step requires you to have a setup.nsi file. An example of such file can be found here.\nThe setup.nsi file is the NSIS script (a plain text file) that describes how to build the installer, that is what files to include,\nwhere to install them, shortcuts to create, etc., and it compiles this script into a Windows installer executable.\nIn simple terms setup.nsi contains instructions and by running:\n\nNSIS turns these instructions into a standalone installer program.\n\n\n\n"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_project_name.html#get_project_name","title":"get_project_name","text":"get_project_name\n\n\n\nstatic AEDTCommon.get_project_name(project_path) -> str\n\nGet the project name from the project path.\n\nReturns\n\npython:str\n\nProject name."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/slider.html#pyslider","title":"PySlider","text":"PySlider\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_slider.py_slider.PySlider(margin=0, bg_size=20, bg_radius=10, bg_color='#1b1e23', bg_color_hover='#1e2229', handle_margin=2, handle_size=16, handle_radius=8, handle_color='#568af2', handle_color_hover='#6c99f4', handle_color_pressed='#3f6fd1')\n\nCustom slider widget with customizable styles.\n\nParameters\n\nmargin\n\npython:int, optional\n\nThe margin of the slider, by default 0.\n\nbg_size\n\npython:int, optional\n\nThe background size, by default 20.\n\nbg_radius\n\npython:int, optional\n\nThe background border radius, by default 10.\n\nbg_color\n\npython:str, optional\n\nThe background color, by default “#1b1e23”.\n\nbg_color_hover\n\npython:str, optional\n\nThe background color on hover, by default “#1e2229”.\n\nhandle_margin\n\npython:int, optional\n\nThe margin of the slider handle, by default 2.\n\nhandle_size\n\npython:int, optional\n\nThe size of the slider handle, by default 16.\n\nhandle_radius\n\npython:int, optional\n\nThe border radius of the slider handle, by default 8.\n\nhandle_color\n\npython:str, optional\n\nThe color of the slider handle, by default “#568af2”.\n\nhandle_color_hover\n\npython:str, optional\n\nThe color of the slider handle on hover, by default “#6c99f4”.\n\nhandle_color_pressed\n\npython:str, optional\n\nThe color of the slider handle when pressed, by default “#3f6fd1”."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/logger.html#pylogger","title":"PyLogger","text":"PyLogger\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_logger.py_logger.PyLogger(text_color='#f5f6f9', background_color='#000000', font_size=10, font_family='Segoe UI', height=50)\n\nLogger widget.\n\nInherits QTextEdit and provides a simple interface for logging strings.\n\nParameters\n\ntext_color\n\npython:str, optional\n\nText color. The default is \"#f5f6f9\".\n\nbackground_color: str, optional\n\nColor of background. The default is \"#000000\".\n\nfont_size: float or int, optional\n\nFont size. The default is 10.\n\nfont_family: str, optional\n\nFont size. The default is \"Segoe UI”.\n\nheight: float or int\n\nLogger height. The default is 10.\n\n\n\nlog(message)\n\nLogs a message to the widget.\n\nParameters:\n\nmessage: The string message to log."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/toggle.html#pytoggle","title":"PyToggle","text":"PyToggle\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_toggle.py_toggle.PyToggle(width=50, bg_color='#777', circle_color='#DDD', active_color='#00BCFF', text_color_on='#FFFFFF', text_color_off='#FFFFFF', show_on_off=False)\n\nCustomizable toggle switch.\n\nInherits QCheckBox and provides a customizable toggle switch with options\nfor width, background color, circle color, active color, and animation curve.\n\nParameters\n\nwidth\n\npython:int, optional\n\nWidth of the toggle switch. The default is 50.\n\nbg_color\n\npython:str, optional\n\nBackground color of the toggle switch. The default is \"#777\".\n\ncircle_color\n\npython:str, optional\n\nColor of the circle in the toggle switch. The default is \"#DDD\".\n\nactive_color\n\npython:str, optional\n\nColor of the toggle switch when active. The default is \"#00BCFF\".\n\ntext_color\n\npython:str, optional\n\nColor of the toggle text. The default is \"#FFFFFF\".\n\nshow_on_off: bool, optional\n\nShow on and off text in the toggle. The default value is False.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import PyToggle\n\n>>> class MyApp(QWidget):\n...     def __init__(self):\n...         super().__init__()\n...         self.toggle = PyToggle()\n...         self.toggle.stateChanged.connect(self.toggle_state_changed)\n...         self.toggle.show()\n\n…     def toggle_state_changed(self, state):\n…         print(“Toggle State:”, state)\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n\n\nhitButton(pos: QPoint)\n\nDetermine if a button press occurred within the toggle switch.\n\nParameters\n\npos\n\nQPoint\n\nThe position of the button press.\n\nReturns\n\nbool\n\nTrue if the button press occurred within the toggle switch, False otherwise."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_thread_status.html#get_thread_status","title":"get_thread_status","text":"get_thread_status\n\n\n\nEDBCommon.get_thread_status() -> ToolkitThreadStatus\n\nGet the toolkit thread status.\n\nReturns\n\nbool\n\nTrue when active, False when inactive.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_thread_status()"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.html#edbcommon","title":"EDBCommon","text":"EDBCommon\n\n\n\nclass ansys.aedt.toolkits.common.backend.api.EDBCommon(backend_properties=None)\n\nProvides the generic API for controlling EDB.\n\nThis class provides basic functions to control EDB and properties to share between the\nbackend and UI.\n\nParameters\n\nbackend_properties\n\nbackend.models.Properties\n\nUpdated properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n\nMethods\n\n"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.item_index.html#item_index","title":"item_index","text":"item_index\n\n\n\nstatic CommonWindowUtils.item_index(layout, item)\n\nItem index."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.release_aedt.html#release_aedt","title":"release_aedt","text":"release_aedt\n\n\n\nAEDTCommon.release_aedt(close_projects=False, close_on_exit=False)\n\nRelease AEDT.\n\nParameters\n\nclose_projects\n\nbool, optional\n\nWhether to close the AEDT projects that are open in the session.\nThe default is True.\n\nclose_on_exit\n\nbool, optional\n\nWhether to close the active AEDT session on exiting AEDT.\nThe default is True.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.release_aedt(True, True)"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_page.html#set_page","title":"set_page","text":"set_page\n\n\n\nCommonWindowUtils.set_page(page)\n\nSet the current page in the load_pages widget.\n\nParameters\n\npage\n\nQWidget\n\nThe page widget to be displayed as the current page."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_title_bar.html#get_title_bar","title":"get_title_bar","text":"get_title_bar\n\n\n\nCommonWindowUtils.get_title_bar(object_name)\n\nGet title.\n\nParameters\n\nobject_name: str\n\nThe name of the QPushButton object."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.window_refresh.html#window_refresh","title":"window_refresh","text":"window_refresh\n\n\n\nCommonWindowUtils.window_refresh()\n\nWindow refresh"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.is_progress_visible.html#is_progress_visible","title":"is_progress_visible","text":"is_progress_visible\n\n\n\nCommonWindowUtils.is_progress_visible()\n\nChecks if the progress bar is visible.\n\nReturns\n\nbool\n\nTrue if the progress bar is visible, False otherwise."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.set_properties.html#set_properties","title":"set_properties","text":"set_properties\n\n\n\nCommon.set_properties(data: Dict[str, Any])\n\nAssign the passed data to the internal data model.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary containing the properties to update.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the success status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> value2 = 2\n>>> toolkit_api.set_properties({\"property1\": \"value1\", \"property2\": value2})"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.set_left_column_menu.html#set_left_column_menu","title":"set_left_column_menu","text":"set_left_column_menu\n\n\n\nCommonWindowUtils.set_left_column_menu(menu, title, icon_path)\n\nConfigures the left column of the CommonWindow UI by setting the current widget as the provided menu,\n\nthe title in the left column’s title label as the provided title,\n\nand the icon in the left column as the icon specified by icon_path.\n\nParameters\n\nmenu\n\nQWidget\n\nThe menu widget to be set as the current widget in the left column.\n\ntitle\n\npython:str\n\nThe title to be set in the left column’s title label.\n\nicon_path\n\npython:str\n\nThe path to the icon image file to be set in the left column’s icon."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.create_animation.html#create_animation","title":"create_animation","text":"create_animation\n\n\n\nstatic CommonWindowUtils.create_animation(obj, property_name, start_val, end_val)\n\nCreates an animation with specified parameters.\n\nParameters\n\nobj: QObject\n\nThe object on which the animation will be applied.\n\nproperty_name: str\n\nThe name of the property to animate.\n\nstart_val: Any\n\nThe initial value of the property.\n\nend_val: Any\n\nThe final value of the property.\n\nReturns\n\nQPropertyAnimation\n\nThe created animation."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.save_edb.html#save_edb","title":"save_edb","text":"save_edb\n\n\n\nEDBCommon.save_edb(edb_path=None)\n\nSave the EDB project.\n\nParameters\n\nedb_path\n\npython:str, optional\n\nFull path to the aedb folder. The default is None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import EDBCommon\n>>> toolkit_api = EDBCommon()\n>>> toolkit_api.load_edb(\"path/to/file\")\n>>> toolkit_api.save_edb(\"path/to/new_file\")\n>>> toolkit_api.close_edb()"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_right_column.html#toggle_right_column","title":"toggle_right_column","text":"toggle_right_column\n\n\n\nCommonWindowUtils.toggle_right_column()\n\nToggles the display of the right column in a common window."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/left_column.html#pyleftcolumn","title":"PyLeftColumn","text":"PyLeftColumn\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_column.PyLeftColumn(text_title='Title', text_title_size=10, text_title_color='#343b48', dark_one='#1b1e23', bg_color='#343b48', btn_color='#c3ccdf', btn_color_hover='#3c4454', btn_color_pressed='#2c313c', icon_path='no_icon.svg', icon_color='#343b48', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', context_color='#dce1ec', icon_close_path='no_icon.svg', radius=8)\n\nCustom widget representing a left column with a title, an icon, and a close button.\n\nParameters\n\ntext_title\n\npython:str\n\nThe title text for the left column.\n\ntext_title_size\n\npython:int\n\nThe font size of the title text.\n\ntext_title_color\n\npython:str\n\nThe color of the title text.\n\ndark_one\n\npython:str\n\nColor representing a dark shade.\n\nbg_color\n\npython:str\n\nBackground color of the left column.\n\nbtn_color\n\npython:str\n\nColor of the close button.\n\nbtn_color_hover\n\npython:str\n\nColor of the close button when hovered.\n\nbtn_color_pressed\n\npython:str\n\nColor of the close button when pressed.\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\nicon_color\n\npython:str\n\nColor of the icon.\n\nicon_color_hover\n\npython:str\n\nColor of the icon when hovered.\n\nicon_color_pressed\n\npython:str\n\nColor of the icon when pressed.\n\ncontext_color\n\npython:str\n\nColor representing a context or active state.\n\nicon_close_path\n\npython:str\n\nPath to the close icon image file.\n\nradius\n\npython:int\n\nBorder radius of the left column.\n\n\n\nbtn_clicked()\n\nEmit signal when the close button is clicked.\n\n\n\nbtn_released()\n\nEmit signal when the close button is released.\n\n\n\nsetup_ui()\n\nSet up the user interface for the left column."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/line_edit.html#pylineedit","title":"PyLineEdit","text":"PyLineEdit\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_line_edit.py_line_edit.PyLineEdit(text='', place_holder_text='', radius=8, border_size=2, color='#FFF', selection_color='#FFF', bg_color='#333', bg_color_active='#222', context_color='#00ABE8', font_size=12)\n\nCustom QLineEdit widget with enhanced styling.\n\nParameters\n\ntext\n\npython:str, optional\n\nThe initial text for the line edit. Default is an empty string.\n\nplace_holder_text\n\npython:str, optional\n\nThe placeholder text to be displayed when the line edit is empty. Default is an empty string.\n\nradius\n\npython:int, optional\n\nThe border radius of the line edit. Default is 8.\n\nborder_size\n\npython:int, optional\n\nThe border size of the line edit. Default is 2.\n\ncolor\n\npython:str, optional\n\nThe text color of the line edit. Default is “#FFF” (white).\n\nselection_color\n\npython:str, optional\n\nThe text selection color of the line edit. Default is “#FFF” (white).\n\nbg_color\n\npython:str, optional\n\nThe background color of the line edit. Default is “#333” (dark gray).\n\nbg_color_active\n\npython:str, optional\n\nThe background color of the line edit when active. Default is “#222” (darker gray).\n\ncontext_color\n\npython:str, optional\n\nThe color representing a context or active state. Default is “#00ABE8” (blue).\n\nfont_size\n\npython:int, optional\n\nThe font size of the text on the button.\n\n\n\nset_stylesheet(radius, border_size, color, selection_color, bg_color, bg_color_active, context_color, font_size)\n\nSet the stylesheet for the PyLineEdit.\n\nParameters\n\nradius\n\npython:int\n\nBorder radius of the line edit.\n\nborder_size\n\npython:int\n\nBorder size of the line edit.\n\ncolor\n\npython:str\n\nText color of the line edit.\n\nselection_color\n\npython:str\n\nText selection color of the line edit.\n\nbg_color\n\npython:str\n\nBackground color of the line edit.\n\nbg_color_active\n\npython:str\n\nBackground color when the line edit is active.\n\ncontext_color\n\npython:str\n\nColor representing a context or active state.\n\nfont_size\n\npython:int\n\nThe font size of the text on the button."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.get_thread_status.html#get_thread_status","title":"get_thread_status","text":"get_thread_status\n\n\n\nCommon.get_thread_status() -> ToolkitThreadStatus\n\nGet the toolkit thread status.\n\nReturns\n\nbool\n\nTrue when active, False when inactive.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_thread_status()"},{"objectID":"Home","href":"toolkit/ui_reference/windows.html#windows","title":"Windows","text":"Windows\n\nThe Windows layout template is in the\nmain_window\ndirectory in the repository.\n\nThe Common_windows\ndirectory contains the files for setting up the main window, home menu, and settings column.\n\nThe following script shows how to use the previous files to initialize the application."},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#0143---september-26-2025","title":"Release notes > 0.14.3 - September 26, 2025","text":"0.14.3 - September 26, 2025\n\nFixed\n\n\n\n\n\nFixed change of pyaedt on desktop project_list which is now a property\n\n#334\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.14.2\n\n#333\n\nRemove caching from wheelhouse\n\n#335"},{"objectID":"Release notes","href":"changelog.html#0142---september-25-2025","title":"Release notes > 0.14.2 - September 25, 2025","text":"0.14.2 - September 25, 2025\n\nFixed\n\n\n\n\n\nChange from one project to another\n\n#332\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.14.1\n\n#331"},{"objectID":"Release notes","href":"changelog.html#0141---september-24-2025","title":"Release notes > 0.14.1 - September 24, 2025","text":"0.14.1 - September 24, 2025\n\nDependencies\n\n\n\n\n\nBump twine from 6.1.0 to 6.2.0\n\n#323\n\nUpdate pytest-cov requirement from <6.3,>=4.0.0 to >=4.0.0,<7.1\n\n#327\n\nBump ansys/actions from 10.0.20 to 10.1.1\n\n#329\n\nDocumentation\n\n\n\n\n\nUpdate CONTRIBUTORS.md with the latest contributors\n\n#324\n\nFixed\n\n\n\n\n\nDeprecated pyaedt argument\n\n#330\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.14.0\n\n#321\n\nBump 0.15.dev0\n\n#322\n\nUpdate README.rst\n\n#325"},{"objectID":"Release notes","href":"changelog.html#0140---september-10-2025","title":"Release notes > 0.14.0 - September 10, 2025","text":"0.14.0 - September 10, 2025\n\nDependencies\n\n\n\n\n\nUpdate flit-core requirement from <3.11,>=3.2 to >=3.2,<4\n\n#229\n\nBump codecov/codecov-action from 5.4.3 to 5.5.0\n\n#311\n\nBump actions/setup-python from 5.6.0 to 6.0.0\n\n#314\n\nBump ansys/actions from 10.0.14 to 10.0.20\n\n#316\n\nBump pypa/gh-action-pypi-publish from 1.12.4 to 1.13.0\n\n#317\n\nBump actions/labeler from 5.0.0 to 6.0.1\n\n#318\n\nBump codecov/codecov-action from 5.5.0 to 5.5.1\n\n#319\n\nFixed\n\n\n\n\n\nUpdate documentation sphinx dependency\n\n#299\n\nFix pyside version in tests and doc\n\n#307\n\nPydantic deprecation and CI warning spotted in CI logs\n\n#309\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.13.3\n\n#306\n\nStrengthen workflow’s job dependencies\n\n#313\n\nUpdate SECURITY.md\n\n#320\n\nTest\n\n\n\n\n\nFix flaky test using geometry thread\n\n#308\n\nImprove menu testing\n\n#312"},{"objectID":"Release notes","href":"changelog.html#0133---august-21-2025","title":"Release notes > 0.13.3 - August 21, 2025","text":"0.13.3 - August 21, 2025\n\nDependencies\n\n\n\n\n\nBump actions/checkout from 4.2.2 to 5.0.0\n\n#304\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.13.2\n\n#303\n\nRevert pyside6 6.9.0\n\n#305"},{"objectID":"Release notes","href":"changelog.html#0132---august-14-2025","title":"Release notes > 0.13.2 - August 14, 2025","text":"0.13.2 - August 14, 2025\n\nDependencies\n\n\n\n\n\nBump ansys/actions from 10.0.12 to 10.0.14\n\n#300\n\nBump actions/download-artifact from 4.3.0 to 5.0.0\n\n#301\n\nBump build from 1.2.2.post1 to 1.3.0\n\n#302\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.13.1\n\n#294\n\nPin vtk-osmesa version\n\n#296\n\nUse aedt 2025r2\n\n#297"},{"objectID":"Release notes","href":"changelog.html#0131---july-19-2025","title":"Release notes > 0.13.1 - July 19, 2025","text":"0.13.1 - July 19, 2025\n\nDependencies\n\n\n\n\n\nUpdate pytest-qt requirement from <4.5,>=4.0.0 to >=4.0.0,<4.6\n\n#291\n\nBump ansys/actions from 10.0.11 to 10.0.12\n\n#292\n\nDocumentation\n\n\n\n\n\nUpdate contributors.md with the latest contributors\n\n#293\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.13.0\n\n#288\n\nUpdate v0.14.dev0\n\n#289\n\nAdd safety check to all dependencies\n\n#290"},{"objectID":"Release notes","href":"changelog.html#0130---july-07-2025","title":"Release notes > 0.13.0 - July 07, 2025","text":"0.13.0 - July 07, 2025\n\nAdded\n\n\n\n\n\nAdd last example tests\n\n#281\n\nDependencies\n\n\n\n\n\nUpdate pytest requirement from <8.4,>=7.4.0 to >=7.4.0,<8.5\n\n#274\n\nBump pyside6 from 6.9.0 to 6.9.1\n\n#275\n\nUpdate pytest-cov requirement from <6.2,>=4.0.0 to >=4.0.0,<6.3\n\n#277\n\nUpdate numpydoc requirement from <1.9,>=1.5.0 to >=1.5.0,<1.10\n\n#287\n\nDocumentation\n\n\n\n\n\nAdded deepwiki badge\n\n#286\n\nMaintenance\n\n\n\n\n\nUpdate changelog for v0.12.6\n\n#273\n\nCleanup and updates\n\n#280\n\nAdd vulnerability check and refactor the code accordingly\n\n#285\n\nMiscellaneous\n\n\n\n\n\nImprove example and test ui\n\n#276"},{"objectID":"Release notes","href":"changelog.html#0126---june-13-2025","title":"Release notes > 0.12.6 - June 13, 2025","text":"0.12.6 - June 13, 2025\n\nDependencies\n\n\n\n\n\nBump ansys/actions from 9 to 10\n\n#272\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.12.5\n\n#271"},{"objectID":"Release notes","href":"changelog.html#0125---june-06-2025","title":"Release notes > 0.12.5 - June 06, 2025","text":"0.12.5 - June 06, 2025\n\nDocumentation\n\n\n\n\n\nadd doc section for distribution\n\n#269\n\nUpdate distributing.rst\n\n#270\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.12.4\n\n#268"},{"objectID":"Release notes","href":"changelog.html#0124---june-02-2025","title":"Release notes > 0.12.4 - June 02, 2025","text":"0.12.4 - June 02, 2025\n\nDocumentation\n\n\n\n\n\nUpdate CONTRIBUTORS.md with the latest contributors\n\n#266\n\nFixed\n\n\n\n\n\nWidget misaligment\n\n#267\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.12.3\n\n#265"},{"objectID":"Release notes","href":"changelog.html#0123---may-30-2025","title":"Release notes > 0.12.3 - May 30, 2025","text":"0.12.3 - May 30, 2025\n\nAdded\n\n\n\n\n\nAuto resolution\n\n#264\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.12.2\n\n#262\n\nAdd changelog upper case\n\n#263"},{"objectID":"Release notes","href":"changelog.html#0122---may-26-2025","title":"Release notes > 0.12.2 - May 26, 2025","text":"0.12.2 - May 26, 2025\n\nAdded\n\n\n\n\n\nAdd specific application if passed\n\n#260\n\nAdd ON/OFF in toggle\n\n#261\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.12.1\n\n#257"},{"objectID":"Release notes","href":"changelog.html#0121---may-20-2025","title":"Release notes > 0.12.1 - May 20, 2025","text":"0.12.1 - May 20, 2025\n\nAdded\n\n\n\n\n\nAdd set_visible_button for left menu\n\n#256\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.12.0\n\n#252\n\nUpdate v0.13.dev0\n\n#253"},{"objectID":"Release notes","href":"changelog.html#0120---may-10-2025","title":"Release notes > 0.12.0 - May 10, 2025","text":"0.12.0 - May 10, 2025\n\nMaintenance\n\n\n\n\n\nUpdate Python 3.12\n\n#248"},{"objectID":"Home","href":"toolkit/ui_reference/widgets/index.html#widgets","title":"Widgets","text":"Widgets\n\n"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.serialize_obj_base64.html#serialize_obj_base64","title":"serialize_obj_base64","text":"serialize_obj_base64\n\n\n\nstatic Common.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the file to serialize.\n\nReturns\n\nbytes\n\nEncoded data."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/title_bar.html#pytitlebar","title":"PyTitleBar","text":"PyTitleBar\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_title_bar.py_title_bar.PyTitleBar(parent, app_parent, logo_image='ansys-primary-logo-white.svg', logo_width=10, dark_one='#1b1e23', bg_color='#343b48', div_color='#3c4454', btn_bg_color='#343b48', btn_bg_color_hover='#3c4454', btn_bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', context_color='#6c99f4', text_foreground='#8a95aa', radius=8, font_family='Segoe UI', title_size=10)\n\nCustom title bar for the application window.\n\nParameters\n\nparent\n\nQWidget\n\nThe parent widget.\n\napp_parent\n\nQWidget\n\nThe main application window.\n\nlogo_image\n\npython:str, optional\n\nThe path to the logo image file, by default “ansys-primary-logo-white.svg”.\n\nlogo_width\n\npython:int, optional\n\nThe width of the logo, by default 10.\n\ndark_one\n\npython:str, optional\n\nThe color for the dark theme, by default “#1b1e23”.\n\nbg_color\n\npython:str, optional\n\nThe background color, by default “#343b48”.\n\ndiv_color\n\npython:str, optional\n\nThe color for dividers, by default “#3c4454”.\n\nbtn_bg_color\n\npython:str, optional\n\nThe background color for buttons, by default “#343b48”.\n\nbtn_bg_color_hover\n\npython:str, optional\n\nThe background color for buttons on hover, by default “#3c4454”.\n\nbtn_bg_color_pressed\n\npython:str, optional\n\nThe background color for buttons on pressed state, by default “#2c313c”.\n\nicon_color\n\npython:str, optional\n\nThe default icon color, by default “#c3ccdf”.\n\nicon_color_hover\n\npython:str, optional\n\nThe icon color on hover, by default “#dce1ec”.\n\nicon_color_pressed\n\npython:str, optional\n\nThe icon color on pressed state, by default “#edf0f5”.\n\nicon_color_active\n\npython:str, optional\n\nThe icon color for the active state, by default “#f5f6f9”.\n\ncontext_color\n\npython:str, optional\n\nThe context color, by default “#6c99f4”.\n\ntext_foreground\n\npython:str, optional\n\nThe text color, by default “#8a95aa”.\n\nradius\n\npython:int, optional\n\nThe border radius, by default 8.\n\nfont_family\n\npython:str, optional\n\nThe font family, by default “Segoe UI”.\n\ntitle_size\n\npython:int, optional\n\nThe font size for the title, by default 10.\n\n\n\nadd_menus(parameters)\n\nAdd custom menus to the title bar.\n\nParameters\n\nparameters\n\npython:list of python:dict\n\nList of dictionaries, each containing information about a menu button.\nEach dictionary should have the following keys:\n- btn_icon: str, the icon file for the button.\n- btn_id: str, the ID of the button.\n- btn_tooltip: str, the tooltip text for the button.\n- is_active: bool, whether the button is initially active or not.\n\n\n\nbtn_clicked()\n\nHandle the button click event.\n\n\n\nbtn_released()\n\nHandle the button release event.\n\n\n\nmaximize_restore()\n\nMaximize or restore the application window.\n\n\n\nset_title(title)\n\nSet the title of the application.\n\nParameters\n\ntitle\n\npython:str\n\nThe title to be set.\n\n\n\nsetup_ui()\n\nSet up the user interface for the title bar."},{"objectID":"Home","href":"examples/edb_common/api_edb.html#edb-simple-example","title":"EDB simple example","text":"EDB simple example\n\nThis example shows how to use the EDBCommon class to open an existing EDB project."},{"objectID":"Home","href":"examples/edb_common/api_edb.html#perform-required-imports","title":"EDB simple example > Perform required imports","text":"Perform required imports\n\nPerform the required imports.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#initialize-temporary-folder-and-project-settings","title":"EDB simple example > Initialize temporary folder and project settings","text":"Initialize temporary folder and project settings\n\nInitialize a temporary folder to copy the input file into and specify project settings.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#initialize-toolkit","title":"EDB simple example > Initialize toolkit","text":"Initialize toolkit\n\nInitialize the toolkit.\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#initialize-edb-project","title":"EDB simple example > Initialize EDB project","text":"Initialize EDB project\n\nOpen the EDB project.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#get-toolkit-properties","title":"EDB simple example > Get toolkit properties","text":"Get toolkit properties\n\nGet toolkit properties, which contain the project information.\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#save-project","title":"EDB simple example > Save project","text":"Save project\n\nCopy the current project in a new file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#get-cell-names","title":"EDB simple example > Get cell names","text":"Get cell names\n\nGet cell names using PyEDB.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#save-and-release-edb","title":"EDB simple example > Save and release EDB","text":"Save and release EDB\n\nSave and release EDB.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/edb_common/api_edb.html#remove-temporary-folder","title":"EDB simple example > Remove temporary folder","text":"Remove temporary folder\n\nRemove the temporary folder.\n\n\n\n"},{"objectID":"Home","href":"toolkit/ui_reference/widgets/credits.html#pycredits","title":"PyCredits","text":"PyCredits\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_credits.py_credits.PyCredits(text='© 2024 MyApp Co.', version='0.0.1', bg='#FFFFFF', font_family='Segoe UI', text_size=9, text_description_color='#00000', radius=8, padding=10)\n\nCredits information widget with customizable elements.\n\nInherits QWidget and includes UILabels for credits and version information,\nwith customizable styles.\n\nParameters\n\ntext\n\npython:str, optional\n\nCopyright text to be displayed. The default is \"© 2024 MyApp Co.\".\n\nversion\n\npython:str, optional\n\nVersion information text to be displayed. The default is \"0.0.1\".\n\nbg\n\npython:str, optional\n\nBackground color for the widget. The default is \"FFFFFF\".\n\nfont_family\n\npython:str, optional\n\nFont family name for the text. The default is \"Segoe UI\".\n\ntext_size\n\npython:int, optional\n\nSize of the text. The default is 9.\n\ntext_description_color\n\npython:str, optional\n\nColor of the text. The default is \"#FFFFFF\".\n\nradius\n\npython:int, optional\n\nRadius of the widget’s corners. The default is 9.\n\npadding\n\npython:int, optional\n\nPadding applied to the text in the labels. The default is 10.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import *\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.credits = PyCredits()\n...         self.credits.show()\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.aedt_sessions.html#aedt_sessions","title":"aedt_sessions","text":"aedt_sessions\n\n\n\nAEDTCommon.aedt_sessions() -> Dict[int, int]\n\nGet information for the active AEDT sessions.\n\nReturns\n\npython:dict\n\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.aedt_sessions()\n{pid1: grpc_port1, pid2: grpc_port2}"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_n_buttons.html#add_n_buttons","title":"add_n_buttons","text":"add_n_buttons\n\n\n\nCommonWindowUtils.add_n_buttons(layout=None, num_buttons=1, height=40, width=[200], text=['button'], font_size=10)\n\nAdd a specified number of buttons to a layout object.\n\nParameters\n\nlayout: QLayout, optional\n\nThe layout to which the buttons will be added. If None, a new QHBoxLayout will be created.\n\nnum_buttons: int, optional\n\nThe number of buttons to be added to the layout. Default is 1.\n\nheight: int, optional\n\nThe height of the buttons. Default is 40.\n\nwidth: list of int, optional\n\nThe widths of the buttons. If list length is less than num_buttons, all buttons take the same width.\nDefault is [200].\n\ntext: list of str, optional\n\nThe texts to be displayed on the buttons.\nIf list length is less than num_buttons, all buttons display the same text.\nDefault is [‘button’].\n\nfont_size: float or int, optional\n\nFont size. Default is 10.\n\nReturns\n\npython:list\n\nA list containing the layout row object and the button objects."},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#aedt-open-project-example","title":"AEDT open project example","text":"AEDT open project example\n\nThis example shows how to use the AEDTCommon class to launch a new AEDT session in a thread and open an existing AEDT project."},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#perform-required-imports","title":"AEDT open project example > Perform required imports","text":"Perform required imports\n\nPerform the required imports.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#initialize-temporary-folder-and-project-settings","title":"AEDT open project example > Initialize temporary folder and project settings","text":"Initialize temporary folder and project settings\n\nInitialize a temporary folder to copy the input file into and specify project settings.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#initialize-toolkit","title":"AEDT open project example > Initialize toolkit","text":"Initialize toolkit\n\nInitialize the toolkit.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#initialize-aedt","title":"AEDT open project example > Initialize AEDT","text":"Initialize AEDT\n\nLaunch a new AEDT session in a thread.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#wait-for-the-toolkit-thread-to-be-idle","title":"AEDT open project example > Wait for the toolkit thread to be idle","text":"Wait for the toolkit thread to be idle\n\nWait for the toolkit thread to be idle and ready to accept a new task.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#open-project","title":"AEDT open project example > Open project","text":"Open project\n\nOpen the project.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#get-toolkit-properties","title":"AEDT open project example > Get toolkit properties","text":"Get toolkit properties\n\nGet the toolkit properties, which contain the project information.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#connect-design","title":"AEDT open project example > Connect design","text":"Connect design\n\nConnect or create a new design.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#create-a-box","title":"AEDT open project example > Create a box","text":"Create a box\n\nCreate a box in the design.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#save-and-release-aedt","title":"AEDT open project example > Save and release AEDT","text":"Save and release AEDT\n\nSave and release AEDT.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_open_project.html#remove-temporary-folder","title":"AEDT open project example > Remove temporary folder","text":"Remove temporary folder\n\nRemove the temporary folder.\n\n\n\n"},{"objectID":"Home","href":"examples/properties_common/api_properties.html#properties-example","title":"Properties example","text":"Properties example\n\nThis example shows how to use the Common class, which contains properties models. These properties provide for sharing information through all the workflow."},{"objectID":"Home","href":"examples/properties_common/api_properties.html#add-new-properties","title":"Properties example > Add new properties","text":"Add new properties\n\nBefore importing the common module, you can add new properties. First create a file that contains the new properties type, Models. Then add a TOML file that sets the needed default values. Finally, import the properties.\n\n\n\n"},{"objectID":"Home","href":"examples/properties_common/api_properties.html#perform-required-imports","title":"Properties example > Perform required imports","text":"Perform required imports\n\nPerform the required imports.\n\n\n\n"},{"objectID":"Home","href":"examples/properties_common/api_properties.html#initialize-toolkit","title":"Properties example > Initialize toolkit","text":"Initialize toolkit\n\nInitialize the toolkit with the new properties.\n\n\n\n"},{"objectID":"Home","href":"examples/properties_common/api_properties.html#get-properties","title":"Properties example > Get properties","text":"Get properties\n\nGet the properties.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/properties_common/api_properties.html#set-property","title":"Properties example > Set property","text":"Set property\n\nUse set_properties to set the new property.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/properties_common/api_properties.html#set-property-directly","title":"Properties example > Set property directly","text":"Set property directly\n\nSet the property directly.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/properties_common/api_properties.html#set-wrong-property","title":"Properties example > Set wrong property","text":"Set wrong property\n\nSet the wrong property. It is not possible to change the property type.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"toolkit/ui.html#ui-api-reference","title":"UI API reference","text":"UI API reference\n\nThe PyADT Common Toolkit is designed to streamline the process of creating standard AEDT applications\nusing Pyside6.\nThe UI API provides a set of pre-built components, utilities, and an API that simplifies\nthe development of robust and user-friendly applications.\n\nThe UI API contains three main modules: Utils, Windows, and Generic actions:\n\nUtils \n\nCommon user interface classes to define widgets and load templates.\n\nui_reference/utils\n\nWindows \n\nDefault Windows initialization.\n\nui_reference/windows\n\nGeneric actions \n\nGeneric methods to call the REST API.\n\nui_reference/actions\n\n\n\nThis image shows the structure of the UI:\n\nThe UI is contained inside the main window. The main window contains some common widgets,\nsuch as the credits and title, that are initialized by default. You use the content widget\nto add new pages.\n\nFor initialization information, see the UI example."},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#aedt-simple-example","title":"AEDT simple example","text":"AEDT simple example\n\nThis example shows how to use the AEDTCommon class to launch a new AEDT session in a thread, create an HFSS design, and create a coaxial."},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#perform-required-imports","title":"AEDT simple example > Perform required imports","text":"Perform required imports\n\nPerform the required imports.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#initialize-toolkit","title":"AEDT simple example > Initialize toolkit","text":"Initialize toolkit\n\nInitialize the toolkit.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#get-toolkit-properties","title":"AEDT simple example > Get toolkit properties","text":"Get toolkit properties\n\nGet the toolkit properties.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#set-properties","title":"AEDT simple example > Set properties","text":"Set properties\n\nSet non-graphical mode.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#initialize-aedt","title":"AEDT simple example > Initialize AEDT","text":"Initialize AEDT\n\nLaunch a new AEDT session in a thread.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#wait-for-the-toolkit-thread-to-be-idle","title":"AEDT simple example > Wait for the toolkit thread to be idle","text":"Wait for the toolkit thread to be idle\n\nWait for the toolkit thread to be idle and ready to accept a new task.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#connect-design","title":"AEDT simple example > Connect design","text":"Connect design\n\nConnect or create a new design.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#get-toolkit-properties","title":"AEDT simple example > Get toolkit properties","text":"Get toolkit properties\n\nGet the toolkit properties, which contain the project information.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#create-a-coaxial","title":"AEDT simple example > Create a coaxial","text":"Create a coaxial\n\nCreate a coaxial in the design.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#release-aedt","title":"AEDT simple example > Release AEDT","text":"Release AEDT\n\nRelease AEDT.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#export-aedt-model","title":"AEDT simple example > Export AEDT model","text":"Export AEDT model\n\nExport the OBJ files.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_simple.html#release-and-close-aedt","title":"AEDT simple example > Release and close AEDT","text":"Release and close AEDT\n\nRelease and close AEDT.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.html#common","title":"Common","text":"Common\n\n\n\nclass ansys.aedt.toolkits.common.backend.api.Common(backend_properties=None)\n\nProvides the API for controlling the toolkits.\n\nThis class provides basic functions to control AEDT and EDB and the\nproperties to share between the backend and UI.\n\nParameters\n\nbackend_properties\n\nbackend.models.Properties\n\nUpdated properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_properties = toolkit_api.get_properties()\n>>> new_properties = {\"aedt_version\": \"2025.2\"}\n>>> toolkit_api.set_properties(new_properties)\n>>> new_properties = toolkit_api.get_properties()\n\nMethods\n\n"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.installed_aedt_version.html#installed_aedt_version","title":"installed_aedt_version","text":"installed_aedt_version\n\n\n\nstatic Common.installed_aedt_version() -> List\n\nGet the installed AEDT versions.\n\nReturns\n\npython:list\n\nList of installed AEDT versions.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.installed_aedt_version()\n[\"2024.2\", \"2025.1\", \"2025.2\"]"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.update_logger.html#update_logger","title":"update_logger","text":"update_logger\n\n\n\nCommonWindowUtils.update_logger(text)\n\nClear all layout."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_design_names.html#get_design_names","title":"get_design_names","text":"get_design_names\n\n\n\nAEDTCommon.get_design_names() -> List[str]\n\nGet the design names for a specific project.\n\nThe first design name returned is the active design.\n\nReturns\n\npython:list\n\nList of design names.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.wait_to_be_idle.html#wait_to_be_idle","title":"wait_to_be_idle","text":"wait_to_be_idle\n\n\n\nCommon.wait_to_be_idle(timeout: int = 60) -> bool\n\nWait for the thread to be idle and ready to accept a new task.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 60.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_properties.html#get_properties","title":"get_properties","text":"get_properties\n\n\n\nAEDTCommon.get_properties() -> Dict[str, str]\n\nGet the toolkit properties.\n\nReturns\n\npython:dict\n\nDictionary containing the toolkit properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_properties()\n{\"property1\": value1, \"property2\": value2}"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.serialize_obj_base64.html#serialize_obj_base64","title":"serialize_obj_base64","text":"serialize_obj_base64\n\n\n\nstatic EDBCommon.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the file to serialize.\n\nReturns\n\nbytes\n\nEncoded data."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.launch_aedt.html#launch_aedt","title":"launch_aedt","text":"launch_aedt\n\n\n\nAEDTCommon.launch_aedt() -> bool\n\nLaunch AEDT.\n\nThis method is launched in a thread if gRPC is enabled. AEDT is released once it is opened.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.html#commonwindowutils","title":"CommonWindowUtils","text":"CommonWindowUtils\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils\n\nClass representing a common window with various UI functionalities.\n\nMethods\n\n"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.save_project.html#save_project","title":"save_project","text":"save_project\n\n\n\nAEDTCommon.save_project(project_path=None, release_aedt=True)\n\nSave the project.\n\nThis method uses the properties to get the project path. This method is launched in a thread.\n\nParameters\n\nproject_path\n\npython:str, optional\n\nPath of the AEDT project. The default value is None, in which\ncase the current file is overwritten.\n\nrelease_aedt\n\nbool, optional\n\nRelease PyAEDT object. The default value is True.\n\nReturns\n\nbool\n\nReturns True if the connection is successful, False otherwise.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.save_project()"},{"objectID":"Home","href":"toolkit/ui_reference/widgets/progress.html#pyprogress","title":"PyProgress","text":"PyProgress\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_progress.py_progress.PyProgress(progress=0, progress_color='#ff79c6', background_color='#151617', text_color='#FFFFFF', font_size=10, font_family='Segoe UI', width=10)\n\nA progress bar widget.\n\nInherits QWidget and includes customizable elements including\nprogress, background color, progress color, and width.\n\nParameters\n\nprogress\n\npython:float or python:int, optional\n\nCurrent progress value. The default is 0.\n\nprogress_color: str, optional\n\nColor of progress bar. The default is \"#ff79c6\".\n\nbackground_color: str, optional\n\nColor of background. The default is \"#151617\".\n\nwidth: float or int\n\nWidth of the progress bar. The default is 10.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import *\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets.py_progress.py_progress import PyProgress\n>>> from random import randint\n>>> from PySide6.QtCore import QTimer\n\n>>> class MyApp(QMainWindow):\n...     def __init__(self):\n...         super().__init__()\n...         self.progress_bar = PyProgress(progress=0,\n...                                        progress_color=\"#21252d\",\n...                                        background_color=\"#313131\",\n...                                        width=10)\n...         timer = QTimer()\n...         timer.timeout.connect(lambda: self.progress_bar.__setattr__(\"progress\", randint(0, 100)))\n...         timer.start(1000)\n...         self.progress_bar.show()\n...         sys.exit(app.exec())\n\n>>> if __name__ == \"__main__\":\n...     app = QApplication([])\n...     window = MyApp()\n...     sys.exit(app.exec())\n\n\n\npaintEvent(e)\n\nPaint the progress bar.\n\nParameters\n\ne\n\nQPaintEvent\n\nPaint event.\n\n\n\nproperty progress\n\nGet the current progress value.\n\nReturns\n\npython:float or python:int\n\nThe current progress value."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.html#aedtcommon","title":"AEDTCommon","text":"AEDTCommon\n\n\n\nclass ansys.aedt.toolkits.common.backend.api.AEDTCommon(backend_properties: ThreadManager | None = None)\n\nProvides common functions for controlling AEDT.\n\nThis class provides basic functions for controlling AEDT and properties to share\nbetween the backend and UI.\n\nParameters\n\nbackend_properties\n\nbackend.models.Properties\n\nUpdated properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> msg = toolkit_api.launch_aedt()\n\nMethods\n\n"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.images.load_images.LoadImages.icon_path.html#icon_path","title":"icon_path","text":"icon_path\n\n\n\nLoadImages.icon_path(icon_name)\n\nGet the full path for the specified icon.\n\nParameters\n\nicon_name\n\npython:str\n\nThe name of the icon file.\n\nReturns\n\npython:str\n\nThe full path to the specified icon."},{"objectID":"Home","href":"getting_started/example_toolkit.html#toolkit-example","title":"Toolkit example","text":"Toolkit example\n\nThe examples/toolkit/pyaedt_toolkit\nfolder contains all files for creating a toolkit using the PyAEDT Common Toolkit."},{"objectID":"Home","href":"getting_started/example_toolkit.html#example-walkthrough","title":"Toolkit example > Example walkthrough","text":"Example walkthrough\n\nFollow the steps outlined in the example to gain practical insights into toolkit implementation:\n\nAccess the example: Navigate to the examples/toolkit/pyaedt_toolkit\nfolder.\n\nUnderstand the toolkit structure:\n\nExplore the directory and file structure of the example toolkit.\n\nGain insights into best practices for organizing toolkit components."},{"objectID":"Home","href":"getting_started/example_toolkit.html#toolkit-structure","title":"Toolkit example > Toolkit structure","text":"Toolkit structure\n\nFor optimal organization and maintainability, toolkits should adhere to the following structure:"},{"objectID":"Home","href":"getting_started/example_toolkit.html#backend-and-ui","title":"Toolkit example > Backend and UI","text":"Backend and UI\n\nAs described in Architecture, toolkits must have a separation between the\nbackend and UI.\n\nThe backend directory houses backend functionalities, including API and REST API definitions,\ndata processing, and communication with the common library.\n\nThe ui folder focuses on frontend interactions, managing the UI and connecting with backend\nfunctionalities."},{"objectID":"Home","href":"getting_started/example_toolkit.html#api","title":"Toolkit example > API","text":"API\n\nThe toolkit API controls the workflow, enabling the creation of an automated workflow without a UI.\n\nThe following code shows how to inherit common methods.\nYou can play with the API in the Python console:"},{"objectID":"Home","href":"getting_started/example_toolkit.html#models-and-properties","title":"Toolkit example > Models and properties","text":"Models and properties\n\nTo introduce new properties to the toolkit, define them using models. Properties have a fixed type,\nso they are protected. In models, specify the type. In this example, two new properties, multiplier\nand geometry, are defined as float and string, respectively.\n\nIn the backend_properties.json file, define default values for both common and new properties.\nThese properties are correctly loaded by being imported into the toolkit API, as seen here:"},{"objectID":"Home","href":"getting_started/example_toolkit.html#run-backend","title":"Toolkit example > Run backend","text":"Run backend\n\nA script, conventionally named  rest_api.py for its role in managing the REST API of the toolkit,\nis referred to as run_backend.py in this example. Upon execution, the script launches a server that\nlistens for incoming requests.\n\nSimilar to the API, this file inherits the common REST API, containing only the specific REST API functionalities\nrequired for the toolkit. The following Python code imports the REST API application from the common library:\n\nThis code then creates an instance of the toolkit API object:"},{"objectID":"Home","href":"getting_started/example_toolkit.html#run-frontend","title":"Toolkit example > Run frontend","text":"Run frontend\n\nThe run_frontend.py script serves as the application launcher for the UI, built using PySide6.\nThe file concludes with the following code, ensuring proper initialization using PySide6:\n\nThe initialization of the ApplicationWindow class calls different common pages defined in\nUI reference.\n\nIf additional pages are to be added to the toolkit, include them along with any required actions\ninside the windows directory."},{"objectID":"Home","href":"getting_started/example_toolkit.html#common-actions","title":"Toolkit example > Common actions","text":"Common actions\n\nCommon actions define the calls to the REST API, as described in Actions."},{"objectID":"Home","href":"getting_started/example_toolkit.html#ui-properties","title":"Toolkit example > UI properties","text":"UI properties\n\nSimilar to the backend, the UI has its own properties. The frontend_properties.json file enables\ncustomization of the UI theme, addition of new tabs, and modification of the URL and port for backend\ncommunication."},{"objectID":"Home","href":"getting_started/example_toolkit.html#run-toolkit","title":"Toolkit example > Run toolkit","text":"Run toolkit\n\nThe run_toolkit.py script facilitates the simultaneous execution of both the backend and UI in two\ndifferent threads. This eliminates the need for launching the backend and UI separately.\nIn cases where the backend is running remotely, execute the backend on the remote machine\nbefore running this script."},{"objectID":"Home","href":"index.html#pyaedt-common-toolkit-documentation-015dev0","title":"PyAEDT Common Toolkit documentation 0.15.dev0","text":"PyAEDT Common Toolkit documentation 0.15.dev0\n\nUseful links:\nInstallation |\nSource repository |\nIssues\n\nThe PyADT Common Toolkit provides common methods and best practices for creating an Ansys Electronics Desktop (AEDT) toolkit.\n\nGetting started \n\nLearn how to install the PyADT Common Toolkit, understand its architecture\nand use this toolkit’s common method to developer an example AEDT toolkit.\n\ngetting_started/index\n\nBackend API reference \n\nUnderstand how to use the backend API.\n\ntoolkit/api\n\nUI API reference \n\nUnderstand how to use the UI API.\n\ntoolkit/ui\n\nExamples \n\nExplore examples that show how to use the Common AEDT API.\n\nexamples/index\n\nContribute \n\nLearn how to contribute to the PyAEDT Common Toolkit codebase or documentation.\n\ncontributing\n\nHow to distribute \n\nLearn how to package your toolkit and its dependencies into a distributable format for the end user.\n\ndistributing\n\n"},{"objectID":"Home","href":"index.html#what-is-this-library","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > What is this library?","text":"What is this library?\n\nThis library is a common library for AEDT toolkits. It brings numerous advantages like enhancing efficiency,\nconsistency, and collaboration in the creation and development of AEDT toolkits.\n\nThis library provides methods and best practices to develop AEDT toolkits. These are the main advantages of using\nthis library:"},{"objectID":"Home","href":"index.html#standardization","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Standardization","text":"Standardization\n\nA common toolkit framework establishes standardized guidelines, conventions, and practices\nfor toolkit development. This ensures that all developers follow a consistent structure, making it easier for them to\nunderstand and contribute to different toolkits."},{"objectID":"Home","href":"index.html#interoperability","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Interoperability","text":"Interoperability\n\nWith a common framework, different AEDT toolkits become more interoperable.\nDevelopers can create tools that seamlessly integrate with existing toolkits, promoting a modular\nand extensible ecosystem.\nThis interoperability is crucial for users who may need functionalities from multiple toolkits in their workflows."},{"objectID":"Home","href":"index.html#reuse-code","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Reuse code","text":"Reuse code\n\nA common toolkit framework encourages the reuse of code components across different toolkits.\nDevelopers can leverage existing modules, functions, and libraries, saving time and effort in creating similar\nfunctionalities from scratch. This promotes a more efficient development process and reduces redundancy."},{"objectID":"Home","href":"index.html#maintain","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Maintain","text":"Maintain\n\nStandardized frameworks make it easier to maintain and update AEDT toolkits.\nWhen changes or improvements are required, developers can follow a unified set of procedures, ensuring that updates are\napplied consistently across all toolkits.\nThis helps in avoiding compatibility issues and streamlining the maintenance process."},{"objectID":"Home","href":"index.html#collaboration","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Collaboration","text":"Collaboration\n\nA common toolkit framework fosters collaboration among developers by providing a shared set of tools and practices.\nIt becomes easier for multiple developers to work on different aspects of the toolkit simultaneously,\nas they all adhere to the same framework.\nThis collaborative environment can lead to faster development cycles and a more robust set of tools."},{"objectID":"Home","href":"index.html#documentation-and-training","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Documentation and training","text":"Documentation and training\n\nA standardized framework comes with consistent documentation and training resources.\nThis makes it easier for developers to understand the structure of the toolkit, its functionalities, and best practices."},{"objectID":"Home","href":"index.html#quality-assurance","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Quality assurance","text":"Quality assurance\n\nA common toolkit framework enables better quality assurance processes.\nStandardized testing methodologies and practices can be implemented,\nensuring that each toolkit adheres to the same quality standards.\nThis results in more reliable and stable toolkits for end-users."},{"objectID":"Home","href":"index.html#indices-and-tables","title":"PyAEDT Common Toolkit documentation 0.15.dev0 > Indices and tables","text":"Indices and tables\n\ngenindex\n\nmodindex\n\nsearch"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.connect_aedt.html#connect_aedt","title":"connect_aedt","text":"connect_aedt\n\n\n\nAEDTCommon.connect_aedt() -> bool\n\nConnect to an existing AEDT session.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.release_aedt()"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.AEDTCommon.get_thread_status.html#get_thread_status","title":"get_thread_status","text":"get_thread_status\n\n\n\nAEDTCommon.get_thread_status() -> ToolkitThreadStatus\n\nGet the toolkit thread status.\n\nReturns\n\nbool\n\nTrue when active, False when inactive.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_thread_status()"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.launch_thread.html#launch_thread","title":"launch_thread","text":"launch_thread\n\n\n\nEDBCommon.launch_thread(process, *args) -> ThreadManager\n\nLaunch the thread."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.Common.aedt_sessions.html#aedt_sessions","title":"aedt_sessions","text":"aedt_sessions\n\n\n\nCommon.aedt_sessions() -> Dict[int, int]\n\nGet information for the active AEDT sessions.\n\nReturns\n\npython:dict\n\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.aedt_sessions()\n{pid1: grpc_port1, pid2: grpc_port2}"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.get_left_menu.html#get_left_menu","title":"get_left_menu","text":"get_left_menu\n\n\n\nCommonWindowUtils.get_left_menu(object_name)\n\nRetrieves the QPushButton object in the left menu of the CommonWindow UI.\n\nParameters\n\nobject_name\n\npython:str\n\nThe name of the button object to be retrieved from the left menu.\n\nReturns\n\nQPushButton\n\nThe QPushButton object with the given object_name found in the left menu of the CommonWindow UI."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.start_box_animation.html#start_box_animation","title":"start_box_animation","text":"start_box_animation\n\n\n\nCommonWindowUtils.start_box_animation(direction)\n\nStarts a box animation in the specified direction.\n\nParameters\n\ndirection: str\n\nThe direction in which the box animation should be performed.\nPossible values are “left” and “right”."},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.wait_to_be_idle.html#wait_to_be_idle","title":"wait_to_be_idle","text":"wait_to_be_idle\n\n\n\nEDBCommon.wait_to_be_idle(timeout: int = 60) -> bool\n\nWait for the thread to be idle and ready to accept a new task.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 60.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_progress.html#toggle_progress","title":"toggle_progress","text":"toggle_progress\n\n\n\nCommonWindowUtils.toggle_progress(mode=0)\n\nToggles the visibility of the progress row.\n\nParameters\n\nmode\n\npython:int, optional\n\nThe mode of the toggle operation. Default is 0.\n- 0: Toggles the progress row between open and closed states.\n- 1: Opens the progress row.\n- 2: Closes the progress row."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/left_button.html#pyleftbutton","title":"PyLeftButton","text":"PyLeftButton\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_left_column.py_left_button.PyLeftButton(btn_id=None, width=30, height=30, radius=8, bg_color='#343b48', bg_color_hover='#3c4454', bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', icon_path='no_icon.svg', dark_one='#1b1e23', context_color='#568af2', text_foreground='#8a95aa', is_active=False)\n\nLeft button widget designed to function as a left-aligned button with various style and interaction options.\n\nParameters\n\nbtn_id\n\npython:str, optional\n\nButton identifier.\n\nwidth\n\npython:int, optional\n\nButton width.\n\nheight\n\npython:int, optional\n\nButton height.\n\nradius\n\npython:int, optional\n\nButton corner radius.\n\nbg_color\n\npython:str, optional\n\nButton background color.\n\nbg_color_hover\n\npython:str, optional\n\nButton background color when hovered.\n\nbg_color_pressed\n\npython:str, optional\n\nButton background color when pressed.\n\nicon_color\n\npython:str, optional\n\nIcon color.\n\nicon_color_hover\n\npython:str, optional\n\nIcon color when hovered.\n\nicon_color_pressed\n\npython:str, optional\n\nIcon color when pressed.\n\nicon_color_active\n\npython:str, optional\n\nActive icon color.\n\nicon_path\n\npython:str, optional\n\nPath to icon file.\n\ndark_one\n\npython:str, optional\n\nDark color for theming.\n\ncontext_color\n\npython:str, optional\n\nContext color for theming.\n\ntext_foreground\n\npython:str, optional\n\nText foreground color.\n\nis_active\n\nbool, optional\n\nWhether the button is active.\n\n\n\nchange_style(event)\n\nChange the button style based on the event type.\n\nParameters\n\nevent\n\nQEvent\n\nEvent triggering the style change.\n\n\n\nenterEvent(event)\n\nHandle the enter event.\n\nParameters\n\nevent\n\nQEvent\n\nEnter event.\n\n\n\nicon_paint(qp, image, rect)\n\nPaint the icon on the button.\n\nParameters\n\nqp\n\nQPainter\n\nQPainter object.\n\nimage\n\npython:str\n\nPath to the icon image.\n\nrect\n\nQRect\n\nRectangle to paint the icon within.\n\n\n\nis_active()\n\nCheck if the button is active.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n\n\nleaveEvent(event)\n\nHandle the leave event.\n\nParameters\n\nevent\n\nQEvent\n\nLeave event.\n\n\n\nmousePressEvent(event)\n\nHandle the mouse press event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n\n\nmouseReleaseEvent(event)\n\nHandle the mouse release event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n\n\npaintEvent(event)\n\nPaint the button.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n\n\nset_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nWhether the button is active.\n\n\n\nset_icon(icon_path)\n\nSet the icon for the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file."},{"objectID":"Home","href":"toolkit/api.html#backend-api-reference","title":"Backend API reference","text":"Backend API reference\n\nThe backend API contains three classes, AEDTCommon`, EDBCommon, and Common,\nwhich provide methods for controlling the toolkit workflow:\n\nAEDTCommon: Provides methods for controlling AEDT. This class inherits the Common class.\n\nEDBCommon: Provides methods for controlling EDB. This class inherits the Common class.\n\nCommon: Provides methods for controlling the toolkit flow.\n\nIn the following descriptions, you can click the class name to view detailed API information.\n\n\n\nThis code shows how to use the AEDTCommon class:"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_vertical_line.html#add_vertical_line","title":"add_vertical_line","text":"add_vertical_line\n\n\n\nCommonWindowUtils.add_vertical_line(layout, top_spacer=None, bot_spacer=None)\n\nAdd a vertical line.\n\nParameters\n\nlayout: QLayout\n\nLayout object to add the label and toggle button to.\n\ntop_spacer: list, optional\n\nTop spacer. Default is [0, 10].\n\nbot_spacer: list, optional\n\nBottom, spacer. Default is [0, 10]."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.add_toggle.html#add_toggle","title":"add_toggle","text":"add_toggle\n\n\n\nCommonWindowUtils.add_toggle(layout, height=40, width=None, label=None, font_size=12, bg_color=None, circle_color=None, active_color=None, text_color_on=None, text_color_off=None, show_on_off=False)\n\nAdd a label and a toggle button to a specified layout.\n\nParameters\n\nlayout: QLayout\n\nLayout object to add the label and toggle button to.\n\nheight: int, optional\n\nHeight of the label and toggle. The default value is 40.\n\nwidth: list, optional\n\nWidth of the label and toggle. The default is [50, 100, 50] if None.\n\nlabel: list of str, optional\n\nLabel text. The default value is ['label1', 'label2'].\n\nfont_size: int, optional\n\nFont size for the label text. The default value is 12.\n\nbg_color\n\npython:str, optional\n\nBackground color of the toggle switch. The default is label_off.\n\ncircle_color\n\npython:str, optional\n\nColor of the circle in the toggle switch. The default is icon_color.\n\nactive_color\n\npython:str, optional\n\nColor of the toggle switch when active. The default is label_on.\n\ntext_color_on\n\npython:str, optional\n\nColor of the on toggle text. The default is text_foreground.\n\ntext_color_off\n\npython:str, optional\n\nColor of the off toggle text. The default is text_foreground.\n\nshow_on_off: bool, optional\n\nShow on and off text in the toggle. The default value is False.\n\nReturns\n\npython:tuple\n\nA tuple containing the layout row, label object, toggle object, and second label object"},{"objectID":"Home","href":"toolkit/_autosummary/ansys.aedt.toolkits.common.backend.api.EDBCommon.get_properties.html#get_properties","title":"get_properties","text":"get_properties\n\n\n\nEDBCommon.get_properties() -> Dict[str, str]\n\nGet the toolkit properties.\n\nReturns\n\npython:dict\n\nDictionary containing the toolkit properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_properties()\n{\"property1\": value1, \"property2\": value2}"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys repository appears in\nContributing\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyAEDT or its toolkits.\n\nThe following contribution information is specific to this library."},{"objectID":"Contribute","href":"contributing.html#clone-the-repository","title":"Contribute > Clone the repository","text":"Clone the repository\n\nTo clone and install the latest version of the PyAEDT Common Toolkit in\ndevelopment mode, run these commands:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PyAEDT Common Toolkit Issues page\nto create issues to report bugs and request new features."},{"objectID":"Contribute","href":"contributing.html#view-documentation","title":"Contribute > View documentation","text":"View documentation\n\nDocumentation for the latest stable release is hosted at PyAEDT Common Toolkit documentation.\n\nIn the upper right corner of the documentation’s title bar, there is an option for switching from viewing\nthe documentation for the latest stable release to viewing the documentation for the development version\nor previously released versions."},{"objectID":"Contribute","href":"contributing.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nThe Common Toolkit is compliant with PyAnsys code style. It uses the tool\npre-commit to select the code style.\n\nYou can install and activate this tool with these commands:\n\nYou can also install this as a pre-commit hook with this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:"},{"objectID":"Contribute","href":"contributing.html#maximum-line-length","title":"Contribute > Maximum line length","text":"Maximum line length\n\nBest practice is to keep the line length at or below 120 characters for code\nand comments. Lines longer than this might not display properly on some terminals\nand tools or might be difficult to follow."},{"objectID":"Home","href":"toolkit/ui_reference/actions.html#actions","title":"Actions","text":"Actions\n\nThe FrontendGeneric class provides a generic UI for controlling the toolkit. A backend must be running previously.\n\n\n\nclass ansys.aedt.toolkits.common.ui.actions_generic.FrontendGeneric\n\nThis class provides a generic frontend for controlling the toolkit.\n\n\n\nbackend_busy()\n\nCheck if the backend is currently busy.\n\nReturns\n\nbool\n\nTrue if the backend is busy, False otherwise.\n\n\n\ncheck_connection()\n\nCheck the backend connection.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n\n\ncloseEvent(event)\n\nHandle the close event of the application window.\n\n\n\nfind_process_ids(version, non_graphical)\n\nFind AEDT sessions based on the selected version and graphical mode.\n\nParameters\n\nversion\n\npython:str\n\nAEDT version.\n\nnon_graphical\n\nbool\n\nFlag indicating graphical or non-graphical mode.\n\nReturns\n\npython:list or python:False\n\nA list of found AEDT sessions if successful, False otherwise.\n\n\n\nget_aedt_data()\n\nGet a list of AEDT projects.\n\nReturns\n\npython:list\n\nA list of AEDT project names. Returns [“No Project”] if no projects are available.\n\n\n\nget_aedt_model(project_selected, design_selected, air_objects=True, encode=True, obj_list=None, export_path=None, export_as_single_objects=True)\n\nGet AEDT model.\n\nParameters\n\nproject_selected\n\npython:str\n\nProject name.\n\ndesign_selected\n\npython:str\n\nDesign name.\n\nair_objects\n\nbool, optional\n\nDefine if air and vacuum objects will be exported.\n\nencode\n\nbool, optional\n\nWhether to encode the file. The default is True.\n\nobj_list\n\npython:list, optional\n\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\n\nexport_path\n\npython:str, optional\n\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\n\nexport_as_single_objects\n\nbool, optional\n\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n\n\nstatic get_project_name(project_path)\n\nGet project name from project path.\n\nReturns\n\npython:str\n\nProject name\n\n\n\nget_properties()\n\nGet properties from the backend.\n\nReturns\n\npython:dict or python:False\n\nA dictionary of properties if successful, False otherwise.\n\n\n\ninstalled_versions()\n\nGet the installed versions of AEDT.\n\nReturns\n\npython:list or python:False\n\nA list of installed AEDT versions if successful, False otherwise.\n\n\n\nlaunch_aedt(selected_version, selected_process, non_graphical=False)\n\nLaunch AEDT.\n\nParameters\n\nselected_version\n\npython:str\n\nThe selected AEDT version.\n\nselected_process\n\npython:str\n\nThe selected AEDT process.\n\nnon_graphical\n\nbool, optional\n\nFlag indicating whether to run AEDT in non-graphical mode. The default is False.\n\n\n\nlog_and_update_progress(msg, log_level: str = 'debug', progress: int | None = None)\n\nLog a message and update the progress bar.\n\nThis method logs the given message at the specified log level, and updates the progress\nbar to the given progress percentage if provided.\n\nParameters\n\nmsg\n\npython:str\n\nThe log message.\n\nlog_level\n\npython:str, optional\n\nThe log level (debug, info, warning, error, critical). The default is “debug”.\n\nprogress\n\npython:int, optional\n\nThe progress percentage. If provided, it updates the progress bar.\n\n\n\non_cancel_clicked()\n\nHandle cancel button click.\n\n\n\nopen_project(selected_project)\n\nOpen an AEDT project.\n\nParameters\n\nselected_project\n\npython:str\n\nThe path to the selected AEDT project.\n\n\n\nstatic poll_url(url: str, timeout: int = 10, interval: float = 0.5)\n\nPoll a URL repeatedly until a successful response or a timeout is reached.\n\nThis function sends repeated GET requests to the given URL at a fixed interval,\nstopping when a success response is received or when the specified timeout is\nexceeded.\n\nParameters\n\nurl\n\npython:str\n\nThe URL to poll.\n\ntimeout\n\npython:int, optional\n\nMaximum total time (in seconds) to continue polling before giving up.\nDefault is 10.\n\ninterval\n\npython:float, optional\n\nTime (in seconds) to wait between each request attempt.\nDefault is 0.5.\n\nReturns\n\npython:tuple[bool, python:str | python:dict]\n\nA 2-tuple containing a boolean and a dict or string.\nThe first element is a boolean stating if the GET requests succeeded.\nThe second element is either the response content (parsed as JSON if successful)\nor a string describing the failure reason.\n\n\n\nrelease_and_close()\n\nRelease and close the AEDT desktop.\n\n\n\nrelease_only()\n\nRelease the AEDT desktop without closing projects.\n\n\n\nsave_project()\n\nSave the current AEDT project.\n\nOpens a file dialog to select a location to save the AEDT project. The project is saved\nwith a ‘.aedt’ extension.\n\nNote:\n\nThis method relies on backend communication to save the project.\n\nReturns\n\npython:None\n\n\n\n\n\nset_properties(data)\n\nSet properties in the backend.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary of properties to set.\n\n\n\nupdate_design_names(active_project=None)\n\nUpdate design names based on the active project.\n\nParameters\n\nactive_project\n\npython:str, optional\n\nThe active AEDT project. If not provided, the current active project will be used.\n\nReturns\n\npython:list\n\nA list of design names.\n\n\n\nwait_thread(timeout: int = 10)\n\nWait thread until backend is idle.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 10 seconds.\n\nReturns\n\nbool\n\nTrue when the backend is idle, False otherwise.\n\nYou can modify the default properties with the following script:"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.themes.json_themes.ThemeHandler.export_theme.html#export_theme","title":"export_theme","text":"export_theme\n\n\n\nThemeHandler.export_theme() -> None\n\nExport the current theme to the theme file.\n\nWrites the current theme settings to the theme file in JSON format."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/divider.html#pydiv","title":"PyDiv","text":"PyDiv\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_div.py_div.PyDiv(color='#000000', height=0, width=20)\n\nVertical divider widget with customizable elements.\n\nParameters\n\ncolor\n\npython:str, optional\n\nThe color of the divider in hex color code. The default is \"#000000\".\n\nheight\n\npython:float, optional\n\nDivider height. The default is 0.\n\nwidth\n\npython:float, optional\n\nDivider width. The default is 20.\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QVBoxLayout, QPushButton\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class Example(QWidget):\n>>>     def __init__(self):\n>>>         super().__init__()\n>>>         layout = QVBoxLayout(self)\n>>>         layout.addWidget(QPushButton(\"Button 1\"))\n>>>         layout.addWidget(PyDiv(\"#FF0000\", 20))\n>>>         layout.addWidget(QPushButton(\"Button 2\"))\n\n>>> if __name__ == \"__main__\":\n>>>     app = QApplication([])\n>>>     window = Example()\n>>>     window.show()\n>>>     app.exec()"},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.remove_item.html#remove_item","title":"remove_item","text":"remove_item\n\n\n\nstatic CommonWindowUtils.remove_item(layout, index)\n\nRemove item by index."},{"objectID":"Home","href":"toolkit/ui_reference/widgets/icon_button.html#pyiconbutton","title":"PyIconButton","text":"PyIconButton\n\n\n\nclass ansys.aedt.toolkits.common.ui.utils.widgets.py_icon_button.py_icon_button.PyIconButton(icon_path=None, tooltip_text='', btn_id=None, width=30, height=30, radius=8, bg_color='#343b48', bg_color_hover='#3c4454', bg_color_pressed='#2c313c', icon_color='#c3ccdf', icon_color_hover='#dce1ec', icon_color_pressed='#edf0f5', icon_color_active='#f5f6f9', dark_one='#1b1e23', text_foreground='#8a95aa', context_color='#568af2', top_margin=40, is_active=False)\n\nIcon button widget that can be used as a colored icon.\n\nThe icon and color can be customized during initialization.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file.\n\ntooltip_text\n\npython:str, optional\n\nText for tooltip.\n\nbtn_id\n\npython:str, optional\n\nIdentifier for the button.\n\nwidth\n\npython:int, optional\n\nWidth of the button.\n\nheight\n\npython:int, optional\n\nHeight of the button.\n\nradius\n\npython:int, optional\n\nRadius for rounded corners.\n\nbg_color\n\npython:str, optional\n\nBackground color in hex color code.\n\nbg_color_hover\n\npython:str, optional\n\nBackground color when hovered in hex color code.\n\nbg_color_pressed\n\npython:str, optional\n\nBackground color when being pressed in hex color code.\n\nicon_color\n\npython:str, optional\n\nIcon color in hex color code.\n\nicon_color_hover\n\npython:str, optional\n\nIcon color when hovered in hex color code.\n\nicon_color_pressed\n\npython:str, optional\n\nIcon color when being pressed in hex color code.\n\nicon_color_active\n\npython:str, optional\n\nActive icon color in hex color code.\n\ndark_one\n\npython:str, optional\n\nColor for dark theme in hex color code.\n\ntext_foreground\n\npython:str, optional\n\nText color in hex color code.\n\ncontext_color\n\npython:str, optional\n\nContext color in hex color code.\n\ntop_margin\n\npython:int, optional\n\nTop margin for tooltip.\n\nis_active\n\nbool, optional\n\nWhether the button is currently active.\n\nThe rest of the parameters customize the look and emit signals for\n\n\n\ndifferent user interactions.\n\n\n\nExamples\n\n>>> import sys\n>>> from PySide6.QtWidgets import QApplication, QVBoxLayout, QPushButton\n>>> from ansys.aedt.toolkits.common.ui.utils.widgets import *\n\n>>> class Example(QWidget):\n>>>     def __init__(self):\n>>>         super().__init__()\n>>>         layout = QVBoxLayout(self)\n>>>         layout.addWidget(QPushButton(\"Button 1\"))\n>>>         layout.addWidget(PyIconButton('icon_signal.svg', \"#FF0000\", tooltip_text=\"Example\")\n>>>         )\n>>>         layout.addWidget(QPushButton(\"Button 2\"))\n\n>>> if __name__ == \"__main__\":\n>>>     app = QApplication([])\n>>>     window = Example()\n>>>     window.show()\n>>>     app.exec()\n\n\n\nchange_style(event)\n\nChange the style of the button based on the given event.\n\nParameters\n\nevent\n\nQEvent\n\nEvent triggering the style change.\n\n\n\nenterEvent(event)\n\nHandle the enter event.\n\nParameters\n\nevent\n\nQEvent\n\nEnter event.\n\n\n\nicon_paint(qp, image, rect)\n\nPaint the icon on the button.\n\nParameters\n\nqp\n\nQPainter\n\nQPainter object.\n\nimage\n\npython:str\n\nPath to the icon image file.\n\nrect\n\nQRect\n\nRectangle for the icon placement.\n\n\n\nis_active()\n\nCheck if the button is in an active state.\n\nReturns\n\nbool\n\nTrue if the button is active, False otherwise.\n\n\n\nleaveEvent(event)\n\nHandle the leave event.\n\nParameters\n\nevent\n\nQEvent\n\nLeave event.\n\n\n\nmousePressEvent(event)\n\nHandle the mouse press event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse press event.\n\n\n\nmouseReleaseEvent(event)\n\nHandle the mouse release event.\n\nParameters\n\nevent\n\nQEvent\n\nMouse release event.\n\n\n\npaintEvent(event)\n\nPaint the button.\n\nParameters\n\nevent\n\nQEvent\n\nPaint event.\n\n\n\nset_active(is_active)\n\nSet the active state of the button.\n\nParameters\n\nis_active\n\nbool\n\nWhether the button is active or not.\n\n\n\nset_icon(icon_path)\n\nSet the icon for the button.\n\nParameters\n\nicon_path\n\npython:str\n\nPath to the icon image file."},{"objectID":"Home","href":"toolkit/ui_reference/_autosummary/ansys.aedt.toolkits.common.ui.utils.windows.common_window_utils.CommonWindowUtils.toggle_left_column.html#toggle_left_column","title":"toggle_left_column","text":"toggle_left_column\n\n\n\nCommonWindowUtils.toggle_left_column()\n\nToggles the left column of the CommonWindow by starting a box animation."},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#aedt-connect-session-example","title":"AEDT connect session example","text":"AEDT connect session example\n\nThis example shows how to use the Common AEDT API to connect to an existing AEDT session, create a HFSS design and create a waveguide."},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#perform-required-imports","title":"AEDT connect session example > Perform required imports","text":"Perform required imports\n\nPerform the required imports.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#initialize-toolkit","title":"AEDT connect session example > Initialize toolkit","text":"Initialize toolkit\n\nInitialize the toolkit.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#get-toolkit-properties","title":"AEDT connect session example > Get toolkit properties","text":"Get toolkit properties\n\nGet the toolkit properties, which contain the project information.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#get-aedt-sessions","title":"AEDT connect session example > Get AEDT sessions","text":"Get AEDT sessions\n\nGet AEDT sessions and select the first one.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#set-properties","title":"AEDT connect session example > Set properties","text":"Set properties\n\nSpecify the AEDT session selection.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#initialize-aedt","title":"AEDT connect session example > Initialize AEDT","text":"Initialize AEDT\n\nLaunch a new AEDT session in a thread.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#wait-for-the-toolkit-thread-to-be-idle","title":"AEDT connect session example > Wait for the toolkit thread to be idle","text":"Wait for the toolkit thread to be idle\n\nWait for the toolkit thread to be idle and ready to accept a new task.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#connect-design","title":"AEDT connect session example > Connect design","text":"Connect design\n\nConnect or create a new design.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#get-toolkit-properties","title":"AEDT connect session example > Get toolkit properties","text":"Get toolkit properties\n\nGet the toolkit properties, which contain the project information.\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#create-a-waveguide","title":"AEDT connect session example > Create a waveguide","text":"Create a waveguide\n\nCreate a waveguide in the design.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/aedt_common/api_aedt_connect_session.html#save-and-release-aedt","title":"AEDT connect session example > Save and release AEDT","text":"Save and release AEDT\n\nSave and release AEDT.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nThis section explains how to install the PyAEDT Common Toolkit.\nIt then explains this toolkit’s architecture and provides an example\nof how to use its common methods to develop a new Ansys\nElectronics Desktop (AEDT) toolkit.\n\nInstallation \n\nLearn how to install the PyAEDT Common Toolkit.\n\ninstallation\n\nArchitecture \n\nLearn about this toolkit’s architecture.\n\narchitecture\n\nExample toolkit \n\nUse this toolkit’s common methods to create an example toolkit.\n\nexample_toolkit\n\n"}]