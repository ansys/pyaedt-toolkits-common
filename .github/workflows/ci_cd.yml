name: "CI"
on:
  pull_request:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'aedt.common.toolkit.docs.pyansys.com'
  LIBRARY_NAME: 'ansys-aedt-toolkits-common'
  LIBRARY_NAMESPACE: 'ansys.aedt.toolkits.common'
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  ON_CI: True

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
          use-upper-case: true

  vulnerabilities:
    name: "Vulnerabilities"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-vulnerabilities@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          python-package-name: ${{ env.LIBRARY_NAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          dev-mode: ${{ github.ref != 'refs/heads/main' }}

  # NOTE: We do not allow dependabot to trigger the CI/CD pipeline automatically.
  # This is to mitigate supply chain attacks, where a malicious dependency update
  # could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  block-dependabot:
    name: "Block dependabot (on dependabot PR)"
    runs-on: ubuntu-latest
    steps:
      - name: Exit if dependabot triggered the workflow
        if: github.triggering_actor == 'dependabot[bot]'
        run: |
          echo "::warning::Dependabot is not allowed to trigger this workflow. Please review carefully the changes before running the workflow manually."
          exit 1

  # NOTE: We do not allow pyansys-ci-bot to trigger the CI/CD pipeline automatically
  # on dependabot's PR. This is to mitigate supply chain attacks, where a malicious
  # dependency update could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  block-pyansys-ci-bot:
    name: "Block PyAnsys-CI-bot (on dependabot PR)"
    needs: block-dependabot
    runs-on: ubuntu-latest
    steps:
      - name: Exit if pyansys-ci-bot triggered the workflow on dependabot's PR
        if: github.triggering_actor == 'pyansys-ci-bot' && startsWith(github.head_ref, 'dependabot')
        run: |
          echo "::warning::PyAnsys CI bot is not allowed to trigger this workflow in dependabot's PR. Please review carefully the changes before running the workflow manually."
          exit 1


  pr-title:
    name: Check the title of the PR (if needed)
    runs-on: ubuntu-latest
    needs: [ block-pyansys-ci-bot ]
    steps:
      - name: Check the title of the pull request
        if: github.event_name == 'pull_request'
        uses: ansys/actions/check-pr-title@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          use-upper-case: true
      - name: Check the title of the pull request
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "::notice::Skipping PR title check for non-PR events"

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "3.4.1"

  doc-build:
    name: "Build documentation"
    runs-on: [self-hosted, pyaedt, toolkits, Windows]
    needs: [ doc-style ]
    timeout-minutes: 20
    steps:
      - name: Build documentation
        uses: ansys/actions/doc-build@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          add-pdf-html-docs-as-assets: true
          check-links: true

  smoke-tests:
    name: "Build and Smoke tests"
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        python-version: ['3.10', '3.11', '3.12', '3.13']
    runs-on: ${{ matrix.os }}
    needs: [ code-style ]
    steps:
      - uses: ansys/actions/build-wheelhouse@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests_windows:
    name: "Windows Tests"
    runs-on: [self-hosted, pyaedt, toolkits, Windows]
    needs: [smoke-tests]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Create Python venv
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: Install packages for testing
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]

      - name: Test AEDT Common API
        timeout-minutes: 5
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v -m aedt_common_api --cov

      - name: Test Common API
        timeout-minutes: 5
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v -m common_api --cov --cov-append

      - name: Test EDB API
        timeout-minutes: 5
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v -m edb_api --cov --cov-append

      - name: Test REST API
        timeout-minutes: 5
        run: |
          .\.venv\Scripts\Activate.ps1

          pytest -v -m rest_api --cov --cov-append

      - name: Test utils
        timeout-minutes: 5
        run: |
          .\.venv\Scripts\Activate.ps1

          pytest -v -m utils --cov --cov-append

      - name: Test UI
        timeout-minutes: 5
        run: |
          .\.venv\Scripts\Activate.ps1

          pytest -v -m ui --cov --cov-append

      - name: "Combine coverage files"
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m coverage html -d .cov\total-html
          python -m coverage xml -o .cov\total.xml

      - name: "Upload coverage results"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: .cov/total-html-windows
          name: html-total-coverage-windows

      - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          name: codecov-tests-windows
          files: .cov/total.xml
          flags: windows_tests

  tests_linux:
    name: "Linux Tests"
    runs-on: [self-hosted, pyaedt, toolkits, Linux]
    needs: [ smoke-tests ]
    env:
      ANSYSEM_ROOT251: '/opt/AnsysEM/v251/AnsysEM'
      ANS_NODEPCHECK: '1'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install system packages for Linux tests"
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcb1-dev \
            libxcb-glx0-dev \
            libxcb-keysyms1-dev \
            libxcb-image0-dev \
            libxcb-shm0-dev \
            libxcb-icccm4-dev \
            libxcb-sync-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-cursor-dev \
            libxcb-util-dev \
            libxcb-xkb-dev \
            libxcb-xinerama0-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev

      - name: Create Python venv
        run: |
          python -m venv .venv_linux

      - name: Install packages for testing
        run: |
          source .venv_linux/bin/activate
          python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip -U
          python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org wheel setuptools -U
          python -c "import sys; print(sys.executable)"
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]
          pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pytest-azurepipelines

      - name: Test AEDT Common API
        timeout-minutes: 5
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m aedt_common_api

      - name: Test Common API
        timeout-minutes: 5
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m common_api

      - name: Test EDB API
        timeout-minutes: 5
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m edb_api

      - name: Test REST API
        timeout-minutes: 5
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m rest_api

      - name: Test utils
        timeout-minutes: 5
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m utils

      - name: Test UI
        timeout-minutes: 5
        run: |
          source .venv_linux/bin/activate
          xvfb-run pytest -v -m ui --cov --cov-append

      - name: "Upload coverage results"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: .cov/total-html-linux
          name: html-total-coverage-linux

      - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          name: codecov-tests-linux
          files: .cov/total.xml
          flags: linux_tests

  build-library:
    name: "Build library artifacts"
    runs-on: ubuntu-latest
    needs: [ doc-build, tests_windows, tests_linux ]
    steps:
      - uses: ansys/actions/build-library@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: build-library
    runs-on: ubuntu-latest
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Download the library artifacts from build-library step
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ env.LIBRARY_NAME }}-artifacts
          path: ${{ env.LIBRARY_NAME }}-artifacts

      - name: Release to PyPI using trusted publisher
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.LIBRARY_NAME }}-artifacts
          skip-existing: false

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: build-library
    if: github.event_name == 'push'
    steps:
      - uses: ansys/actions/doc-deploy-dev@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-stable@8d3e4946f36c2a7d447b92e34b1022a5c9dc77a7 # v10.0.12
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
